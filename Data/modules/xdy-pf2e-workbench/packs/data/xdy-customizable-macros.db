{"_id":"SFqBWs6uMnocNatW","actorIds":[],"author":"MN9oPUiY9qA8NJ2X","command":"//ApoApostolov asked for this, I'll keep it around until someone says it has broken.\n\n/* eslint-disable */\n// noinspection JSAnnotator\n\n// This is a sample macro that requires customization to be useful.\n// See https://apoapostolov.notion.site/PF2-Procedural-Checks-Macro-996bd20ace45411eb4b1f566686ecdb1 for documentation.\n\n// Dialog's Title\nconst title = \"Door Checks\";\n\n// List of actors you want to list in the Dropdown Menu REPLACE WITH YOUR OWN ACTORS\nconst party = [\"5YCNP4CvPp6hw7WN\", \"8A5qtayUjkhqfoYi\", \"Cy3njyMAB5K3eUxm\", \"T9tSdOoarQBOsTz5\"];\n\n// Actions you want to take. REPLACE DEFAULTS WITH THE ABOVE ACTORS\nconst actions = [\n    { name: \"Seek\", default: \"T9tSdOoarQBOsTz5\" },\n    { name: \"Seek\", default: \"5YCNP4CvPp6hw7WN\" },\n    { name: \"Pick a Lock\", default: \"8A5qtayUjkhqfoYi\" },\n    { name: \"Force Open\", default: \"Cy3njyMAB5K3eUxm\" }\n];\n\nconst actors = party.map((a) => game.actors.get(a));\n\nif (window.actionDialog?.rendered) {\n    return window.actionDialog.close();\n}\n/*\n * Default Icon to be given in case there is no icon parameter in an Action\n */\nconst defaultIcon = \"systems/pf2e/icons/actions/craft/unknown-item.webp\";\n\n/**\n * This is the list of actions, wich can de edited\n *\n * Action Interface:\n * @param   {string}            name    Name shown as the button text;\n * @param   {string}            skill   Name of the skill, to get the bonus in parenthesis from;\n * @param   {function|string}   action  Function or Macro ID (in case of a string) to call;\n *                                      The call passes an {actors: [actor]} object as argument;\n * @param   {string|undefined}  icon    The icon to be shown in the button. If undefined, will\n *                                      return the defaultIcon;\n */\nconst actionList = [\n    {\n        name: \"Aid\",\n        skill: \"\",\n        action: \"y1rDU9gTz6GVobwf\",\n        icon: \"systems/pf2e/icons/spells/efficient-apport.webp\"\n    },\n    {\n        name: \"Avoid Notice\",\n        skill: \"Stealth\",\n        action: game.pf2e.actions.avoidNotice,\n        icon: \"systems/pf2e/icons/features/classes/surprice-attack.webp\"\n    },\n    {\n        name: \"Balance\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.balance,\n        icon: \"systems/pf2e/icons/spells/efficient-apport.webp\",\n    },\n    {\n        name: \"Climb\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.climb,\n        icon: \"icons/sundries/misc/ladder.webp\",\n    },\n    {\n        name: \"Coerce\",\n        skill: \"Intimidation\",\n        action: game.pf2e.actions.coerce,\n        icon: \"icons/skills/social/intimidation-impressing.webp\",\n    },\n    {\n        name: \"Command an Animal\",\n        skill: \"Nature\",\n        action: game.pf2e.actions.commandAnAnimal,\n        icon: \"icons/environment/creatures/horse-white.webp\",\n    },\n    {\n        name: \"Craft\",\n        skill: \"Crafting\",\n        action: game.pf2e.actions.craft,\n        icon: \"icons/skills/trades/smithing-anvil-silver-red.webp\",\n    },\n    {\n        name: \"Create a Diversion - Gesture\",\n        skill: \"Deception\",\n        action: \"game.pf2e.actions.createADiversion({ event: event, variant: 'gesture' });\",\n        icon: \"icons/skills/social/wave-halt-stop.webp\",\n    },\n    {\n        name: \"Create a Diversion - Trick\",\n        skill: \"Deception\",\n        action: \"game.pf2e.actions.createADiversion({ event: event, variant: 'trick' });\",\n        icon: \"systems/pf2e/icons/spells/charming-words.webp\",\n    },\n    {\n        name: \"Demoralize\",\n        skill: \"Intimidation\",\n        action: game.pf2e.actions.demoralize,\n        icon: \"icons/skills/social/intimidation-impressing.webp\"\n    },\n    {\n        name: \"Disarm\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.disarm,\n        icon: \"icons/skills/melee/sword-damaged-broken-glow-red.webp\"\n    },\n    {\n        name: \"Feint\",\n        skill: \"Deception\",\n        action: game.pf2e.actions.feint,\n        icon: \"icons/skills/melee/maneuver-sword-katana-yellow.webp\",\n    },\n    {\n        name: \"Follow an Expert\",\n        skill: \"\",\n        action: \"eHtbauiO3n075GUu\",\n        icon: \"systems/pf2e/icons/spells/favorable-review.webp\"\n    },\n    {\n        name: \"Force Open\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.forceOpen,\n        icon: \"icons/equipment/feet/boots-armored-steel.webp\",\n    },\n    {\n        name: \"Gather Information\",\n        skill: \"Diplomacy\",\n        action: game.pf2e.actions.gatherInformation,\n        icon: \"icons/skills/social/diplomacy-handshake.webp\"\n    },\n    {\n        name: \"Grapple\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.grapple,\n        icon: \"icons/skills/melee/unarmed-punch-fist.webp\"\n    },\n    {\n        name: \"Hide\",\n        skill: \"Stealth\",\n        action: game.pf2e.actions.hide,\n        icon: \"icons/magic/nature/stealth-hide-eyes-green.webp\"\n    },\n    {\n        name: \"Impersonate\",\n        skill: \"Deception\",\n        action: game.pf2e.actions.impersonate\n    },\n    {\n        name: \"Jump - High\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.highJump,\n        icon: \"icons/skills/movement/arrows-up-trio-red.webp\",\n    },\n    {\n        name: \"Jump - Long\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.longJump,\n        icon: \"icons/skills/movement/figure-running-gray.webp\",\n    },\n    {\n        name: \"Lie\",\n        skill: \"Deception\",\n        action: game.pf2e.actions.lie,\n        icon: \"icons/magic/control/mouth-smile-deception-purple.webp\"\n    },\n    {\n        name: \"Make an Impression\",\n        skill: \"Diplomacy\",\n        action: game.pf2e.actions.makeAnImpression,\n        icon: \"icons/environment/people/commoner.webp\"\n    },\n    {\n        name: \"Maneuver in Flight\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.maneuverInFlight,\n        icon: \"icons/commodities/biological/wing-bird-white.webp\"\n    },\n    {\n        name: \"Pick a Lock\",\n        skill: \"Thievery\",\n        action: game.pf2e.actions.pickALock,\n        icon: \"icons/skills/social/theft-pickpocket-bribery-brown.webp\",\n    },\n    {\n        name: \"Raise a Shield\",\n        skill: \"\",\n        action: game.pf2e.actions.raiseAShield,\n        icon: \"systems/pf2e/icons/actions/raise-a-shield.webp\"\n    },\n    {\n        name: \"Recall Knowledge\",\n        skill: \"\",\n        action: \"EBdLzeLZyUju18Af\",\n        icon: \"systems/pf2e/icons/features/classes/imperial.webp\"\n    },\n    {\n        name: \"Repair\",\n        skill: \"Crafting\",\n        action: game.pf2e.actions.repair,\n        icon: \"icons/tools/smithing/anvil.webp\",\n    },\n    {\n        name: \"Request\",\n        skill: \"Diplomacy\",\n        action: game.pf2e.actions.request,\n        icon: \"icons/skills/social/thumbsup-approval-like.webp\"\n    },\n    {\n        name: \"Seek\",\n        skill: \"Perception\",\n        action: game.pf2e.actions.seek,\n        icon: \"icons/tools/scribal/magnifying-glass.webp\",\n    },\n    {\n        name: \"Sense Direction\",\n        skill: \"Survival\",\n        action: game.pf2e.actions.senseDirection,\n        icon: \"icons/tools/navigation/compass-brass-blue-red.webp\"\n    },\n    {\n        name: \"Sense Motive\",\n        skill: \"Perception\",\n        action: game.pf2e.actions.senseMotive,\n        icon: \"icons/environment/people/commoner.webp\",\n    },\n    {\n        name: \"Shove\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.shove,\n        icon: \"systems/pf2e/icons/spells/hydraulic-push.webp\",\n    },\n    {\n        name: \"Sneak\",\n        skill: \"Stealth\",\n        action: game.pf2e.actions.sneak,\n        icon: \"icons/magic/nature/stealth-hide-eyes-green.webp\"\n    },\n    {\n        name: \"Squeeze\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.squeeze,\n        icon: \"icons/commodities/tech/claw-mechanical.webp\",\n    },\n    {\n        name: \"Swim\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.swim,\n        icon: \"icons/creatures/fish/fish-shark-swimming.webp\"\n    },\n    {\n        name: \"Take Cover\",\n        skill: \"\",\n        action: \"PC0y5A6tHrtJhqVL\",\n        icon: \"systems/pf2e/icons/equipment/shields/tower-shield.webp\",\n    },\n    {\n        name: \"Track\",\n        skill: \"Survival\",\n        action: game.pf2e.actions.track,\n        icon: \"systems/pf2e/icons/conditions/observed.webp\",\n    },\n    {\n        name: \"Treat Disease\",\n        skill: \"Medicine\",\n        action: game.pf2e.actions.treatDisease,\n        icon: \"icons/magic/nature/root-vine-caduceus-healing.webp\"\n    },\n    {\n        name: \"Treat Poison\",\n        skill: \"Medicine\",\n        action: game.pf2e.actions.treatPoison,\n        icon: \"systems/pf2e/icons/effects/treat-poison.webp\"\n    },\n    {\n        name: \"Treat Wounds\",\n        skill: \"Medicine\",\n        action: \"BO2iFo14pFYHEIGa\",\n        icon: \"icons/magic/nature/root-vine-caduceus-healing.webp\"\n    },\n    {\n        name: \"Trip\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.trip,\n        icon: \"icons/skills/wounds/bone-broken-marrow-yellow.webp\",\n    },\n    {\n        name: \"Tumble Through\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.tumbleThrough,\n        icon: \"icons/skills/movement/feet-winged-sandals-tan.webp\",\n    }\n].sort((a, b) => -(a.name < b.name));\n\nconst getSkills = (actor) => {\n    return { perception: actor.attributes.perception, ...actor.skills };\n};\n\nconst createMenu = (actionName) => {\n    const action = actionList.find((a) => a.name === actionName.name);\n    const idx = actionList.indexOf(action);\n\n    const options = actors.map((actor) => `<option value=\"${actor.id}\" ${actor.id === actionName.default ? \"selected\" : \"\"}>${actor.name}</option>`).join(\"\");\n\n    return `\n    <div class=\"form-group\">\n        <label class=\"centered\"><img src=\"${action.icon ?? defaultIcon}\" height=\"24\"/> ${action.name}</label>\n        <select name=\"${action.name}\">\n                    ${options}\n        </select>\n        <button class=\"small\" data-action=\"${idx}\">\n            <i class=\"fas fa-dice-d6\"></i>\n            Roll\n        </button>\n    </div>\n    `;\n};\n\nconst content = `\n<style>\nlabel.centered {\n    display: flex;\n    justify-content: flex-start;\n}\nlabel.centered img {\n    margin-right: 10px;\n}\nbutton.small {\n    flex: 1;\n    margin-left: 5px;\n}\n</style>\n<form autocomplete=\"off\" spellcheck=\"off\">\n    ${actions.map((action) => createMenu(action)).join(\"\")}\n</form>\n`;\n\nwindow.actionDialog = new Dialog(\n    {\n        title,\n        content,\n        buttons: {\n            rollAll: {\n                icon: `<i class=\"fas fa-dice\"></i>`,\n                label: \"Roll All\",\n                callback: (html) => {\n                    const buttons = html.querySelectorAll(\"form button\");\n                    if (game.user.getFlag(\"pf2e\", \"settings.showRollDialogs\")) {\n                        for (let i = buttons.length; i > 0; i--) buttons[i - 1].click();\n                        return;\n                    }\n                    buttons.forEach((btn) => btn.click());\n                }\n            }\n        },\n        default: \"rollAll\",\n        render: (html) => {\n            actionDialog.submit = function(button, event) {\n                try {\n                    if (button.callback) button.callback(this.options.jQuery ? this.element : this.element[0], event);\n                } catch (err) {\n                    ui.notifications.error(err);\n                    throw new Error(err);\n                }\n            };\n            const action = (button) => {\n                const idx = button.dataset.action;\n                const action = actionList[idx];\n                const actor = actors[party.indexOf(button.parentElement.querySelector(\"select\").value)];\n\n                if (typeof action.action === \"string\") game.macros.get(action.action)?.execute();\n                else action.action({ actors: [actor] });\n            };\n            html.querySelectorAll(\"form button\").forEach((button) => button.addEventListener(\"click\", () => action(button)));\n        }\n    },\n    { jQuery: false }\n).render(true);\n","flags":{},"img":"systems/pf2e/icons/default-icons/party.svg","name":"customizableProceduralChecks","permission":{"default":1},"scope":"global","type":"script"}
{"_id":"cRAY7uGIvlOEWCRq","actorIds":[],"author":"Ao1OXhBrBU32xAPn","command":"// Made by esheyw, source: https://discord.com/channels/880968862240239708/880969304365994034/1161188968424018020\nfunction isSpellAvailable(actor, spell, { readyToCast = true, spellRank = null, spellcastingEntry = null} = {}) {\n    //if the actor isn't a spellcaster, what are we even doing\n    if (!actor?.isSpellcaster) return false;\n\n    let spellName = \"\";\n    let isFocusSpell = false;\n    //if passed a Spell object, use its name and rank, check if focus spell or cantrip\n    if (typeof spell === 'string') {\n        spellName = spell;\n    } else if (['spell', 'focus'].includes(spell?.category?.value)) {\n        spellName = spell.name;\n        spellRank ??= spell.rank;\n        isFocusSpell = spell.isFocusSpell;\n    } else {\n        return ui.notifications.error('isSpellAvailable: spell must be a string or a non-ritual spell object.');\n    }\n\n    if (spellRank !== null && (spellRank < 1 || spellRank > 11)) {\n\t\treturn ui.notifications.error(`isSpellAvailable: spellRank must be between 1 and 11, provided ${spellRank}`)\n\t}\n\n    //limit to focus entries if passed focus spell, ignore ritual entries\n    let entries = actor.spellcasting.contents.filter(e => !e.isRitual && (!isFocusSpell || e.isFocusPool)) ?? [];\n    //if provided an entry name, find just that one\n    // console.warn(entries)\n    if (spellcastingEntry) {\n        selectedEntry = entries.find(e => e.name === spellcastingEntry);\n        if (!selectedEntry) {\n            return ui.notifications.error(`isSpellAvailable: Spellcasting entry '${spellcastingEntry}' does not exist on actor ${actor?.name}`);\n        }\n        entries = [selectedEntry];\n    }\n    for (let entry of entries) {\n        // we want a spell matching the name, and that matches one of\n        // - is the rank specified\n        // - is a cantrip\n        // - is a signature spell\n        // if there's more than one, take the one with the lowest rank\n        const extantSpell = entry.spells.contents\n                            .filter(sp =>\n                                sp.name === spellName\n                                && (sp.isCantrip\n                                || (spellRank && sp.rank === spellRank)\n                                || sp.system?.location?.signature\n                                || !spellRank))\n                            .reduce((prev,curr) => (prev?.rank < curr?.rank ? prev : curr), null);\n        // if spell isn't found in this entry, it can't be available via it, try the next one\n        // console.warn('extantSpell', extantSpell)\n        if (!extantSpell) continue;\n\n        //if we just want to check if the spell is prepared/known, we can call it here\n        if (!readyToCast) return true;\n\n        const spellID = extantSpell._id;\n        const allSlots = Object.values(entry.system.slots);\n        // cantrips can always be cast unless they're not prepared in a prepared entry\n        if (extantSpell.isCantrip) {\n            if (!entry.isPrepared || Object.values(allSlots[0].prepared).find(slot => slot.id === spellID)) return true;\n            //spell is not prepared in this entry\n            continue;\n        }\n        // remove cantrip slots from consideration from here on\n        allSlots.shift();\n\n        if (entry.isFocusPool) {\n            // we know we have the spell, so just test if we have focus points\n            return (actor.system.resources.focus.value >= 1);\n        }\n        // Innate spells store their uses per spell, no slots\n        if (entry.isInnate) {\n            if (extantSpell.system.location.uses.value > 0) return true;\n        }\n\n        // if spellRank set, limit to just slots of that rank, accounting for lack of cantrip slots with the -1\n        // otherwise limit to ranks of the spell's or higher\n        const relevantSlotRanks = spellRank\n                              ? [allSlots[spellRank - 1]]\n                              : allSlots.filter(sr=>sr.max > 0).slice(extantSpell.rank - 1);\n\n        if (entry.isSpontaneous) {\n            // we have already narrowed ranks down to ones that can cast the spell, do any of them have unused slots?\n            for (let slotRank of relevantSlotRanks) {\n                if (slotRank.value > 0) return true;\n            }\n        }\n\n        if (entry.isPrepared) {\n            for (let slotRank of relevantSlotRanks) {\n                if (entry.isFlexible) {\n                    // flexible entries aren't picky, any unused slot of sufficient rank will do\n                    if (slotRank.value > 0) return true;\n                }\n                // is the spell prepared in an unexpended slot?\n                foundSpell = Object.values(slotRank.prepared)\n                                .find(slot => slot.id === spellID\n                                              && (!readyToCast || slot?.expended !== true));\n                if (foundSpell) return true;\n            }\n        }\n    }\n    // default:\n    return false;\n}\n\nconst options = {\n    // spellRank: 1,\n    // spellcastingEntry: 'Divine Flexible Spells',\n    // readyToCast: false,\n};\n\nconsole.warn(isSpellAvailable(token.actor, 'Blur', options));\n","flags":{},"img":"icons/svg/dice-target.svg","name":"customizableIsSpellAvailable","permission":{"default":1},"scope":"global","type":"script"}
{"_id":"kSQlNEN3uD0Dch1D","actorIds":[],"author":"IEH0YLZ6lAwa7chn","command":"//ApoApostolov asked for this, I'll keep it around until someone says it has broken.\n/* eslint-disable */\n// noinspection JSAnnotator\n\n/**\n * This macro opens a dialog containing a list of actions to be used by the selected Actor\n * If no actor is selected, it selects the user's standard character.\n * If there is no user character, it shows up a warning notification.\n * See https://apoapostolov.notion.site/PF2-Basic-Actions-Macro-1255adc12ecf44e881e6cd87941f7858 for documentation.\n */\n\n// List of actors, to evaluate the best skills in the party\n// const party = [\"4bvLhJPGiHGq0F5I\",\"RKgz8QKUIv6v47qA\",\"RPYPiRPaCPCSluGs\",\"qYr5UnQkPA3bOz24\"];\nconst party =\n    game?.actors\n        ?.filter((x) => x.hasPlayerOwner)\n        .filter((x) => x.isOfType(\"character\"))\n        .filter((x) => x.alliance === \"party\")\n        .filter((actor) => {\n            return !actor.system.traits[\"value\"].toString().includes(\"minion\");\n        })\n        .filter((actor) => !actor.system.traits[\"value\"].toString().includes(\"eidolon\"))\n        .map((actor) => actor.id) || [];\nif (window.actionDialog?.rendered) {\n    // @ts-ignore\n    return window.actionDialog.close();\n}\nconst getActor = () => {\n    return canvas.tokens.controlled.length\n        ? canvas.tokens.controlled.map((token) => token.actor)[0]\n        : game.user.character;\n};\nconst actor = getActor();\nif (!actor) {\n    // @ts-ignore\n    return ui.notifications.warn(\"No character selected!\");\n}\n/**\n * Color pallete to use, representing the rank of skills\n */\nconst colorPallete = [\"#424242\", \"#171f67\", \"#3c005e\", \"#664400\", \"#5e0000\"];\n/**\n * Default Icon to be given in case there is no icon parameter in an Action\n */\nconst defaultIcon = \"systems/pf2e/icons/actions/craft/unknown-item.webp\";\n/**\n * This is the list of actions, wich can de edited\n *\n * Action Interface:\n * @param   {string}            name    Name shown as the button text;\n * @param   {string}            skill   Name of the skill, to get the bonus in parenthesis from;\n * @param   {function|string}   action  Function or Macro ID (in case of a string) to call;\n *                                      The call passes an {actors: [actor]} object as argument;\n * @param   {string|undefined}  icon    The icon to be shown in the button. If undefined, will\n *                                      return the defaultIcon;\n */\nconst actionList = [\n    {\n        name: \"Aid\",\n        skill: \"\",\n        action: \"y1rDU9gTz6GVobwf\",\n        icon: \"systems/pf2e/icons/spells/efficient-apport.webp\"\n    },\n    {\n        name: \"Avoid Notice\",\n        skill: \"Stealth\",\n        action: game.pf2e.actions.avoidNotice,\n        icon: \"systems/pf2e/icons/features/classes/surprice-attack.webp\"\n    },\n    {\n        name: \"Balance\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.balance,\n        icon: \"systems/pf2e/icons/spells/efficient-apport.webp\",\n    },\n    {\n        name: \"Climb\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.climb,\n        icon: \"icons/sundries/misc/ladder.webp\"\n    },\n    {\n        name: \"Coerce\",\n        skill: \"Intimidation\",\n        action: game.pf2e.actions.coerce,\n        icon: \"icons/skills/social/intimidation-impressing.webp\",\n    },\n    {\n        name: \"Command an Animal\",\n        skill: \"Nature\",\n        action: game.pf2e.actions.commandAnAnimal,\n        icon: \"icons/environment/creatures/horse-white.webp\",\n    },\n    {\n        name: \"Craft\",\n        skill: \"Crafting\",\n        action: game.pf2e.actions.craft,\n        icon: \"icons/skills/trades/smithing-anvil-silver-red.webp\",\n    },\n    {\n        name: \"Create a Diversion - Gesture\",\n        skill: \"Deception\",\n        action: \"game.pf2e.actions.createADiversion({ event: event, variant: 'gesture' });\",\n        icon: \"icons/skills/social/wave-halt-stop.webp\",\n    },\n    {\n        name: \"Create a Diversion - Trick\",\n        skill: \"Deception\",\n        action: \"game.pf2e.actions.createADiversion({ event: event, variant: 'trick' });\",\n        icon: \"systems/pf2e/icons/spells/charming-words.webp\",\n    },\n    {\n        name: \"Demoralize\",\n        skill: \"Intimidation\",\n        action: game.pf2e.actions.demoralize,\n        icon: \"icons/skills/social/intimidation-impressing.webp\"\n    },\n    {\n        name: \"Disarm\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.disarm,\n        icon: \"icons/skills/melee/sword-damaged-broken-glow-red.webp\"\n    },\n    {\n        name: \"Feint\",\n        skill: \"Deception\",\n        action: game.pf2e.actions.feint,\n        icon: \"icons/skills/melee/maneuver-sword-katana-yellow.webp\",\n    },\n    {\n        name: \"Follow an Expert\",\n        skill: \"\",\n        action: \"eHtbauiO3n075GUu\",\n        icon: \"systems/pf2e/icons/spells/favorable-review.webp\"\n    },\n    {\n        name: \"Force Open\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.forceOpen,\n        icon: \"icons/equipment/feet/boots-armored-steel.webp\",\n    },\n    {\n        name: \"Gather Information\",\n        skill: \"Diplomacy\",\n        action: game.pf2e.actions.gatherInformation,\n        icon: \"icons/skills/social/diplomacy-handshake.webp\"\n    },\n    {\n        name: \"Grapple\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.grapple,\n        icon: \"icons/skills/melee/unarmed-punch-fist.webp\"\n    },\n    {\n        name: \"Hide\",\n        skill: \"Stealth\",\n        action: game.pf2e.actions.hide,\n        icon: \"icons/magic/nature/stealth-hide-eyes-green.webp\"\n    },\n    {\n        name: \"Impersonate\",\n        skill: \"Deception\",\n        action: game.pf2e.actions.impersonate\n    },\n    {\n        name: \"Jump - High\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.highJump,\n        icon: \"icons/skills/movement/arrows-up-trio-red.webp\",\n    },\n    {\n        name: \"Jump - Long\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.longJump,\n        icon: \"icons/skills/movement/figure-running-gray.webp\",\n    },\n    {\n        name: \"Lie\",\n        skill: \"Deception\",\n        action: game.pf2e.actions.lie,\n        icon: \"icons/magic/control/mouth-smile-deception-purple.webp\"\n    },\n    {\n        name: \"Make an Impression\",\n        skill: \"Diplomacy\",\n        action: game.pf2e.actions.makeAnImpression,\n        icon: \"icons/environment/people/commoner.webp\"\n    },\n    {\n        name: \"Maneuver in Flight\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.maneuverInFlight,\n        icon: \"icons/commodities/biological/wing-bird-white.webp\"\n    },\n    {\n        name: \"Pick a Lock\",\n        skill: \"Thievery\",\n        action: game.pf2e.actions.pickALock,\n        icon: \"icons/skills/social/theft-pickpocket-bribery-brown.webp\",\n    },\n    {\n        name: \"Raise a Shield\",\n        skill: \"\",\n        action: game.pf2e.actions.raiseAShield,\n        icon: \"systems/pf2e/icons/actions/raise-a-shield.webp\"\n    },\n    {\n        name: \"Recall Knowledge\",\n        skill: \"\",\n        action: \"EBdLzeLZyUju18Af\",\n        icon: \"systems/pf2e/icons/features/classes/imperial.webp\"\n    },\n    {\n        name: \"Repair\",\n        skill: \"Crafting\",\n        action: game.pf2e.actions.repair,\n        icon: \"icons/tools/smithing/anvil.webp\",\n    },\n    {\n        name: \"Request\",\n        skill: \"Diplomacy\",\n        action: game.pf2e.actions.request,\n        icon: \"icons/skills/social/thumbsup-approval-like.webp\"\n    },\n    {\n        name: \"Seek\",\n        skill: \"Perception\",\n        action: game.pf2e.actions.seek,\n        icon: \"icons/tools/scribal/magnifying-glass.webp\",\n    },\n    {\n        name: \"Sense Direction\",\n        skill: \"Survival\",\n        action: game.pf2e.actions.senseDirection,\n        icon: \"icons/tools/navigation/compass-brass-blue-red.webp\"\n    },\n    {\n        name: \"Sense Motive\",\n        skill: \"Perception\",\n        action: game.pf2e.actions.senseMotive,\n        icon: \"icons/environment/people/commoner.webp\",\n    },\n    {\n        name: \"Shove\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.shove,\n        icon: \"systems/pf2e/icons/spells/hydraulic-push.webp\",\n    },\n    {\n        name: \"Sneak\",\n        skill: \"Stealth\",\n        action: game.pf2e.actions.sneak,\n        icon: \"icons/magic/nature/stealth-hide-eyes-green.webp\"\n    },\n    {\n        name: \"Squeeze\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.squeeze,\n        icon: \"icons/commodities/tech/claw-mechanical.webp\",\n    },\n    {\n        name: \"Swim\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.swim,\n        icon: \"icons/creatures/fish/fish-shark-swimming.webp\"\n    },\n    {\n        name: \"Take Cover\",\n        skill: \"\",\n        action: \"PC0y5A6tHrtJhqVL\",\n        icon: \"systems/pf2e/icons/equipment/shields/tower-shield.webp\",\n    },\n    {\n        name: \"Track\",\n        skill: \"Survival\",\n        action: game.pf2e.actions.track,\n        icon: \"systems/pf2e/icons/conditions/observed.webp\",\n    },\n    {\n        name: \"Treat Disease\",\n        skill: \"Medicine\",\n        action: game.pf2e.actions.treatDisease,\n        icon: \"icons/magic/nature/root-vine-caduceus-healing.webp\"\n    },\n    {\n        name: \"Treat Poison\",\n        skill: \"Medicine\",\n        action: game.pf2e.actions.treatPoison,\n        icon: \"systems/pf2e/icons/effects/treat-poison.webp\"\n    },\n    {\n        name: \"Treat Wounds\",\n        skill: \"Medicine\",\n        action: \"BO2iFo14pFYHEIGa\",\n        icon: \"icons/magic/nature/root-vine-caduceus-healing.webp\"\n    },\n    {\n        name: \"Trip\",\n        skill: \"Athletics\",\n        action: game.pf2e.actions.trip,\n        icon: \"icons/skills/wounds/bone-broken-marrow-yellow.webp\",\n    },\n    {\n        name: \"Tumble Through\",\n        skill: \"Acrobatics\",\n        action: game.pf2e.actions.tumbleThrough,\n        icon: \"icons/skills/movement/feet-winged-sandals-tan.webp\",\n    }\n].sort((a, b) => -(a.name < b.name));\nconst getSkills = (actor) => {\n    // @ts-ignore\n    return { perception: actor.attributes.perception, ...actor.skills };\n};\nconst signedNumber = (n) => {\n    return n < 0 ? \"\" + n : \"+\" + n;\n};\nconst tooltip = \"You are among the best in your party\";\nconst getBestBonuses = () => {\n    for (const actorId of party) {\n        const actor = game.actors.get(actorId);\n        const skills = getSkills(actor);\n        for (const action of actionList) {\n            const skill = skills[action.skill?.toLowerCase()];\n            if (!skill) continue;\n            const bonus = skill.check?.mod ?? skill.totalModifier;\n            if (bonus > (action.best ?? -1)) action.best = bonus;\n        }\n    }\n};\nif (party.includes(actor.id)) getBestBonuses();\nconst createButton = (action, idx) => {\n    // @ts-ignore\n    const skill = getSkills(actor)[action.skill?.toLowerCase()];\n    const rank = skill?.rank ?? 0;\n    const bonus = skill ? skill.check?.mod ?? skill.totalModifier : -1;\n    const best = party.length && party.includes(actor.id) ? bonus >= (action.best ?? 0) : false;\n    return `<button class=\"action-btn ${best ? \"glow\" : \"\"}\" data-action=\"${idx}\" style=\"background:${\n        colorPallete[rank]\n    }\"\n    ${best ? `data-tooltip=\"${tooltip}\"` : \"\"}>\n    <img src=\"${action.icon ?? defaultIcon}\" height=\"24\"/>${action.name} ${\n        skill ? \"(\" + signedNumber(bonus) + \")\" : \"\"\n    }</button>`;\n};\nconst columns = 1 + ~~((actionList.length - 1) / 14);\nconst width = 264 * columns;\nconst height = 30 + ~~((32 * actionList.length + 1) / columns);\nconst content = `\n<!--suppress ALL -->\n<style>\n  .pf2e-bg .window-content {\n    background: url(systems/pf2e/assets/sheet/background.webp);\n  }\n\n  .action-list {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: column;\n    justify-content: flex-start;\n    align-items: center;\n    margin-bottom: 8px;\n    max-height: ${height}px;\n  }\n\n  .action-btn {\n    margin: 1px auto;\n    width: 250px;\n    height: fit-content;\n    box-shadow: inset 0 0 0 1px rgb(0 0 0 / 50%);\n    text-shadow: none;\n    border: #000;\n    color: #fff;\n    display: flex;\n    align-items: center;\n  }\n\n  .action-btn img {\n    margin-right: 5px;\n  }\n\n  .action-btn:hover {\n    text-shadow: 0 0 2px #fff;\n  }\n\n  .action-list button.glow {\n    --color-glow1: 35;\n    --color-glow2: 50;\n    animation: glow2 alternate infinite 2s;\n    z-index: 1;\n}\n\n@keyframes glow2 {\n  0% {\n      color: hsl(var(--color-glow2), 90%, 50%);\n      /*border: 1px solid hsl(var(--color-glow2), 100%, 50%);*/\n      /*background: hsla(var(--color-glow2), 70%, 30%, 50%);*/\n      box-shadow: 0 0 1px 1px hsl(var(--color-glow2), 100%, 50%);\n  }\n  100% {\n      color: hsl(var(--color-glow2), 90%, 50%);\n      /*border: 1px solid hsl(var(--color-glow2), 100%, 50%);*/\n      /*background: hsla(var(--color-glow2), 70%, 30%, 100%);*/\n      box-shadow: 0 0 1px 1px hsl(var(--color-glow2), 100%, 50%);\n  }\n}\n\n\n</style>\n<div class=\"action-list\">\n${actionList.map((action, idx) => createButton(action, idx)).join(\"\")}\n</div>\n`;\nwindow.actionDialog = new Dialog(\n    {\n        title: `Actions (${actor.name})`,\n        content,\n        buttons: {\n            close: {\n                icon: `<i class=\"fas fa-times\"></i>`,\n                label: \"Cancel\"\n            }\n        },\n        default: \"close\",\n        render: (html) => {\n            const action = (button) => {\n                const idx = button.dataset.action;\n                const action = actionList[idx];\n                if (typeof action.action === \"string\") game.macros.get(action.action)?.execute();\n                else action.action({ actors: [actor] });\n            };\n            html.querySelectorAll(\".action-list button\").forEach((button) =>\n                button.addEventListener(\"click\", () => action(button))\n            );\n        }\n    },\n    { jQuery: false, width, classes: [\"pf2e-bg\"] }\n).render(true);\n","flags":{},"img":"modules/xdy-pf2e-workbench/assets/icons/cc0/bam.webp","name":"customizableBasicActionMacros","permission":{"default":1},"scope":"global","type":"script"}
{"_id":"ynwhxKVsTCmfe5F0","actorIds":[],"author":"EJe26zfyHhqCL4ad","command":"//ApoApostolov asked for this, I'll keep it around until someone says it has broken.\n/* eslint-disable */\n\n// noinspection JSAnnotator\nasync function increaseFocusPoints(actor, value) {\n    const focus = actor.system.resources.focus;\n    const max = focus.max;\n    const current = focus.value;\n    if (!max || current >= max) return;\n    const result = Math.min(current + value, focus.max);\n    await actor.update({ \"data.resources.focus.value\": result });\n    // eslint-disable-next-line no-undef\n    await ChatMessage.create({\n        // eslint-disable-next-line no-undef\n        type: CONST.CHAT_MESSAGE_TYPES.EMOTE,\n        // eslint-disable-next-line no-undef\n        speaker: ChatMessage.getSpeaker(actor),\n        flavor: \"<strong><img src=\\\"systems/pf2e/icons/actions/Passive.webp\\\" width=\\\"10\\\" height=\\\"10\\\" style=\\\"border: 0; margin-right: 3px;\\\" alt=\\\"Passive\\\">Refocus</strong>\",\n        // eslint-disable-next-line no-undef\n        content: game.i18n.format(`xdy-pf2e-workbench.macros.refocus.regains`, { focus: result - current })\n    });\n}\n\n// eslint-disable-next-line no-undef\nconst selected = canvas.tokens.controlled.map((token) => token.actor) ?? [];\n\nif (selected.length === 1) {\n    const actor = canvas.tokens.controlled[0].actor;\n    let regain = 1;\n    let isPsychic = false;\n    if (actor) {\n        // @ts-ignore\n        const feats = actor.feats.map((x) => x.feats).flat();\n        if (\n            feats?.find((i) => {\n                return [\n                    \"bloodline-focus\",\n                    \"bonded-focus\",\n                    \"conflux-focus\",\n                    \"crimson-oath-devotion\",\n                    \"devoted-focus\",\n                    \"domain-focus\",\n                    \"hex-focus\",\n                    \"inspirational-focus\",\n                    \"link-focus\",\n                    \"major-curse\",\n                    \"meditative-focus\",\n                    \"primal-focus\",\n                    \"wardens-focus\"\n                ].includes(i.feat?.system?.slug);\n            })\n        ) {\n            regain += 1;\n        }\n        if (\n            feats?.find((i) => {\n                return [\n                    \"bloodline-wellspring\",\n                    \"conflux-wellspring\",\n                    \"domain-wellspring\",\n                    \"extreme-curse\",\n                    \"hex-wellspring\",\n                    \"link-wellspring\",\n                    \"meditative-wellspring\",\n                    \"primal-wellspring\",\n                    \"wardens-wellspring\"\n                ].includes(i.feat?.system?.slug);\n            })\n        ) {\n            regain += 1;\n        }\n        if (\n            feats?.find((i) => {\n                return [\"psychic-spellcasting\"].includes(i.feat?.system?.slug);\n            })\n        ) {\n            regain = 2;\n            isPsychic = true;\n        }\n        const details = isPsychic\n            ? game.i18n.localize(`xdy-pf2e-workbench.macros.refocus.isPsychic`)\n            : game.i18n.format(`xdy-pf2e-workbench.macros.refocus.notPsychic`, { regain: regain });\n\n        const dialog = new Dialog({\n            title: \"Refocus\",\n            buttons: {\n                one: {\n                    label: game.i18n.localize(`xdy-pf2e-workbench.macros.refocus.regainOne`),\n                    callback: () => increaseFocusPoints(actor, 1)\n                },\n                more: {\n                    // @ts-ignore\n                    disabled: regain === 1,\n                    label:\n                        regain === 1\n                            ? game.i18n.localize(`xdy-pf2e-workbench.macros.refocus.disabled`)\n                            : game.i18n.format(`xdy-pf2e-workbench.macros.refocus.enabled`, {\n                                regain: regain,\n                                details: details\n                            }),\n                    callback: () => increaseFocusPoints(actor, regain)\n                }\n            },\n            default: game.i18n.localize(`xdy-pf2e-workbench.macros.refocus.one`)\n        });\n        dialog.render(true);\n    }\n} else {\n    ui.notifications.warn(game.i18n.localize(`xdy-pf2e-workbench.macros.refocus.selectOneActor`));\n}\n","flags":{},"img":"icons/magic/perception/third-eye-blue-red.webp","name":"customizableRefocusPremaster","permission":{"default":1},"scope":"global","type":"script"}
