var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});var __defProp2=Object.defineProperty,__name2=__name((target,value)=>__defProp2(target,"name",{value,configurable:!0}),"__name");async function preloadTemplates(){const templatePaths=[];await loadTemplates(templatePaths)}__name(preloadTemplates,"preloadTemplates"),__name2(preloadTemplates,"preloadTemplates");function shouldIHandleThisMessage(message,playerCondition=!0,gmCondition=!0){const amIMessageSender=message.user.id===game.user?.id;return!game.user?.isGM&&playerCondition&&amIMessageSender?!0:!!(game.user?.isGM&&gmCondition&&amIMessageSender)}__name(shouldIHandleThisMessage,"shouldIHandleThisMessage"),__name2(shouldIHandleThisMessage,"shouldIHandleThisMessage");function degreeOfSuccessWithRerollHandling(message){const flags=message.flags.pf2e;let degreeOfSuccess=flags.context?.outcome??"";if(flags?.context?.isReroll){const match=message.flavor?.match('Result: <span .*? class="(.*?)"');match&&match[1]&&(degreeOfSuccess=match[1])}return degreeOfSuccess}__name(degreeOfSuccessWithRerollHandling,"degreeOfSuccessWithRerollHandling"),__name2(degreeOfSuccessWithRerollHandling,"degreeOfSuccessWithRerollHandling");function isFirstGM(){return game.users.activeGM===game.user}__name(isFirstGM,"isFirstGM"),__name2(isFirstGM,"isFirstGM");function myRandomId(){const letters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";return Array.from(Array(16).keys()).map(()=>letters[Math.floor(Math.random()*letters.length)]).join("")}__name(myRandomId,"myRandomId"),__name2(myRandomId,"myRandomId");function isActuallyDamageRoll(message){const isPhysicalDamageroll=message.rolls?.length!==0&&["ancestry","effect","feat","melee","weapon"].includes(message.item?.type)&&(!message.isRoll||message.isDamageRoll),isSpellDamageRoll=message.item?.type==="spell"&&message.isDamageRoll;return isPhysicalDamageroll||isSpellDamageRoll}__name(isActuallyDamageRoll,"isActuallyDamageRoll"),__name2(isActuallyDamageRoll,"isActuallyDamageRoll");function logDebug(...args){log(1,...args)}__name(logDebug,"logDebug"),__name2(logDebug,"logDebug");function logInfo(...args){log(2,...args)}__name(logInfo,"logInfo"),__name2(logInfo,"logInfo");function logError(...args){log(4,...args)}__name(logError,"logError"),__name2(logError,"logError");function log(logLevel=2,...args){let number=2;if(phase>=Phase.READY&&(number=Number(game.settings.get(MODULENAME,"logLevel"))??2),logLevel>=number)switch(logLevel){case 0:console.trace(...args);break;case 1:console.debug(...args);break;case 2:console.info(...args);break;case 3:console.warn(...args);break;case 4:console.error(...args);break}}__name(log,"log"),__name2(log,"log");function shouldIHandleThis(actor){if(!actor)return null;const currentUser=game.users.current,activePlayers=game.users.players.filter(u=>u.active),assignedUser=activePlayers.find(u=>u.character===actor),anyoneWithPermission=activePlayers.find(u=>actor.canUserModify(u,"update")),updater=currentUser?.active&&actor.canUserModify(currentUser,"update")?currentUser:assignedUser??game.users.activeGM??anyoneWithPermission??null;return game.user.id===updater?.id}__name(shouldIHandleThis,"shouldIHandleThis"),__name2(shouldIHandleThis,"shouldIHandleThis");function pushNotification(message,type="info"){game.socket.emit("module."+MODULENAME,{operation:"notification",args:[type,message]})}__name(pushNotification,"pushNotification"),__name2(pushNotification,"pushNotification");function unflatten(object){const result={};return Object.keys(object).forEach(function(k){setValue(result,k,object[k])}),result}__name(unflatten,"unflatten"),__name2(unflatten,"unflatten");function setValue(object,path,value){const split=path.split("."),top=split.pop();split.reduce(function(o,k,i,kk){return o[k]=o[k]||(isFinite(i+1 in kk?kk[i+1]:top)?[]:{})},object)[top]=value}__name(setValue,"setValue"),__name2(setValue,"setValue");async function housepatcher(housepatcher2){try{const patches=JSON.parse(decodeURI(String(housepatcher2)));let count=0;for(const{uuid,action,data}of patches){const document2=await fromUuid(uuid);if(document2?.compendium){const compendium=document2.compendium;if(action==="update"){const original=document2.toObject(),traits=original?.system?.traits?.value,housepatchedTrait="xdy-pf2e-housepatched";if(!(traits?.includes("pf2e-ccc-patched")||traits?.includes(housepatchedTrait))){const update=unflatten(data);update.system=update.system??{},update.system.traits=update.system.traits??{},update.system.traits.value=update.system.traits.value??[],update.system.traits.value.push(housepatchedTrait);const merged=foundry.utils.mergeObject(original,update);await document2.update(unflatten(merged)),count+=1}}else action==="unlock"?compendium.locked&&await compendium.configure({locked:!1}):action==="lock"?compendium.locked||await compendium.configure({locked:!0}):action==="delete"&&(await document2.delete(),await compendium.getIndex())}}const message=game.i18n.format(`${MODULENAME}.SETTINGS.housepatcher.notification`,{count});ui.notifications.info(message)}catch{ui.notifications.error(game.i18n.format(`${MODULENAME}.SETTINGS.housepatcher.error`)),game.settings.set(MODULENAME,"housepatcher","")}}__name(housepatcher,"housepatcher"),__name2(housepatcher,"housepatcher");function minionsInCurrentScene(actor){return actor.isOfType("character")?game.scenes.current?.tokens?.filter(()=>!game.user.isGM)?.filter(token=>token.canUserModify(game.user,"update"))?.map(token=>token.actor)?.filter(x=>x?.traits.has("minion")):[]}__name(minionsInCurrentScene,"minionsInCurrentScene"),__name2(minionsInCurrentScene,"minionsInCurrentScene");function objectHasKey(obj,key){return(typeof key=="string"||typeof key=="number")&&key in obj}__name(objectHasKey,"objectHasKey"),__name2(objectHasKey,"objectHasKey");class SettingsMenuPF2eWorkbench extends FormApplication{static{__name(this,"SettingsMenuPF2eWorkbench")}static{__name2(this,"SettingsMenuPF2eWorkbench")}static namespace;static get defaultOptions(){const options=super.defaultOptions;return foundry.utils.mergeObject(options,{title:`${MODULENAME}.SETTINGS.${this.namespace}.name`,id:`${this.namespace}-settings`,template:"modules/xdy-pf2e-workbench/templates/menu.hbs",classes:["form","xdy-pf2e-workbench","settings-menu"],width:780,height:680,closeOnSubmit:!0,resizable:!0})}get namespace(){return this.constructor.namespace}static get settings(){return{}}static registerSettings(){const settings=this.settings;for(const setting of Object.keys(settings))game.settings.register(MODULENAME,setting,{...settings[setting],config:!1})}static hideForm(form,boolean){form.style.display=boolean?"":"none"}static hidelist={};static hook(...args){const html=args[1];Object.entries(this.hidelist).forEach(([k,v])=>{const setting=game.settings.get("xdy-pf2e-workbench",k)!==(v.falsy??!1),settingCheckbox=html.find(`.form-fields [name="${k}"]`);for(const form of v.list){const settingForm=html.find(`.form-group:has(.form-fields [name="${form}"])`)[0];this.hideForm(settingForm,setting)}settingCheckbox.on("change",event2=>{for(const form of v.list){const settingForm=html.find(`.form-group:has(.form-fields [name="${form}"])`)[0];let condition=event2.target.checked;switch(v.type){case"select":condition=event2.target.value!==v.falsy;break}this.hideForm(settingForm,condition)}})})}static setRenderHooks(){const hook=this.hook;hook&&Hooks.on(`render${this.name}`,hook.bind(this))}static registerSettingsAndCreateMenu(icon,restricted=!0){game.settings.registerMenu(MODULENAME,this.namespace,{name:`${MODULENAME}.SETTINGS.${this.namespace}.name`,label:`${MODULENAME}.SETTINGS.${this.namespace}.label`,hint:`${MODULENAME}.SETTINGS.${this.namespace}.hint`,icon,type:this,restricted}),this.registerSettings(),this.setRenderHooks()}getData(){const settings=this.constructor.settings,templateData=Object.entries(settings).map(([key,setting])=>{const value=game.settings.get(MODULENAME,key);return{...setting,key,value,isCheckbox:setting.type===Boolean,isFilepicker:setting.type===String&&setting.filePicker,isNumber:setting.type===Number,isSelect:!!setting.choices,isText:setting.type===String&&!setting.filePicker}});return foundry.utils.mergeObject(super.getData(),{settings:templateData,instructions:`${MODULENAME}.SETTINGS.${this.namespace}.hint`})}async _updateObject(_event,data){for(const key of Object.keys(data)){let datum=data[key];(datum===null||datum==="null")&&(datum=""),["submit","reset"].includes(key)||await game.settings.set(MODULENAME,key,datum)}}}let mystifyRandomPropertyType,mystifyModifierKey;class WorkbenchMystificationSettings extends SettingsMenuPF2eWorkbench{static{__name(this,"WorkbenchMystificationSettings")}static{__name2(this,"WorkbenchMystificationSettings")}static namespace="mystificationSettings";static get settings(){return{npcMystifyAllPhysicalMagicalItems:{name:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItems.name`,hint:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItems.hint`,scope:"world",default:"no",type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItems.no`),onScene:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItems.onScene`),onZeroHp:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItems.onZeroHp`)},onChange:()=>updateHooks(),requiresReload:!0},npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreater:{name:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreater.name`,hint:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreater.hint`,scope:"world",default:-1,type:Number},npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterUsingPartyLevel:{name:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterUsingPartyLevel.name`,hint:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterUsingPartyLevel.hint`,scope:"world",default:!1,type:Boolean},npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterMultiplier:{name:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterMultiplier.name`,hint:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterMultiplier.hint`,scope:"world",default:"1.0",type:String},npcMystifyAllPhysicalMagicalItemsOfThisRarityOrGreater:{name:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisRarityOrGreater.name`,hint:`${MODULENAME}.SETTINGS.npcMystifyAllPhysicalMagicalItemsOfThisRarityOrGreater.hint`,scope:"world",default:"common",type:String,choices:{common:game.i18n.localize("PF2E.TraitCommon"),uncommon:game.i18n.localize("PF2E.TraitUncommon"),rare:game.i18n.localize("PF2E.TraitRare"),unique:game.i18n.localize("PF2E.TraitUnique")}},npcMystifier:{name:`${MODULENAME}.SETTINGS.npcMystifier.name`,hint:`${MODULENAME}.SETTINGS.npcMystifier.hint`,scope:"world",default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},npcMystifierDemystifyAllTokensBasedOnTheSameActor:{name:`${MODULENAME}.SETTINGS.npcMystifierDemystifyAllTokensBasedOnTheSameActor.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierDemystifyAllTokensBasedOnTheSameActor.hint`,scope:"world",default:!0,type:Boolean},npcMystifierAddRandomProperty:{name:`${MODULENAME}.SETTINGS.npcMystifierAddRandomProperty.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierAddRandomProperty.hint`,scope:"world",type:String,choices:{none:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierAddRandomProperty.none`),numberPostfix:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierAddRandomProperty.numberPostfix`),wordPrefix:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierAddRandomProperty.wordPrefix`)},default:"none",onChange:key=>{mystifyRandomPropertyType=key}},npcMystifierRandomWordPrefixRollTable:{name:`${MODULENAME}.SETTINGS.npcMystifierWordPrefix.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierWordPrefix.hint`,scope:"world",default:"",type:String},npcMystifierKeepRandomProperty:{name:`${MODULENAME}.SETTINGS.npcMystifierKeepRandomProperty.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierKeepRandomProperty.hint`,scope:"world",default:!0,type:Boolean},npcMystifierRandomPropertySkipForUnique:{name:`${MODULENAME}.SETTINGS.npcMystifierRandomPropertySkipForUnique.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierRandomPropertySkipForUnique.hint`,scope:"world",default:!0,type:Boolean},npcMystifierPrefix:{name:`${MODULENAME}.SETTINGS.npcMystifierPrefix.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierPrefix.hint`,scope:"world",type:String,default:""},npcMystifierPostfix:{name:`${MODULENAME}.SETTINGS.npcMystifierPostfix.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierPostfix.hint`,scope:"world",type:String,default:"Workbench Adjectives"},npcMystifierUseSize:{name:`${MODULENAME}.SETTINGS.npcMystifierUseSize.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseSize.hint`,scope:"world",default:!0,type:Boolean},npcMystifierUseRarities:{name:`${MODULENAME}.SETTINGS.npcMystifierUseRarities.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseRarities.hint`,scope:"world",default:!1,type:Boolean},npcMystifierUseRaritiesReplacement:{name:`${MODULENAME}.SETTINGS.npcMystifierUseRaritiesReplacement.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseRaritiesReplacement.hint`,scope:"world",default:"",type:String},npcMystifierUseEliteWeak:{name:`${MODULENAME}.SETTINGS.npcMystifierUseEliteWeak.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseEliteWeak.hint`,scope:"world",default:!1,type:Boolean},npcMystifierUseCreatureTypesTraits:{name:`${MODULENAME}.SETTINGS.npcMystifierUseCreatureTypesTraits.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseCreatureTypesTraits.hint`,scope:"world",default:!0,type:Boolean},npcMystifierUseCreatureTraits:{name:`${MODULENAME}.SETTINGS.npcMystifierUseCreatureTraits.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseCreatureTraits.hint`,scope:"world",default:!1,type:Boolean},npcMystifierUseOtherTraits:{name:`${MODULENAME}.SETTINGS.npcMystifierUseOtherTraits.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseOtherTraits.hint`,scope:"world",default:!1,type:Boolean},npcMystifierBlacklist:{name:`${MODULENAME}.SETTINGS.npcMystifierBlacklist.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierBlacklist.hint`,scope:"world",default:"",type:String},npcMystifierNoMatch:{name:`${MODULENAME}.SETTINGS.npcMystifierNoMatch.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierNoMatch.hint`,scope:"world",default:"...",type:String,onChange:async choice=>{choice||(await new Promise(resolve=>setTimeout(resolve,250)),game.settings.set(MODULENAME,"npcMystifierNoMatch","..."))}},npcMystifierModifierKey:{name:`${MODULENAME}.SETTINGS.npcMystifierModifierKey.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierModifierKey.hint`,scope:"world",type:String,choices:{ALWAYS:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierModifierKey.always`),DISABLED:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierModifierKey.disabled`),ALT:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierModifierKey.alt`),CONTROL:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierModifierKey.control`),META:game.i18n.localize(`${MODULENAME}.SETTINGS.npcMystifierModifierKey.meta`)},default:"CONTROL",onChange:key=>{mystifyModifierKey=key}},npcMystifierUseMystifiedNameInChat:{name:`${MODULENAME}.SETTINGS.npcMystifierUseMystifiedNameInChat.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierUseMystifiedNameInChat.hint`,scope:"world",default:!1,type:Boolean}}}static registerSettings(){super.registerSettings(),mystifyModifierKey=String(game.settings.get(MODULENAME,"npcMystifierModifierKey")),mystifyRandomPropertyType=String(game.settings.get(MODULENAME,"npcMystifierAddRandomProperty"))}}class WorkbenchRemindersSettings extends SettingsMenuPF2eWorkbench{static{__name(this,"WorkbenchRemindersSettings")}static{__name2(this,"WorkbenchRemindersSettings")}static namespace="remindersSettings";static get settings(){return{reminderCannotAttack:{name:`${MODULENAME}.SETTINGS.reminderCannotAttack.name`,hint:`${MODULENAME}.SETTINGS.reminderCannotAttack.hint`,scope:"world",config:!0,default:!1,type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderCannotAttack.no`),reminder:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderCannotAttack.reminder`),cancelAttack:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderCannotAttack.cancelAttack`)},onChange:()=>updateHooks(),requiresReload:!0},reminderCannotAttackIgnoreDeadEidolon:{name:`${MODULENAME}.SETTINGS.reminderCannotAttackIgnoreDeadEidolon.name`,hint:`${MODULENAME}.SETTINGS.reminderCannotAttackIgnoreDeadEidolon.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},reminderTargeting:{name:`${MODULENAME}.SETTINGS.reminderTargeting.name`,hint:`${MODULENAME}.SETTINGS.reminderTargeting.hint`,scope:"world",config:!0,default:"no",type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderTargeting.no`),reminder:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderTargeting.reminder`),mustTarget:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderTargeting.mustTarget`)},onChange:()=>updateHooks(),requiresReload:!0},actionsReminderAllow:{name:`${MODULENAME}.SETTINGS.actionsReminderAllow.name`,hint:`${MODULENAME}.SETTINGS.actionsReminderAllow.hint`,scope:"world",config:!0,default:"none",type:String,choices:{none:game.i18n.localize(`${MODULENAME}.SETTINGS.actionsReminderAllow.none`),all:game.i18n.localize(`${MODULENAME}.SETTINGS.actionsReminderAllow.all`),gm:game.i18n.localize(`${MODULENAME}.SETTINGS.actionsReminderAllow.gm`),players:game.i18n.localize(`${MODULENAME}.SETTINGS.actionsReminderAllow.players`)},onChange:()=>updateHooks(),requiresReload:!0},reminderBreathWeapon:{name:`${MODULENAME}.SETTINGS.reminderBreathWeapon.name`,hint:`${MODULENAME}.SETTINGS.reminderBreathWeapon.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},reminderBreathWeaponHidden:{name:`${MODULENAME}.SETTINGS.reminderBreathWeaponHidden.name`,hint:`${MODULENAME}.SETTINGS.reminderBreathWeaponHidden.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},heroPointHandler:{name:`${MODULENAME}.SETTINGS.heroPointHandler.name`,hint:`${MODULENAME}.SETTINGS.heroPointHandler.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},heropointHandlerNotificationChat:{name:`${MODULENAME}.SETTINGS.heropointHandlerNotificationChat.name`,hint:`${MODULENAME}.SETTINGS.heropointHandlerNotificationChat.hint`,scope:"world",config:!0,default:!0,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},heroPointHandlerStartTimerOnReady:{name:`${MODULENAME}.SETTINGS.heroPointHandlerStartTimerOnReady.name`,hint:`${MODULENAME}.SETTINGS.heroPointHandlerStartTimerOnReady.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},heroPointHandlerDefaultTimeoutMinutes:{name:`${MODULENAME}.SETTINGS.heroPointHandlerDefaultTimeoutMinutes.name`,hint:`${MODULENAME}.SETTINGS.heroPointHandlerDefaultTimeoutMinutes.hint`,scope:"world",config:!0,default:60,type:Number,onChange:()=>updateHooks(),requiresReload:!0},heropointHandlerNotification:{name:`${MODULENAME}.SETTINGS.heropointHandlerNotification.name`,hint:`${MODULENAME}.SETTINGS.heropointHandlerNotification.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0}}}}class WorkbenchWorldAutomationSettings extends SettingsMenuPF2eWorkbench{static{__name(this,"WorkbenchWorldAutomationSettings")}static{__name2(this,"WorkbenchWorldAutomationSettings")}static namespace="automationWorldSettings";static get settings(){return{enableAutomaticMove:{name:`${MODULENAME}.SETTINGS.enableAutomaticMove.name`,hint:`${MODULENAME}.SETTINGS.enableAutomaticMove.hint`,scope:"world",config:!0,default:"noAutomation",type:String,choices:{noAutomation:game.i18n.localize(`${MODULENAME}.SETTINGS.enableAutomaticMove.noAutomation`),reaching0HP:game.i18n.localize(`${MODULENAME}.SETTINGS.enableAutomaticMove.reaching0HP`),reaching0HPCharactersOnly:game.i18n.localize(`${MODULENAME}.SETTINGS.enableAutomaticMove.reaching0HPCharactersOnly`)},onChange:()=>updateHooks(),requiresReload:!0},autoRollDamageAllow:{name:`${MODULENAME}.SETTINGS.autoRollDamageAllow.name`,hint:`${MODULENAME}.SETTINGS.autoRollDamageAllow.hint`,scope:"world",config:!0,default:"none",type:String,choices:{none:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageAllow.none`),all:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageAllow.all`),gm:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageAllow.gm`),players:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageAllow.players`)},onChange:()=>updateHooks(),requiresReload:!0},applyPersistentAllow:{name:`${MODULENAME}.SETTINGS.applyPersistentAllow.name`,hint:`${MODULENAME}.SETTINGS.applyPersistentAllow.hint`,scope:"world",config:!0,default:"none",type:String,choices:{none:game.i18n.localize(`${MODULENAME}.SETTINGS.applyPersistentAllow.none`),all:game.i18n.localize(`${MODULENAME}.SETTINGS.applyPersistentAllow.all`),gm:game.i18n.localize(`${MODULENAME}.SETTINGS.applyPersistentAllow.gm`),players:game.i18n.localize(`${MODULENAME}.SETTINGS.applyPersistentAllow.players`)},onChange:()=>updateHooks(),requiresReload:!0},handleDyingRecoveryRollAllow:{name:`${MODULENAME}.SETTINGS.handleDyingRecoveryRollAllow.name`,hint:`${MODULENAME}.SETTINGS.handleDyingRecoveryRollAllow.hint`,scope:"world",config:!0,default:"none",type:String,choices:{none:game.i18n.localize(`${MODULENAME}.SETTINGS.handleDyingRecoveryRollAllow.none`),all:game.i18n.localize(`${MODULENAME}.SETTINGS.handleDyingRecoveryRollAllow.all`),gm:game.i18n.localize(`${MODULENAME}.SETTINGS.handleDyingRecoveryRollAllow.gm`),players:game.i18n.localize(`${MODULENAME}.SETTINGS.handleDyingRecoveryRollAllow.players`)},onChange:()=>updateHooks(),requiresReload:!0},autoReduceStunned:{name:`${MODULENAME}.SETTINGS.autoReduceStunned.name`,hint:`${MODULENAME}.SETTINGS.autoReduceStunned.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},giveUnconsciousIfDyingRemovedAt0HP:{name:`${MODULENAME}.SETTINGS.giveUnconsciousIfDyingRemovedAt0HP.name`,hint:`${MODULENAME}.SETTINGS.giveUnconsciousIfDyingRemovedAt0HP.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},autoRemoveUnconsciousAtGreaterThanZeroHP:{name:`${MODULENAME}.SETTINGS.autoRemoveUnconsciousAtGreaterThanZeroHP.name`,hint:`${MODULENAME}.SETTINGS.autoRemoveUnconsciousAtGreaterThanZeroHP.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},giveWoundedWhenDyingRemoved:{name:`${MODULENAME}.SETTINGS.giveWoundedWhenDyingRemoved.name`,hint:`${MODULENAME}.SETTINGS.giveWoundedWhenDyingRemoved.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},autoGainDyingAtZeroHP:{name:`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.name`,hint:`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.hint`,scope:"world",config:!0,default:"no",type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.no`),addOne:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.addOne`),addWoundedLevel:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.addWoundedLevel`),addOneForCharacters:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.addOneForCharacters`),addWoundedLevelForCharacters:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.addWoundedLevelForCharacters`)},onChange:()=>updateHooks(),requiresReload:!0},nonLethalIsNotLethal:{name:`${MODULENAME}.SETTINGS.nonLethalIsNotLethal.name`,hint:`${MODULENAME}.SETTINGS.nonLethalIsNotLethal.hint`,scope:"world",config:!0,default:"no",type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.nonLethalIsNotLethal.no`),unconscious:game.i18n.localize(`${MODULENAME}.SETTINGS.nonLethalIsNotLethal.unconscious`),unconsciousForCharacters:game.i18n.localize(`${MODULENAME}.SETTINGS.nonLethalIsNotLethal.unconsciousForCharacters`)},onChange:()=>updateHooks(),requiresReload:!0},autoGainDyingAtZeroHPIfCriticallyHitOneMore:{name:`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHPIfCriticallyHitOneMore.name`,hint:`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHPIfCriticallyHitOneMore.hint`,scope:"world",config:!0,default:"no",type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHPIfCriticallyHitOneMore.no`),add:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHPIfCriticallyHitOneMore.add`),addForCharacters:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHPIfCriticallyHitOneMore.addForCharacters`)}},autoGainDyingIfTakingDamageWhenAlreadyDying:{name:`${MODULENAME}.SETTINGS.autoGainDyingIfTakingDamageWhenAlreadyDying.name`,hint:`${MODULENAME}.SETTINGS.autoGainDyingIfTakingDamageWhenAlreadyDying.hint`,scope:"world",config:!0,default:"no",type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingIfTakingDamageWhenAlreadyDying.no`),add:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingIfTakingDamageWhenAlreadyDying.add`),addForCharacters:game.i18n.localize(`${MODULENAME}.SETTINGS.autoGainDyingIfTakingDamageWhenAlreadyDying.addForCharacters`)}},autoGainDyingIgnoresTargeting:{name:`${MODULENAME}.SETTINGS.autoGainDyingIgnoresTargeting.name`,hint:`${MODULENAME}.SETTINGS.autoGainDyingIgnoresTargeting.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},autoRemoveDyingAtGreaterThanZeroHP:{name:`${MODULENAME}.SETTINGS.autoRemoveDyingAtGreaterThanZeroHP.name`,hint:`${MODULENAME}.SETTINGS.autoRemoveDyingAtGreaterThanZeroHP.hint`,scope:"world",config:!0,default:"no",type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRemoveDyingAtGreaterThanZeroHP.no`),remove:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRemoveDyingAtGreaterThanZeroHP.removeDying`),removeForCharacters:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRemoveDyingAtGreaterThanZeroHP.removeDyingForCharacters`)},onChange:()=>updateHooks(),requiresReload:!0},dropHeldItemsOnBecomingUnconscious:{name:`${MODULENAME}.SETTINGS.dropHeldItemsOnBecomingUnconscious.name`,hint:`${MODULENAME}.SETTINGS.dropHeldItemsOnBecomingUnconscious.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0}}}static hidelist={autoGainDyingAtZeroHP:{type:"select",falsy:"no",list:["nonLethalIsNotLethal","autoGainDyingAtZeroHPIfCriticallyHitOneMore","autoGainDyingIfTakingDamageWhenAlreadyDying","autoGainDyingIgnoresTargeting"]}}}class WorkbenchClientAutomationSettings extends SettingsMenuPF2eWorkbench{static{__name(this,"WorkbenchClientAutomationSettings")}static{__name2(this,"WorkbenchClientAutomationSettings")}static namespace="automationClientSettings";static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{height:"fit-content"})}static get settings(){return{autoRollDamageForStrike:{name:`${MODULENAME}.SETTINGS.autoRollDamageForStrike.name`,hint:`${MODULENAME}.SETTINGS.autoRollDamageForStrike.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},autoRollDamageForSpellAttack:{name:`${MODULENAME}.SETTINGS.autoRollDamageForSpellAttack.name`,hint:`${MODULENAME}.SETTINGS.autoRollDamageForSpellAttack.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},autoRollDamageForSpellWhenNotAnAttack:{name:`${MODULENAME}.SETTINGS.autoRollDamageForSpellWhenNotAnAttack.name`,hint:`${MODULENAME}.SETTINGS.autoRollDamageForSpellWhenNotAnAttack.hint`,scope:"client",config:!0,default:!1,type:String,choices:{no:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageForSpellWhenNotAnAttack.no`),anySpell:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageForSpellWhenNotAnAttack.anySpell`),saveSpell:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageForSpellWhenNotAnAttack.saveSpell`),nonSaveSpell:game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageForSpellWhenNotAnAttack.nonSaveSpell`)},onChange:()=>updateHooks(),requiresReload:!0},autoRollDamageNotifyOnSpellCardNotFound:{name:`${MODULENAME}.SETTINGS.autoRollDamageNotifyOnSpellCardNotFound.name`,hint:`${MODULENAME}.SETTINGS.autoRollDamageNotifyOnSpellCardNotFound.hint`,scope:"client",config:!0,default:!0,type:Boolean},applyPersistentDamage:{name:`${MODULENAME}.SETTINGS.applyPersistentDamage.name`,hint:`${MODULENAME}.SETTINGS.applyPersistentDamage.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},applyPersistentDamageRecoveryRoll:{name:`${MODULENAME}.SETTINGS.applyPersistentDamageRecoveryRoll.name`,hint:`${MODULENAME}.SETTINGS.applyPersistentDamageRecoveryRoll.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},applyPersistentHealing:{name:`${MODULENAME}.SETTINGS.applyPersistentHealing.name`,hint:`${MODULENAME}.SETTINGS.applyPersistentHealing.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},handleDyingRecoveryRoll:{name:`${MODULENAME}.SETTINGS.handleDyingRecoveryRoll.name`,hint:`${MODULENAME}.SETTINGS.handleDyingRecoveryRoll.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},decreaseFrightenedConditionEachTurn:{name:`${MODULENAME}.SETTINGS.decreaseFrightenedConditionEachTurn.name`,hint:`${MODULENAME}.SETTINGS.decreaseFrightenedConditionEachTurn.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0}}}}class WorkbenchQolWorldSettings extends SettingsMenuPF2eWorkbench{static{__name(this,"WorkbenchQolWorldSettings")}static{__name2(this,"WorkbenchQolWorldSettings")}static namespace="qolWorldSettings";static get settings(){return{npcScaler:{name:`${MODULENAME}.SETTINGS.npcScaler.name`,hint:`${MODULENAME}.SETTINGS.npcScaler.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},npcRoller:{name:`${MODULENAME}.SETTINGS.npcRoller.name`,hint:`${MODULENAME}.SETTINGS.npcRoller.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpell:{name:`${MODULENAME}.SETTINGS.castPrivateSpell.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpell.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpellAutoRevealIfKnown:{name:`${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealIfKnown.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealIfKnown.hint`,scope:"world",config:!0,default:!0,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpellAutoRevealPartyMembersThatKnowSpell:{name:`${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealPartyMembersThatKnowSpell.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpellAutoRevealPartyMembersThatKnowSpell.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpellHideName:{name:`${MODULENAME}.SETTINGS.castPrivateSpellHideName.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpellHideName.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpellAlwaysFor:{name:`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.hint`,scope:"world",config:!0,default:"none",type:String,choices:{none:game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.none`),nonAllies:game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.nonAllies`),nonPartymembers:game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.nonPartymembers`),npcs:game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellAlwaysFor.npcs`)},onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpellWithPublicMessage:{name:`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpellWithPublicMessageShowToGM:{name:`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowToGM.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowToGM.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},castPrivateSpellWithPublicMessageShowTraits:{name:`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowTraits.name`,hint:`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowTraits.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},tokenAnimation:{name:`${MODULENAME}.SETTINGS.tokenAnimation.name`,hint:`${MODULENAME}.SETTINGS.tokenAnimation.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks(),requiresReload:!0},tokenAnimationSpeed:{name:`${MODULENAME}.SETTINGS.tokenAnimationSpeed.name`,hint:`${MODULENAME}.SETTINGS.tokenAnimationSpeed.hint`,scope:"world",config:!0,default:6,type:Number,onChange:()=>updateHooks(),requiresReload:!0},playerFeatsPrerequisiteHint:{name:`${MODULENAME}.SETTINGS.playerFeatsPrerequisiteHint.name`,hint:`${MODULENAME}.SETTINGS.playerFeatsPrerequisiteHint.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks()},playerFeatsRarityColour:{name:`${MODULENAME}.SETTINGS.playerFeatsRarityColour.name`,hint:`${MODULENAME}.SETTINGS.playerFeatsRarityColour.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks()},playerCraftingRarityColour:{name:`${MODULENAME}.SETTINGS.playerCraftingRarityColour.name`,hint:`${MODULENAME}.SETTINGS.playerCraftingRarityColour.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks()},playerSpellsRarityColour:{name:`${MODULENAME}.SETTINGS.playerSpellsRarityColour.name`,hint:`${MODULENAME}.SETTINGS.playerSpellsRarityColour.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks()}}}static hidelist={castPrivateSpell:{list:["castPrivateSpellAutoRevealIfKnown","castPrivateSpellAutoRevealPartyMembersThatKnowSpell","castPrivateSpellAutoRevealPartyMembersThatKnowSpell","castPrivateSpellHideName","castPrivateSpellAlwaysFor"]},castPrivateSpellWithPublicMessage:{list:["castPrivateSpellWithPublicMessageShowToGM","castPrivateSpellWithPublicMessageShowTraits"]}}}class WorkbenchHouseRulesSettings extends SettingsMenuPF2eWorkbench{static{__name(this,"WorkbenchHouseRulesSettings")}static{__name2(this,"WorkbenchHouseRulesSettings")}static namespace="houseRulesSettings";static get defaultOptions(){return foundry.utils.mergeObject(super.defaultOptions,{height:"fit-content"})}static get settings(){return{keeleysHeroPointRule:{name:`${MODULENAME}.SETTINGS.keeleysHeroPointRule.name`,hint:`${MODULENAME}.SETTINGS.keeleysHeroPointRule.hint`,scope:"world",config:!0,default:!1,type:Boolean},legacyVariantRuleAncestryParagon:{name:`${MODULENAME}.SETTINGS.legacyVariantRuleAncestryParagon.name`,hint:`${MODULENAME}.SETTINGS.legacyVariantRuleAncestryParagon.hint`,scope:"world",config:!0,default:!1,type:Boolean},legacyVariantRuleDualClass:{name:`${MODULENAME}.SETTINGS.legacyVariantRuleDualClass.name`,hint:`${MODULENAME}.SETTINGS.legacyVariantRuleDualClass.hint`,scope:"world",config:!0,default:!1,type:Boolean},housepatcher:{name:`${MODULENAME}.SETTINGS.housepatcher.name`,hint:`${MODULENAME}.SETTINGS.housepatcher.hint`,scope:"world",config:!0,default:"",type:String}}}}function registerWorkbenchSettings(){logInfo(`${MODULENAME} | registerSettings`),WorkbenchMystificationSettings.registerSettingsAndCreateMenu("fas fa-eye-slash"),WorkbenchRemindersSettings.registerSettingsAndCreateMenu("fas fa-bell"),WorkbenchQolWorldSettings.registerSettingsAndCreateMenu("fas fa-smile"),WorkbenchWorldAutomationSettings.registerSettingsAndCreateMenu("fas fa-robot"),WorkbenchClientAutomationSettings.registerSettingsAndCreateMenu("fas fa-magic",!1),WorkbenchHouseRulesSettings.registerSettingsAndCreateMenu("fas fa-house"),game.settings.register(MODULENAME,"autoCollapseItemChatCardContent",{name:`${MODULENAME}.SETTINGS.autoCollapseItemChatCardContent.name`,hint:`${MODULENAME}.SETTINGS.autoCollapseItemChatCardContent.hint`,scope:"client",config:!0,default:"noCollapse",type:String,choices:{noCollapse:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemChatCardContent.noCollapse`),collapsedDefault:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemChatCardContent.collapsedDefault`),nonCollapsedDefault:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemChatCardContent.nonCollapsedDefault`)},onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"autoCollapseItemChatCardMoveEffectLinks",{name:`${MODULENAME}.SETTINGS.autoCollapseItemChatCardMoveEffectLinks.name`,hint:`${MODULENAME}.SETTINGS.autoCollapseItemChatCardMoveEffectLinks.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"autoCollapseItemActionChatCardContent",{name:`${MODULENAME}.SETTINGS.autoCollapseItemActionChatCardContent.name`,hint:`${MODULENAME}.SETTINGS.autoCollapseItemActionChatCardContent.hint`,scope:"client",config:!0,default:"noCollapse",type:String,choices:{noCollapse:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemActionChatCardContent.noCollapse`),collapsedDefault:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemActionChatCardContent.collapsedDefault`),nonCollapsedDefault:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemActionChatCardContent.nonCollapsedDefault`)},onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"autoCollapseItemAttackChatCardContent",{name:`${MODULENAME}.SETTINGS.autoCollapseItemAttackChatCardContent.name`,hint:`${MODULENAME}.SETTINGS.autoCollapseItemAttackChatCardContent.hint`,scope:"client",config:!0,default:"noCollapse",type:String,choices:{noCollapse:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemAttackChatCardContent.noCollapse`),collapsedDefault:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemAttackChatCardContent.collapsedDefault`),nonCollapsedDefault:game.i18n.localize(`${MODULENAME}.SETTINGS.autoCollapseItemAttackChatCardContent.nonCollapsedDefault`)},onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"autoExpandDamageRolls",{name:`${MODULENAME}.SETTINGS.autoExpandDamageRolls.name`,hint:`${MODULENAME}.SETTINGS.autoExpandDamageRolls.hint`,scope:"client",config:!0,default:"collapsedDefault",type:String,choices:{collapsedAll:game.i18n.localize(`${MODULENAME}.SETTINGS.autoExpandDamageRolls.collapsedAll`),expandedAll:game.i18n.localize(`${MODULENAME}.SETTINGS.autoExpandDamageRolls.expandedAll`),expandedNew:game.i18n.localize(`${MODULENAME}.SETTINGS.autoExpandDamageRolls.expandedNew`),expandedNewest:game.i18n.localize(`${MODULENAME}.SETTINGS.autoExpandDamageRolls.expandedNewest`)},onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"basicActionMacroShowBestBonus",{name:`${MODULENAME}.macros.basicActionMacros.settings.showBestBonus.name`,hint:`${MODULENAME}.macros.basicActionMacros.settings.showBestBonus.hint`,scope:"world",config:!0,default:!0,type:Boolean}),game.settings.register(MODULENAME,"bamShowUnusable",{name:`${MODULENAME}.macros.basicActionMacros.bamShowUnusable.name`,hint:`${MODULENAME}.macros.basicActionMacros.bamShowUnusable.hint`,scope:"client",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"bamTabview",{name:`${MODULENAME}.macros.basicActionMacros.bamTabview.name`,hint:`${MODULENAME}.macros.basicActionMacros.bamTabview.hint`,scope:"client",config:!0,default:!0,type:Boolean,onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"customPauseImage",{name:`${MODULENAME}.SETTINGS.customPauseImage.name`,hint:`${MODULENAME}.SETTINGS.customPauseImage.hint`,scope:"world",config:!0,default:"",type:String,filePicker:"image",onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"customPauseText",{name:`${MODULENAME}.SETTINGS.customPauseText.name`,hint:`${MODULENAME}.SETTINGS.customPauseText.hint`,scope:"world",config:!0,default:"",type:String,onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"customPauseRelocation",{name:`${MODULENAME}.SETTINGS.customPauseRelocation.name`,hint:`${MODULENAME}.SETTINGS.customPauseRelocation.hint`,scope:"world",config:!0,default:!1,type:Boolean,onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"logLevel",{name:`${MODULENAME}.SETTINGS.logLevel.name`,hint:`${MODULENAME}.SETTINGS.logLevel.hint`,scope:"client",config:!0,default:2,type:Number,choices:{0:game.i18n.localize(`${MODULENAME}.SETTINGS.logLevel.trace`),1:game.i18n.localize(`${MODULENAME}.SETTINGS.logLevel.debug`),2:game.i18n.localize(`${MODULENAME}.SETTINGS.logLevel.info`),3:game.i18n.localize(`${MODULENAME}.SETTINGS.logLevel.warn`),4:game.i18n.localize(`${MODULENAME}.SETTINGS.logLevel.error`),5:game.i18n.localize(`${MODULENAME}.SETTINGS.logLevel.off`)},onChange:()=>updateHooks()}),game.settings.register(MODULENAME,"workbenchVersion",{name:`${MODULENAME}.SETTINGS.workbenchVersion.name`,hint:`${MODULENAME}.SETTINGS.workbenchVersion.hint`,scope:"world",config:!0,default:"3.34.0",type:String,onChange:()=>updateHooks()})}__name(registerWorkbenchSettings,"registerWorkbenchSettings"),__name2(registerWorkbenchSettings,"registerWorkbenchSettings");const AON_CREATURE_TYPES=["aberration","animal","astral","beast","celestial","construct","dragon","dream","elemental","ethereal","fey","fiend","fungus","giant","humanoid","monitor","negative","ooze","petitioner","plant","positive","spirit","time","undead"],ELITE_WEAK=["elite","weak"];let TRAITS;async function fixesPreAndPost(settingkey){const fixSetting=String(game.settings.get(MODULENAME,settingkey));if(fixSetting!==null&&fixSetting!=="null"&&fixSetting!==""){const table=game?.tables?.find(t=>t.name===fixSetting);if(table){const draw=await table?.draw({displayChat:!1});if(draw&&draw?.results[0])return draw?.results[0].getChatText()}else{const pack=game.packs.get("xdy-pf2e-workbench.xdy-internal-tables");if(pack){const id=(await pack.getIndex()).find(e=>e.name.includes(fixSetting))?._id;if(id){const draw=await(await pack?.getDocument(id)).draw({displayChat:!1});if(draw&&draw?.results[0])return draw?.results[0].getChatText()}}}return fixSetting}return""}__name(fixesPreAndPost,"fixesPreAndPost"),__name2(fixesPreAndPost,"fixesPreAndPost");function fillTraits(){TRAITS={RARITIES:Object.keys(CONFIG.PF2E.rarityTraits),SIZES:Object.keys(CONFIG.PF2E.actorSizes),AON_CREATURE_TYPES,PF2E_CREATURE_TRAITS:Object.keys(CONFIG.PF2E.creatureTraits),ELITE_WEAK}}__name(fillTraits,"fillTraits"),__name2(fillTraits,"fillTraits");function filterTraitList(traitsList,prefix,postfix){if(game.settings.get(MODULENAME,"npcMystifierBlacklist")){const blocklist=String(game.settings.get(MODULENAME,"npcMystifierBlacklist")).toLocaleLowerCase().split(",")||null;blocklist&&(traitsList=traitsList.filter(trait=>!blocklist.map(trait2=>trait2.trim()).includes(trait)))}let size=[];game.settings.get(MODULENAME,"npcMystifierUseSize")&&(size=traitsList.filter(trait=>TRAITS.SIZES.includes(trait)));let eliteWeak=[];game.settings.get(MODULENAME,"npcMystifierUseEliteWeak")&&(eliteWeak=traitsList.filter(trait=>TRAITS.ELITE_WEAK.includes(trait)));let rarities=[];if(game.settings.get(MODULENAME,"npcMystifierUseRarities")){rarities=traitsList.filter(trait=>TRAITS.RARITIES.includes(trait));const replacement=String(game.settings.get(MODULENAME,"npcMystifierUseRaritiesReplacement")).toLocaleLowerCase();replacement!==""&&(rarities=rarities.map(trait=>trait!=="common"?replacement:trait))}let aonCreatureTypes=[];game.settings.get(MODULENAME,"npcMystifierUseCreatureTypesTraits")&&(aonCreatureTypes=traitsList.filter(trait=>TRAITS.AON_CREATURE_TYPES.includes(trait)));let pf2eCreatureTraits=[];game.settings.get(MODULENAME,"npcMystifierUseCreatureTraits")&&(pf2eCreatureTraits=traitsList.filter(trait=>TRAITS.PF2E_CREATURE_TRAITS.includes(trait)));let others=[];return game.settings.get(MODULENAME,"npcMystifierUseOtherTraits")&&(others=traitsList.filter(trait=>!TRAITS.ELITE_WEAK.includes(trait)).filter(trait=>!TRAITS.SIZES.includes(trait)).filter(trait=>!TRAITS.RARITIES.includes(trait)).filter(trait=>!TRAITS.AON_CREATURE_TYPES.includes(trait)).filter(trait=>!TRAITS.PF2E_CREATURE_TRAITS.includes(trait))),Array.from(new Set([prefix].concat(size).concat(eliteWeak).concat(rarities).concat(others).concat(aonCreatureTypes).concat(pf2eCreatureTraits).concat([postfix])).values())}__name(filterTraitList,"filterTraitList"),__name2(filterTraitList,"filterTraitList");async function generateNameFromTraitsForToken(tokenId){const token=game.scenes?.current?.tokens?.get(tokenId);if(token)return generateNameFromTraits(token)}__name(generateNameFromTraitsForToken,"generateNameFromTraitsForToken"),__name2(generateNameFromTraitsForToken,"generateNameFromTraitsForToken");async function generateNameFromTraits(token){let result;const traits=token?.actor?.system?.traits;if(TRAITS||fillTraits(),traits){let traitsList=traits.value;if(traitsList){const tokenRarities=traits.rarity;tokenRarities&&(traitsList=traitsList.concat(tokenRarities));const size=traits?.size?.value;size&&traitsList.push(size);const actor=token.actor;actor.system?.attributes?.adjustment&&traitsList.push(actor.system?.attributes?.adjustment);const prefix=await fixesPreAndPost("npcMystifierPrefix")||"",postfix=await fixesPreAndPost("npcMystifierPostfix")||"";traitsList=filterTraitList(traitsList,prefix,postfix),result=traitsList.map(trait=>trait.trim()).filter((trait,index)=>traitsList.indexOf(trait)===index).filter(trait=>trait.trim().length>0).map(trait=>trait?.charAt(0).toLocaleUpperCase()+trait?.slice(1)).map(trait=>{const lowercaseTrait=trait.toLocaleLowerCase();if(TRAITS.ELITE_WEAK.includes(lowercaseTrait))switch(lowercaseTrait){case TRAITS.ELITE_WEAK[0]:return game.i18n.localize("PF2E.NPC.Adjustment.EliteLabel");case TRAITS.ELITE_WEAK[1]:return game.i18n.localize("PF2E.NPC.Adjustment.WeakLabel")}else if(TRAITS.SIZES.includes(lowercaseTrait))return game.i18n.localize(CONFIG.PF2E.actorSizes[lowercaseTrait]);const translations=game.i18n.translations.PF2E??{};return(trait!==prefix&&trait!==postfix?translations[`Trait${trait}`]:trait)??trait}).join(" ")}}else result=game.settings.get(MODULENAME,"npcMystifierNoMatch");return result}__name(generateNameFromTraits,"generateNameFromTraits"),__name2(generateNameFromTraits,"generateNameFromTraits");function shouldSkipRandomProperty(token){return game.settings.get(MODULENAME,"npcMystifierRandomPropertySkipForUnique")&&token?.actor?.system?.traits?.rarity==="unique"}__name(shouldSkipRandomProperty,"shouldSkipRandomProperty"),__name2(shouldSkipRandomProperty,"shouldSkipRandomProperty");function hasRandomProperty(token){switch(mystifyRandomPropertyType){case"numberPostfix":case"wordPrefix":return token.name.split(" ").length!==(token.actor?.prototypeToken.name.split(" ")??[""]).length;default:return!1}}__name(hasRandomProperty,"hasRandomProperty"),__name2(hasRandomProperty,"hasRandomProperty");async function fetchRandomWordPrefix(){const fixSetting=String(game.settings.get(MODULENAME,"npcMystifierRandomWordPrefixRollTable"));if(fixSetting!==null&&fixSetting!=="null"&&fixSetting!==""){const table=game?.tables?.find(t=>t.name===fixSetting);if(!table){const pack=game.packs.get("xdy-pf2e-workbench.xdy-internal-tables");if(pack){const id=(await pack.getIndex()).find(e=>e.name.includes(fixSetting))?._id;if(id){const draw2=await(await pack?.getDocument(id)).draw({displayChat:!1});return draw2&&draw2?.results[0]?draw2?.results[0].getChatText():fixSetting}}}const draw=await table?.draw({displayChat:!1});return draw&&draw?.results[0]?draw?.results[0].getChatText():fixSetting}return logError(`Rolltable for ${fixSetting} setting not defined or not found.`),""}__name(fetchRandomWordPrefix,"fetchRandomWordPrefix"),__name2(fetchRandomWordPrefix,"fetchRandomWordPrefix");async function buildTokenName(token,isMystified){let tokenName="";if(token&&token.actor){tokenName=token.name;const keep=game.settings.get(MODULENAME,"npcMystifierKeepRandomProperty");if(isMystified)if(keep&&!shouldSkipRandomProperty(token))switch(mystifyRandomPropertyType){case"numberPostfix":tokenName=`${token.actor.prototypeToken.name} ${tokenName.match(/\d+$/)?.[0]??""}`.trim();break;case"wordPrefix":tokenName=`${(tokenName.match(/\b([a-zA-Z0-9_-]+)\b/)??[""])[0]} ${token.actor.prototypeToken.name}`.trim();break;default:tokenName=token.actor.prototypeToken.name}else tokenName=token.actor.prototypeToken.name;else{switch(game.settings.get(MODULENAME,"npcMystifierUseOtherTraits")){default:tokenName=await generateNameFromTraits(token)}if(hasRandomProperty(token)&&keep&&!shouldSkipRandomProperty(token))switch(mystifyRandomPropertyType){case"numberPostfix":tokenName=`${tokenName} ${token.name.match(/\d+$/)?.[0]??""}`.trim();break;case"wordPrefix":tokenName=`${(token.name.match(/\b([a-zA-Z0-9_-]+)\b/)??[""])[0]} ${tokenName}`.trim();break;default:tokenName=token.actor.prototypeToken.name}else if(!shouldSkipRandomProperty(token)){let rolled=0;switch(mystifyRandomPropertyType){case"numberPostfix":rolled=Math.floor(Math.random()*100)+1,canvas?.scene?.tokens?.find(t=>t.name.endsWith(` ${rolled}`))&&(rolled=Math.floor(Math.random()*100)+1),tokenName+=` ${rolled}`;break;case"wordPrefix":tokenName=`${await fetchRandomWordPrefix()} ${tokenName}`.trim();break}}}}return tokenName===""?String(game.settings.get(MODULENAME,"npcMystifierNoMatch")):tokenName}__name(buildTokenName,"buildTokenName"),__name2(buildTokenName,"buildTokenName");function isMystifyModifierKeyPressed(){switch(mystifyModifierKey){case"ALT":return game?.keyboard?.isModifierActive(KeyboardManager.MODIFIER_KEYS.ALT);case"CONTROL":return game?.keyboard?.isModifierActive(KeyboardManager.MODIFIER_KEYS.CONTROL);case"META":return game?.keyboard?.downKeys.has("MetaLeft")||game?.keyboard?.downKeys.has("MetaRight");default:return!1}}__name(isMystifyModifierKeyPressed,"isMystifyModifierKeyPressed"),__name2(isMystifyModifierKeyPressed,"isMystifyModifierKeyPressed");async function tokenCreateMystification(token){const key=String(game.settings.get(MODULENAME,"npcMystifierModifierKey"));game.user?.isGM&&token&&!token?.actor?.hasPlayerOwner&&key!=="DISABLED"&&(key==="ALWAYS"||isMystifyModifierKeyPressed())&&(!game.keyboard?.downKeys.has("V")||game.keyboard?.downKeys.has("Insert"))&&await doMystification(token,!1)}__name(tokenCreateMystification,"tokenCreateMystification"),__name2(tokenCreateMystification,"tokenCreateMystification");function isTokenMystified(token){const tokenName=token?.name,prototypeTokenName=token?.actor?.prototypeToken.name??"";return(tokenName?.indexOf(prototypeTokenName)??-1)<0}__name(isTokenMystified,"isTokenMystified"),__name2(isTokenMystified,"isTokenMystified");async function doMystificationFromToken(tokenId,active){const token=game.scenes?.current?.tokens?.get(tokenId);if(token)return doMystification(token,active)}__name(doMystificationFromToken,"doMystificationFromToken"),__name2(doMystificationFromToken,"doMystificationFromToken");async function doMystification(token,active){if(!token?.actor)return;const updates=[{_id:token.id,name:await buildTokenName(token,active)}],scene=canvas?.scene,allOfActor=game.settings.get(MODULENAME,"npcMystifierDemystifyAllTokensBasedOnTheSameActor");if(game.user?.isGM&&isTokenMystified(token)&&allOfActor)for(const sceneToken of scene?.tokens?.filter(t=>t.actor?.id===token?.actor?.id)?.filter(x=>isTokenMystified(x))||[])updates.push({_id:sceneToken.id,name:await buildTokenName(sceneToken,active)});scene?.updateEmbeddedDocuments("Token",updates,{}).then(()=>{game.combat&&new Promise(resolve=>setTimeout(resolve,50)).then(()=>{ui.combat?.render(!0),ui.combat.combats.filter(x=>x.combatants.filter(c=>c.actor?.id===token.actor?.id).length>0).forEach(c=>c.updateSource({},{render:!0}))})})}__name(doMystification,"doMystification"),__name2(doMystification,"doMystification");function renderNameHud(data,html){let token;if(canvas&&canvas.tokens){token=canvas.tokens.get(data._id)??null;const title=isTokenMystified(token)?"Unmystify":"Mystify",toggle=document.createElement("div");toggle.className=`control-icon toggle ${isTokenMystified(token)?"active":""}`,toggle.setAttribute("data-action","mystify");const icon=document.createElement("i");if(icon.className="fas fa-eye-slash",icon.title=title,toggle.appendChild(icon),canMystify()&&!token?.actor?.hasPlayerOwner){toggle.addEventListener("click",async e=>{const hudElement=e.currentTarget,active=hudElement.classList.contains("active");token!==null&&isTokenMystified(token)===active&&await doMystification(token,active),hudElement.classList.toggle("active")});const column=html.querySelector("div.col.left");column&&column.appendChild(toggle)}}}__name(renderNameHud,"renderNameHud"),__name2(renderNameHud,"renderNameHud");function mangleNamesInChatMessage(message,html){const actorId=message?.speaker?.actor,tokenId=message?.speaker?.token,actor=game.actors?.get(actorId),token=(game.scenes?.active?.tokens??game.scenes?.current?.tokens??canvas?.scene?.tokens)?.get(tokenId),actionCard=html.querySelector(".action-card"),speakers=html?.querySelectorAll(".message-sender"),tokenName=token?.name||message.speaker.alias,tokenNameNoNumber=tokenName?.replace(/\d+$/,"").trim();tokenNameNoNumber&&actor?.prototypeToken.name?.trim()!==tokenNameNoNumber&&(actionCard&&actionCard.innerHTML&&(actionCard.innerHTML=actionCard.innerHTML.replace(new RegExp(actor?.prototypeToken.name,"gi"),tokenName)),speakers.forEach(speaker=>{speaker.innerHTML&&(speaker.innerHTML=speaker.innerHTML.replace(message.speaker.alias,tokenName))}),message.speaker.alias=tokenName)}__name(mangleNamesInChatMessage,"mangleNamesInChatMessage"),__name2(mangleNamesInChatMessage,"mangleNamesInChatMessage");function canMystify(){return game.user?.isGM&&canvas&&canvas.tokens}__name(canMystify,"canMystify"),__name2(canMystify,"canMystify");var HPHState=(HPHState2=>(HPHState2[HPHState2.Start=0]="Start",HPHState2[HPHState2.Check=1]="Check",HPHState2[HPHState2.Timeout=2]="Timeout",HPHState2))(HPHState||{});const ONE_MINUTE_IN_MS=60*1e3;async function stopTimer(){await game.user?.unsetFlag(MODULENAME,"heroPointHandler.startTime"),await game.user?.unsetFlag(MODULENAME,"heroPointHandler.remainingMinutes"),await game.user?.unsetFlag(MODULENAME,"heroPointHandler.timeout")}__name(stopTimer,"stopTimer"),__name2(stopTimer,"stopTimer");async function startTimer(remainingMinutes){const oldTimeout=game.user?.getFlag(MODULENAME,"heroPointHandler.timeout");if(oldTimeout&&clearTimeout(oldTimeout),remainingMinutes>0){const ms=remainingMinutes*ONE_MINUTE_IN_MS,timeout=setTimeout(async()=>{await heroPointHandler(2)},ms),updateData={flags:{"xdy-pf2e-workbench":{heroPointHandler:{startTime:game.time.serverTime,remainingMinutes,timeout}}}};await game.user?.update(updateData)}else(!remainingMinutes||remainingMinutes<=0)&&await stopTimer()}__name(startTimer,"startTimer"),__name2(startTimer,"startTimer");async function callHeroPointHandler(){return heroPointHandler(2)}__name(callHeroPointHandler,"callHeroPointHandler"),__name2(callHeroPointHandler,"callHeroPointHandler");function createRemainingTimeMessage(remainingMinutes){const message=remainingMinutes>0?game.i18n.format(`${MODULENAME}.SETTINGS.heroPointHandler.willBeResetIn`,{remainingMinutes,time:new Date(Date.now()+remainingMinutes*ONE_MINUTE_IN_MS).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"})}):game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.timerStopped`);sendMessage(message,[game.user.id])}__name(createRemainingTimeMessage,"createRemainingTimeMessage"),__name2(createRemainingTimeMessage,"createRemainingTimeMessage");async function heroPointHandler(state){if(Object.values(ui.windows).find(w=>w.title.includes(`${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.title`)}`)))return;let remainingMinutes;switch(state){case 0:remainingMinutes=Number.parseInt(String(game.settings.get(MODULENAME,"heroPointHandlerDefaultTimeoutMinutes")));break;case 1:remainingMinutes=calcRemainingMinutes(!0);break;case 2:remainingMinutes=Number.parseInt(String(game.settings.get(MODULENAME,"heroPointHandlerDefaultTimeoutMinutes")));break}const title=`${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.title`)} (${remainingMinutes?remainingMinutes+" "+game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.minutesLeft`):game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.noRunningTimer`)})`,content=await buildHtml(remainingMinutes,state);let button=null;new Dialog({title,content,buttons:{timer:{icon:'<i class="fas fa-hourglass"></i>',label:`${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.startTimerLabel`)}`,callback:async html=>{remainingMinutes=handleDialogResponse(html),button="timer"}},noTimer:{label:`${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.noTimerLabel`)}`,callback:async html=>{handleDialogResponse(html),remainingMinutes=0,button="noTimer"}}},default:"timer",close:async()=>{switch(button){case"timer":await startTimer(remainingMinutes);break;case"noTimer":await stopTimer();break}createRemainingTimeMessage(remainingMinutes)}}).render(!0)}__name(heroPointHandler,"heroPointHandler"),__name2(heroPointHandler,"heroPointHandler");async function buildHtml(remainingMinutes,state){let charactersContent="";const actors=heroes();let checked;switch(state){case 0:checked=-1;break;case 2:checked=actors.length>0?Math.floor(Math.random()*actors.length):-1;break;case 1:checked=-1;break}const startContent=`
<div class="form-group">
<div>${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.instructions`)}</div>
<hr>
  <label class="col-md-4 control-label" for="radios">${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.doWhat`)}</label>
  <div class="col-md-4">
      <div class="radio">
        <label for="sessionStart-0">
          <input type="radio" name="sessionStart" id="sessionStart-0" value="RESET">
          ${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.resetTo`)}
        </label>
      </div>
      <div class="radio">
        <label for="sessionStart-1">
          <input type="radio" name="sessionStart" id="sessionStart-1" value="ADD">
          ${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.add`)}
        </label>
      </div>
      <div class="radio">
        <label for="sessionStart-2">
          <input type="radio" name="sessionStart" id="sessionStart-2" value="IGNORE" checked="checked">
          ${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.ignore`)}
        </label>
      </div>
  </div>
</div>

<div class="form-group">
  <label class="col-md-4 control-label" for="heropoints">${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.thisMany`)}</label>
  <div class="col-md-4">
    <input id="heropoints" name="heropoints" type="number" value="1" class="form-control input-md">
  </div>
</div>

<hr>
<div class="form-group">
  <label class="col-md-4 control-label" for="characters">${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.addOne`)}</label>
  <div class="col-md-4">`;for(let i=0;i<actors.length;i++)charactersContent+=`
    <div class="radio">
        <label for="characters-${i}">
          <input type="radio" name="characters" id="characters-${i}" value="${actors[i]?.id}" ${checked===i?'checked="checked"':""}>
          ${actors[i]?.name}
        </label>
    </div>`;const maxMinutes=Number.parseInt(String(game.settings.get(MODULENAME,"heroPointHandlerDefaultTimeoutMinutes"))),remainingContent=`
  <div class="radio">
    <label for="characters-NONE">
      <input type="radio" name="characters" id="characters-NONE" value="NONE" ${checked===-1?'checked="checked"':""}>
      ${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.none`)}
    </label>
  </div>
</div>

<hr>
<script>$("#timerTextId").on("input", function () {
    const value = $(this).val();
    if ((value !== "") && (value.indexOf(".") === -1)) {
        $(this).val(Math.max(Math.min(value, ${Number.parseInt(String(game.settings.get(MODULENAME,"heroPointHandlerDefaultTimeoutMinutes")))}), 0));
    }
});<\/script>
<div class="form-group">
  <div class="col-md-4">
    <div class="input-group">
      <span class="input-group-addon">${game.i18n.format(`${MODULENAME}.SETTINGS.heroPointHandler.timerValue`,{maxMinutes})}</span>
      <input id="timerTextId" name="timerText" class="form-control" value="${remainingMinutes||maxMinutes}" type="number">
    </div>
    <p class="help-block">${game.i18n.localize(`${MODULENAME}.SETTINGS.heroPointHandler.showAfter`)}</p>
  </div>
</div>
`;return startContent+charactersContent+remainingContent}__name(buildHtml,"buildHtml"),__name2(buildHtml,"buildHtml");function calcRemainingMinutes(useDefault){const savedTime=game.user?.getFlag(MODULENAME,"heroPointHandler.startTime"),savedMinutes=game.user?.getFlag(MODULENAME,"heroPointHandler.remainingMinutes"),remainingMinutes=Math.clamped(savedMinutes??(useDefault?Number.parseInt(String(game.settings.get(MODULENAME,"heroPointHandlerDefaultTimeoutMinutes"))):0),0,Number.parseInt(String(game.settings.get(MODULENAME,"heroPointHandlerDefaultTimeoutMinutes")))),passedMillis=game.time.serverTime-(savedTime??game.time.serverTime);return remainingMinutes-Math.floor(passedMillis/ONE_MINUTE_IN_MS)}__name(calcRemainingMinutes,"calcRemainingMinutes"),__name2(calcRemainingMinutes,"calcRemainingMinutes");function heroes(){return game.actors?.party?.members.filter(actor=>actor.isOfType("character")).filter(actor=>!actor.system.traits?.value.toString().includes("minion")).filter(actor=>!actor.system.traits?.value.toString().includes("eidolon"))||[]}__name(heroes,"heroes"),__name2(heroes,"heroes");async function resetHeroPoints(heropoints){for(const actor of heroes())await actor.update({"system.resources.heroPoints.value":Math.min(heropoints,actor.system.resources.heroPoints.max)})}__name(resetHeroPoints,"resetHeroPoints"),__name2(resetHeroPoints,"resetHeroPoints");async function addHeroPoints(heropoints,actorId="ALL"){let actors;switch(actorId){case"ALL":actors=heroes();break;case"NONE":actors=[];break;default:actors=[game.actors?.get(actorId)];break}for(const actor of actors){const system=actor.system,value=Math.min(system.resources.heroPoints.value+heropoints,actor.system.resources.heroPoints.max);await actor.update({"system.resources.heroPoints.value":value})}}__name(addHeroPoints,"addHeroPoints"),__name2(addHeroPoints,"addHeroPoints");function addOneToSelectedCharacterIfAny(actorId){addHeroPoints(1,actorId).then(()=>{const name=game?.actors?.find(actor=>actor.id===actorId)?.name;let message;actorId==="ALL"?message=game.i18n.format(`${MODULENAME}.SETTINGS.heroPointHandler.addedToForAll`,{heroPoints:1}):name&&(message=game.i18n.format(`${MODULENAME}.SETTINGS.heroPointHandler.addedFor`,{name})),message&&(sendMessage(message),game.settings.get(MODULENAME,"heropointHandlerNotification")&&pushNotification(message))})}__name(addOneToSelectedCharacterIfAny,"addOneToSelectedCharacterIfAny"),__name2(addOneToSelectedCharacterIfAny,"addOneToSelectedCharacterIfAny");function sendMessage(message,whisper=void 0){game.settings.get(MODULENAME,"heropointHandlerNotificationChat")?ChatMessage.create({flavor:message,whisper},{}).then():ui.notifications?.notify(message)}__name(sendMessage,"sendMessage"),__name2(sendMessage,"sendMessage");function handleDialogResponse(html){const sessionStart=html.find('input[name="sessionStart"]:checked').val(),heroPoints=parseInt(html.find('input[name="heropoints"]').val()),actorId=html.find('input[name="characters"]:checked').val(),remainingMinutes=parseInt(html.find('input[name="timerText"]').val());return sessionStart==="RESET"?resetHeroPoints(heroPoints).then(()=>{const message=game.i18n.format(`${MODULENAME}.SETTINGS.heroPointHandler.resetToForAll`,{heroPoints});sendMessage(message),addOneToSelectedCharacterIfAny(actorId)}):sessionStart==="ADD"?addHeroPoints(heroPoints).then(()=>{const message=game.i18n.format(`${MODULENAME}.SETTINGS.heroPointHandler.addedToForAll`,{heroPoints});sendMessage(message),addOneToSelectedCharacterIfAny(actorId)}):sessionStart==="IGNORE"&&addOneToSelectedCharacterIfAny(actorId),remainingMinutes}__name(handleDialogResponse,"handleDialogResponse"),__name2(handleDialogResponse,"handleDialogResponse");async function moveSelectedAheadOfCurrent(selectedCombatantId){const combat=game?.combat;if(combat&&selectedCombatantId&&selectedCombatantId!==combat?.combatant?.id){const previous=combat?.combatants.map(c=>({initiative:c.initiative||0})).sort((a,b)=>a.initiative-b.initiative).find(c=>c.initiative>combat?.combatant?.initiative)?.initiative,current=combat?.combatant?.initiative,initiative=!previous||previous<current?current+2:(previous+current)/2||0;await combat?.setInitiative(selectedCombatantId,initiative)}}__name(moveSelectedAheadOfCurrent,"moveSelectedAheadOfCurrent"),__name2(moveSelectedAheadOfCurrent,"moveSelectedAheadOfCurrent");function moveOnZeroHP(actor){const combatant=game.combat?.getCombatantByToken(actor.isToken?actor.token?.id:canvas?.scene?.tokens?.find(t=>t.actor?.id===actor.id)?.id);shouldIHandleThis(actor)&&combatant&&combatant.id!==game.combat?.combatant?.id&&moveSelectedAheadOfCurrent(combatant.id).then()}__name(moveOnZeroHP,"moveOnZeroHP"),__name2(moveOnZeroHP,"moveOnZeroHP");function registerWorkbenchKeybindings(){logInfo(`${MODULENAME} | registerKeybindings`);const keybindings=game.keybindings;keybindings.register(MODULENAME,"addUserTargets",{name:`${MODULENAME}.SETTINGS.addUserTargets.name`,hint:`${MODULENAME}.SETTINGS.addUserTargets.hint`,restricted:!0,editable:[],onDown:()=>{const map=game.users.filter(user=>!user.isGM).map(user=>({label:user.name,key:user.id}));let content=`<div style="display: flex; line-height: 2rem;">
        <label style="flex-grow: 1;" for="dialogUserId">User</label>
        <select style="height: 2rem;" id="dialogUserId">`;for(const{key,label}of map)content+=`<option value="${key}">${label}</option>`;return content+="</div></select>",new Dialog({title:game.i18n.localize(`${MODULENAME}.SETTINGS.addUserTargets.title`),content,buttons:{addFor:{icon:'<i class="fas fa-users"></i>',label:game.i18n.localize(`${MODULENAME}.SETTINGS.addUserTargets.addFor`),callback:async html=>{const targets=Array.from(canvas.tokens?.controlled).concat(canvas.tokens.placeables.filter(it=>it.mouseInteractionManager.state===1)),user=game.users.find(u=>u.id===html.find("#dialogUserId").val());if(game.user?.isGM&&targets&&user)for(const t of targets)t.setTarget(!0,{user,releaseOthers:!1}),user.targets.add(t)}},clearFor:{icon:'<i class="fas fa-users-slash"></i>',label:game.i18n.localize(`${MODULENAME}.SETTINGS.addUserTargets.clearFor`),callback:async html=>{const user=game.users.find(u=>u.id===html.find("#dialogUserId").val());if(game.user?.isGM&&user){const targets=user.targets;for(const t of targets)t.setTarget(!1,{user,releaseOthers:!1})}}}},default:"addFor"}).render(!0),!0}}),keybindings.register(MODULENAME,"heroPointHandler",{name:`${MODULENAME}.SETTINGS.heroPointHandlerKey.name`,hint:`${MODULENAME}.SETTINGS.heroPointHandlerKey.hint`,restricted:!0,editable:[],onDown:()=>(game.user?.isGM&&game.settings.get(MODULENAME,"heroPointHandler")&&heroPointHandler(calcRemainingMinutes(!1)>0?HPHState.Check:HPHState.Start).then(),!0)}),keybindings.register(MODULENAME,"moveBeforeCurrentCombatantKey",{name:`${MODULENAME}.SETTINGS.moveBeforeCurrentCombatantKey.name`,hint:`${MODULENAME}.SETTINGS.moveBeforeCurrentCombatantKey.hint`,restricted:!0,editable:[],onDown:()=>{if(game.user?.isGM){const combatantByToken=game?.combat?.getCombatantByToken(canvas?.tokens?.controlled[0].id);moveSelectedAheadOfCurrent(combatantByToken).then()}return!0}}),keybindings.register(MODULENAME,"npcMystifierMystifyKey",{name:`${MODULENAME}.SETTINGS.npcMystifierMystifyKey.name`,hint:`${MODULENAME}.SETTINGS.npcMystifierMystifyKey.hint`,restricted:!0,editable:[],onDown:()=>{if(game.settings.get(MODULENAME,"npcMystifier")){if(canMystify())for(const token of canvas?.tokens?.controlled.filter(t=>!t.actor?.hasPlayerOwner)||[])doMystification(token,isTokenMystified(token)).then();else ui.notifications?.warn(game.i18n.localize(`${MODULENAME}.SETTINGS.notifications.cantMystify`));return!0}return!1},reservedModifiers:[],precedence:CONST.KEYBINDING_PRECEDENCE.NORMAL});for(let page=1;page<=5;page++)for(let column=1;column<=10;column++)keybindings.register(MODULENAME,`callHotbarPage${page}Macro${column}`,{name:game.i18n.format(`${MODULENAME}.SETTINGS.callHotbarMacro.name`,{page,column}),hint:game.i18n.format(`${MODULENAME}.SETTINGS.callHotbarMacro.hint`,{page,column}),restricted:!1,editable:[],onDown:()=>(game.user?.getHotbarMacros(page)?.[column-1].macro.execute(),!0)})}__name(registerWorkbenchKeybindings,"registerWorkbenchKeybindings"),__name2(registerWorkbenchKeybindings,"registerWorkbenchKeybindings");const SCALE_APP_DATA={hitPoints:[{level:-1,high:{minimum:9,maximum:10,die:2},moderate:{minimum:7,maximum:8,die:2},low:{minimum:5,maximum:6,die:2}},{level:0,high:{minimum:17,maximum:20,die:4},moderate:{minimum:14,maximum:16,die:3},low:{minimum:11,maximum:13,die:3}},{level:1,high:{minimum:24,maximum:26,die:3},moderate:{minimum:19,maximum:21,die:3},low:{minimum:14,maximum:16,die:3}},{level:2,high:{minimum:36,maximum:40,die:5},moderate:{minimum:28,maximum:32,die:5},low:{minimum:21,maximum:25,die:5}},{level:3,high:{minimum:53,maximum:59,die:7},moderate:{minimum:42,maximum:48,die:7},low:{minimum:31,maximum:37,die:7}},{level:4,high:{minimum:72,maximum:78,die:7},moderate:{minimum:57,maximum:63,die:7},low:{minimum:42,maximum:48,die:7}},{level:5,high:{minimum:91,maximum:97,die:7},moderate:{minimum:72,maximum:78,die:7},low:{minimum:53,maximum:59,die:7}},{level:6,high:{minimum:115,maximum:123,die:9},moderate:{minimum:91,maximum:99,die:9},low:{minimum:67,maximum:75,die:9}},{level:7,high:{minimum:140,maximum:148,die:9},moderate:{minimum:111,maximum:119,die:9},low:{minimum:82,maximum:90,die:9}},{level:8,high:{minimum:165,maximum:173,die:9},moderate:{minimum:131,maximum:139,die:9},low:{minimum:97,maximum:105,die:9}},{level:9,high:{minimum:190,maximum:198,die:9},moderate:{minimum:151,maximum:159,die:9},low:{minimum:112,maximum:120,die:9}},{level:10,high:{minimum:215,maximum:223,die:9},moderate:{minimum:171,maximum:179,die:9},low:{minimum:127,maximum:135,die:9}},{level:11,high:{minimum:240,maximum:248,die:9},moderate:{minimum:191,maximum:199,die:9},low:{minimum:142,maximum:150,die:9}},{level:12,high:{minimum:265,maximum:273,die:9},moderate:{minimum:211,maximum:219,die:9},low:{minimum:157,maximum:165,die:9}},{level:13,high:{minimum:290,maximum:298,die:9},moderate:{minimum:231,maximum:239,die:9},low:{minimum:172,maximum:180,die:9}},{level:14,high:{minimum:315,maximum:323,die:9},moderate:{minimum:251,maximum:259,die:9},low:{minimum:187,maximum:195,die:9}},{level:15,high:{minimum:340,maximum:348,die:9},moderate:{minimum:271,maximum:279,die:9},low:{minimum:202,maximum:210,die:9}},{level:16,high:{minimum:365,maximum:373,die:9},moderate:{minimum:291,maximum:299,die:9},low:{minimum:217,maximum:225,die:9}},{level:17,high:{minimum:390,maximum:398,die:9},moderate:{minimum:311,maximum:319,die:9},low:{minimum:232,maximum:240,die:9}},{level:18,high:{minimum:415,maximum:423,die:9},moderate:{minimum:331,maximum:339,die:9},low:{minimum:247,maximum:255,die:9}},{level:19,high:{minimum:440,maximum:448,die:9},moderate:{minimum:351,maximum:359,die:9},low:{minimum:262,maximum:270,die:9}},{level:20,high:{minimum:465,maximum:473,die:9},moderate:{minimum:371,maximum:379,die:9},low:{minimum:277,maximum:285,die:9}},{level:21,high:{minimum:495,maximum:505,die:11},moderate:{minimum:395,maximum:405,die:11},low:{minimum:295,maximum:305,die:11}},{level:22,high:{minimum:532,maximum:544,die:13},moderate:{minimum:424,maximum:436,die:13},low:{minimum:317,maximum:329,die:13}},{level:23,high:{minimum:569,maximum:581,die:13},moderate:{minimum:454,maximum:466,die:13},low:{minimum:339,maximum:351,die:13}},{level:24,high:{minimum:617,maximum:633,die:17},moderate:{minimum:492,maximum:508,die:17},low:{minimum:367,maximum:383,die:17}}],abilityScore:[{level:-1,extreme:3,high:3,moderate:2,low:0,terrible:-4,abysmal:-5},{level:0,extreme:3,high:3,moderate:2,low:0,terrible:-4,abysmal:-5},{level:1,extreme:5,high:4,moderate:3,low:1,terrible:-4,abysmal:-5},{level:2,extreme:5,high:4,moderate:3,low:1,terrible:-4,abysmal:-5},{level:3,extreme:5,high:4,moderate:3,low:1,terrible:-4,abysmal:-5},{level:4,extreme:6,high:5,moderate:3,low:2,terrible:-4,abysmal:-5},{level:5,extreme:6,high:5,moderate:4,low:2,terrible:-4,abysmal:-5},{level:6,extreme:7,high:5,moderate:4,low:2,terrible:-4,abysmal:-5},{level:7,extreme:7,high:6,moderate:4,low:2,terrible:-4,abysmal:-5},{level:8,extreme:7,high:6,moderate:4,low:3,terrible:-4,abysmal:-5},{level:9,extreme:7,high:6,moderate:4,low:3,terrible:-4,abysmal:-5},{level:10,extreme:8,high:7,moderate:5,low:3,terrible:-4,abysmal:-5},{level:11,extreme:8,high:7,moderate:5,low:3,terrible:-4,abysmal:-5},{level:12,extreme:8,high:7,moderate:5,low:4,terrible:-4,abysmal:-5},{level:13,extreme:9,high:8,moderate:5,low:4,terrible:-4,abysmal:-5},{level:14,extreme:9,high:8,moderate:5,low:4,terrible:-4,abysmal:-5},{level:15,extreme:9,high:8,moderate:6,low:4,terrible:-4,abysmal:-5},{level:16,extreme:10,high:9,moderate:6,low:5,terrible:-4,abysmal:-5},{level:17,extreme:10,high:9,moderate:6,low:5,terrible:-4,abysmal:-5},{level:18,extreme:10,high:9,moderate:6,low:5,terrible:-4,abysmal:-5},{level:19,extreme:11,high:10,moderate:6,low:5,terrible:-4,abysmal:-5},{level:20,extreme:11,high:10,moderate:7,low:6,terrible:-4,abysmal:-5},{level:21,extreme:11,high:10,moderate:7,low:6,terrible:-4,abysmal:-5},{level:22,extreme:11,high:10,moderate:8,low:6,terrible:-4,abysmal:-5},{level:23,extreme:11,high:10,moderate:8,low:6,terrible:-4,abysmal:-5},{level:24,extreme:13,high:12,moderate:9,low:7,terrible:-4,abysmal:-5}],savingThrow:[{level:-1,extreme:9,high:8,moderate:5,low:2,terrible:0},{level:0,extreme:10,high:9,moderate:6,low:3,terrible:1},{level:1,extreme:11,high:10,moderate:7,low:4,terrible:2},{level:2,extreme:12,high:11,moderate:8,low:5,terrible:3},{level:3,extreme:14,high:12,moderate:9,low:6,terrible:4},{level:4,extreme:15,high:14,moderate:11,low:8,terrible:6},{level:5,extreme:17,high:15,moderate:12,low:9,terrible:7},{level:6,extreme:18,high:17,moderate:14,low:11,terrible:8},{level:7,extreme:20,high:18,moderate:15,low:12,terrible:10},{level:8,extreme:21,high:19,moderate:16,low:13,terrible:11},{level:9,extreme:23,high:21,moderate:18,low:15,terrible:12},{level:10,extreme:24,high:22,moderate:19,low:16,terrible:14},{level:11,extreme:26,high:24,moderate:21,low:18,terrible:15},{level:12,extreme:27,high:25,moderate:22,low:19,terrible:16},{level:13,extreme:29,high:26,moderate:23,low:20,terrible:18},{level:14,extreme:30,high:28,moderate:25,low:22,terrible:19},{level:15,extreme:32,high:29,moderate:26,low:23,terrible:20},{level:16,extreme:33,high:30,moderate:28,low:25,terrible:22},{level:17,extreme:35,high:32,moderate:29,low:26,terrible:23},{level:18,extreme:36,high:33,moderate:30,low:27,terrible:24},{level:19,extreme:38,high:35,moderate:32,low:29,terrible:26},{level:20,extreme:39,high:36,moderate:33,low:30,terrible:27},{level:21,extreme:41,high:38,moderate:35,low:32,terrible:28},{level:22,extreme:43,high:39,moderate:36,low:33,terrible:30},{level:23,extreme:44,high:40,moderate:37,low:34,terrible:31},{level:24,extreme:46,high:42,moderate:38,low:36,terrible:32}],armorClass:[{level:-1,extreme:18,high:15,moderate:14,low:12},{level:0,extreme:19,high:16,moderate:15,low:13},{level:1,extreme:19,high:16,moderate:15,low:13},{level:2,extreme:21,high:18,moderate:17,low:15},{level:3,extreme:22,high:19,moderate:18,low:16},{level:4,extreme:24,high:21,moderate:20,low:18},{level:5,extreme:25,high:22,moderate:21,low:19},{level:6,extreme:27,high:24,moderate:23,low:21},{level:7,extreme:28,high:25,moderate:24,low:22},{level:8,extreme:30,high:27,moderate:26,low:24},{level:9,extreme:31,high:28,moderate:27,low:25},{level:10,extreme:33,high:30,moderate:29,low:27},{level:11,extreme:34,high:31,moderate:30,low:28},{level:12,extreme:36,high:33,moderate:32,low:30},{level:13,extreme:37,high:34,moderate:33,low:31},{level:14,extreme:39,high:36,moderate:35,low:33},{level:15,extreme:40,high:37,moderate:36,low:34},{level:16,extreme:42,high:39,moderate:38,low:36},{level:17,extreme:43,high:40,moderate:39,low:37},{level:18,extreme:45,high:42,moderate:41,low:39},{level:19,extreme:46,high:43,moderate:42,low:40},{level:20,extreme:48,high:45,moderate:44,low:42},{level:21,extreme:49,high:46,moderate:45,low:43},{level:22,extreme:51,high:48,moderate:47,low:45},{level:23,extreme:52,high:49,moderate:48,low:46},{level:24,extreme:54,high:51,moderate:50,low:48}],perception:[{level:-1,extreme:9,high:8,moderate:5,low:2,terrible:0},{level:0,extreme:10,high:9,moderate:6,low:3,terrible:1},{level:1,extreme:11,high:10,moderate:7,low:4,terrible:2},{level:2,extreme:12,high:11,moderate:8,low:5,terrible:3},{level:3,extreme:14,high:12,moderate:9,low:6,terrible:4},{level:4,extreme:15,high:14,moderate:11,low:8,terrible:6},{level:5,extreme:17,high:15,moderate:12,low:9,terrible:7},{level:6,extreme:18,high:17,moderate:14,low:11,terrible:8},{level:7,extreme:20,high:18,moderate:15,low:12,terrible:10},{level:8,extreme:21,high:19,moderate:16,low:13,terrible:11},{level:9,extreme:23,high:21,moderate:18,low:15,terrible:12},{level:10,extreme:24,high:22,moderate:19,low:16,terrible:14},{level:11,extreme:26,high:24,moderate:21,low:18,terrible:15},{level:12,extreme:27,high:25,moderate:22,low:19,terrible:16},{level:13,extreme:29,high:26,moderate:23,low:20,terrible:18},{level:14,extreme:30,high:28,moderate:25,low:22,terrible:19},{level:15,extreme:32,high:29,moderate:26,low:23,terrible:20},{level:16,extreme:33,high:30,moderate:28,low:25,terrible:22},{level:17,extreme:35,high:32,moderate:29,low:26,terrible:23},{level:18,extreme:36,high:33,moderate:30,low:27,terrible:24},{level:19,extreme:38,high:35,moderate:32,low:29,terrible:26},{level:20,extreme:39,high:36,moderate:33,low:30,terrible:27},{level:21,extreme:41,high:38,moderate:35,low:32,terrible:28},{level:22,extreme:43,high:39,moderate:36,low:33,terrible:30},{level:23,extreme:44,high:40,moderate:37,low:34,terrible:31},{level:24,extreme:46,high:42,moderate:38,low:36,terrible:32}],skill:[{level:-1,extreme:8,high:5,moderate:4,low:2,terrible:1},{level:0,extreme:9,high:6,moderate:5,low:3,terrible:2},{level:1,extreme:10,high:7,moderate:6,low:4,terrible:3},{level:2,extreme:11,high:8,moderate:7,low:5,terrible:4},{level:3,extreme:13,high:10,moderate:9,low:7,terrible:5},{level:4,extreme:15,high:12,moderate:10,low:8,terrible:7},{level:5,extreme:16,high:13,moderate:12,low:10,terrible:8},{level:6,extreme:18,high:15,moderate:13,low:11,terrible:9},{level:7,extreme:20,high:17,moderate:15,low:13,terrible:11},{level:8,extreme:21,high:18,moderate:16,low:14,terrible:12},{level:9,extreme:23,high:20,moderate:18,low:16,terrible:13},{level:10,extreme:25,high:22,moderate:19,low:17,terrible:15},{level:11,extreme:26,high:23,moderate:21,low:19,terrible:16},{level:12,extreme:28,high:25,moderate:22,low:20,terrible:17},{level:13,extreme:30,high:27,moderate:24,low:22,terrible:19},{level:14,extreme:31,high:28,moderate:25,low:23,terrible:20},{level:15,extreme:33,high:30,moderate:27,low:25,terrible:21},{level:16,extreme:35,high:32,moderate:28,low:26,terrible:23},{level:17,extreme:36,high:33,moderate:30,low:28,terrible:24},{level:18,extreme:38,high:35,moderate:31,low:29,terrible:25},{level:19,extreme:40,high:37,moderate:33,low:31,terrible:27},{level:20,extreme:41,high:38,moderate:34,low:32,terrible:28},{level:21,extreme:43,high:40,moderate:36,low:34,terrible:29},{level:22,extreme:45,high:42,moderate:37,low:35,terrible:31},{level:23,extreme:46,high:43,moderate:38,low:36,terrible:32},{level:24,extreme:48,high:45,moderate:40,low:38,terrible:33}],strikeAttack:[{level:-1,extreme:10,high:8,moderate:6,low:4},{level:0,extreme:10,high:8,moderate:6,low:4},{level:1,extreme:11,high:9,moderate:7,low:5},{level:2,extreme:13,high:11,moderate:9,low:7},{level:3,extreme:14,high:12,moderate:10,low:8},{level:4,extreme:16,high:14,moderate:12,low:9},{level:5,extreme:17,high:15,moderate:13,low:11},{level:6,extreme:19,high:17,moderate:15,low:12},{level:7,extreme:20,high:18,moderate:16,low:13},{level:8,extreme:22,high:20,moderate:18,low:15},{level:9,extreme:23,high:21,moderate:19,low:16},{level:10,extreme:25,high:23,moderate:21,low:17},{level:11,extreme:27,high:24,moderate:22,low:19},{level:12,extreme:28,high:26,moderate:24,low:20},{level:13,extreme:29,high:27,moderate:25,low:21},{level:14,extreme:31,high:29,moderate:27,low:23},{level:15,extreme:32,high:30,moderate:28,low:24},{level:16,extreme:34,high:32,moderate:30,low:25},{level:17,extreme:35,high:33,moderate:31,low:27},{level:18,extreme:37,high:35,moderate:33,low:28},{level:19,extreme:38,high:36,moderate:34,low:29},{level:20,extreme:40,high:38,moderate:36,low:31},{level:21,extreme:41,high:39,moderate:37,low:32},{level:22,extreme:43,high:41,moderate:39,low:33},{level:23,extreme:44,high:42,moderate:40,low:35},{level:24,extreme:46,high:44,moderate:42,low:36}],strikeDamage:[{level:-1,extreme:{diceCount:1,diceSize:6,original:"1d6+1",average:4.5,bonus:1},high:{diceCount:1,diceSize:4,original:"1d4+1",average:3.5,bonus:1},moderate:{diceCount:1,diceSize:4,original:"1d4",average:2.5,bonus:0},low:{diceCount:1,diceSize:4,original:"1d4",average:2.5,bonus:0}},{level:0,extreme:{diceCount:1,diceSize:6,original:"1d6+3",average:6.5,bonus:3},high:{diceCount:1,diceSize:6,original:"1d6+2",average:5.5,bonus:2},moderate:{diceCount:1,diceSize:4,original:"1d4+2",average:4.5,bonus:2},low:{diceCount:1,diceSize:4,original:"1d4+1",average:3.5,bonus:1}},{level:1,extreme:{diceCount:1,diceSize:8,original:"1d8+4",average:8.5,bonus:4},high:{diceCount:1,diceSize:6,original:"1d6+3",average:6.5,bonus:3},moderate:{diceCount:1,diceSize:6,original:"1d6+2",average:5.5,bonus:2},low:{diceCount:1,diceSize:4,original:"1d4+2",average:4.5,bonus:2}},{level:2,extreme:{diceCount:1,diceSize:12,original:"1d12+4",average:10.5,bonus:4},high:{diceCount:1,diceSize:10,original:"1d10+4",average:9.5,bonus:4},moderate:{diceCount:1,diceSize:8,original:"1d8+4",average:8.5,bonus:4},low:{diceCount:1,diceSize:6,original:"1d6+3",average:6.5,bonus:3}},{level:3,extreme:{diceCount:1,diceSize:12,original:"1d12+8",average:14.5,bonus:8},high:{diceCount:1,diceSize:10,original:"1d10+6",average:11.5,bonus:6},moderate:{diceCount:1,diceSize:8,original:"1d8+6",average:10.5,bonus:6},low:{diceCount:1,diceSize:6,original:"1d6+5",average:8.5,bonus:5}},{level:4,extreme:{diceCount:2,diceSize:10,original:"2d10+7",average:18,bonus:7},high:{diceCount:2,diceSize:8,original:"2d8+5",average:14,bonus:5},moderate:{diceCount:2,diceSize:6,original:"2d6+5",average:12,bonus:5},low:{diceCount:2,diceSize:4,original:"2d4+4",average:9,bonus:4}},{level:5,extreme:{diceCount:2,diceSize:12,original:"2d12+7",average:20,bonus:7},high:{diceCount:2,diceSize:8,original:"2d8+7",average:16,bonus:7},moderate:{diceCount:2,diceSize:6,original:"2d6+6",average:13,bonus:6},low:{diceCount:2,diceSize:4,original:"2d4+6",average:11,bonus:6}},{level:6,extreme:{diceCount:2,diceSize:12,original:"2d12+10",average:23,bonus:10},high:{diceCount:2,diceSize:8,original:"2d8+9",average:18,bonus:9},moderate:{diceCount:2,diceSize:6,original:"2d6+8",average:15,bonus:8},low:{diceCount:2,diceSize:4,original:"2d4+7",average:12,bonus:7}},{level:7,extreme:{diceCount:2,diceSize:12,original:"2d12+12",average:25,bonus:12},high:{diceCount:2,diceSize:10,original:"2d10+9",average:20,bonus:9},moderate:{diceCount:2,diceSize:8,original:"2d8+8",average:17,bonus:8},low:{diceCount:2,diceSize:6,original:"2d6+6",average:13,bonus:6}},{level:8,extreme:{diceCount:2,diceSize:12,original:"2d12+15",average:28,bonus:15},high:{diceCount:2,diceSize:10,original:"2d10+11",average:22,bonus:11},moderate:{diceCount:2,diceSize:8,original:"2d8+9",average:18,bonus:9},low:{diceCount:2,diceSize:6,original:"2d6+8",average:15,bonus:8}},{level:9,extreme:{diceCount:2,diceSize:12,original:"2d12+17",average:30,bonus:17},high:{diceCount:2,diceSize:10,original:"2d10+13",average:24,bonus:13},moderate:{diceCount:2,diceSize:8,original:"2d8+11",average:20,bonus:11},low:{diceCount:2,diceSize:6,original:"2d6+9",average:16,bonus:9}},{level:10,extreme:{diceCount:2,diceSize:12,original:"2d12+20",average:33,bonus:20},high:{diceCount:2,diceSize:12,original:"2d12+13",average:26,bonus:13},moderate:{diceCount:2,diceSize:10,original:"2d10+11",average:22,bonus:11},low:{diceCount:2,diceSize:6,original:"2d6+10",average:17,bonus:10}},{level:11,extreme:{diceCount:2,diceSize:12,original:"2d12+22",average:35,bonus:22},high:{diceCount:2,diceSize:12,original:"2d12+15",average:28,bonus:15},moderate:{diceCount:2,diceSize:10,original:"2d10+12",average:23,bonus:12},low:{diceCount:2,diceSize:8,original:"2d8+10",average:19,bonus:10}},{level:12,extreme:{diceCount:3,diceSize:12,original:"3d12+19",average:38.5,bonus:19},high:{diceCount:3,diceSize:10,original:"3d10+14",average:30.5,bonus:14},moderate:{diceCount:3,diceSize:8,original:"3d8+12",average:25.5,bonus:12},low:{diceCount:3,diceSize:6,original:"3d6+10",average:20.5,bonus:10}},{level:13,extreme:{diceCount:3,diceSize:12,original:"3d12+21",average:40.5,bonus:21},high:{diceCount:3,diceSize:10,original:"3d10+16",average:32.5,bonus:16},moderate:{diceCount:3,diceSize:8,original:"3d8+14",average:27.5,bonus:14},low:{diceCount:3,diceSize:6,original:"3d6+11",average:21.5,bonus:11}},{level:14,extreme:{diceCount:3,diceSize:12,original:"3d12+24",average:43.5,bonus:24},high:{diceCount:3,diceSize:10,original:"3d10+18",average:34.5,bonus:18},moderate:{diceCount:3,diceSize:8,original:"3d8+15",average:28.5,bonus:15},low:{diceCount:3,diceSize:6,original:"3d6+13",average:23.5,bonus:13}},{level:15,extreme:{diceCount:3,diceSize:12,original:"3d12+26",average:45.5,bonus:26},high:{diceCount:3,diceSize:12,original:"3d12+17",average:36.5,bonus:17},moderate:{diceCount:3,diceSize:10,original:"3d10+14",average:30.5,bonus:14},low:{diceCount:3,diceSize:6,original:"3d6+14",average:24.5,bonus:14}},{level:16,extreme:{diceCount:3,diceSize:12,original:"3d12+29",average:48.5,bonus:29},high:{diceCount:3,diceSize:12,original:"3d12+18",average:37.5,bonus:18},moderate:{diceCount:3,diceSize:10,original:"3d10+15",average:31.5,bonus:15},low:{diceCount:3,diceSize:6,original:"3d6+15",average:25.5,bonus:15}},{level:17,extreme:{diceCount:3,diceSize:12,original:"3d12+31",average:50.5,bonus:31},high:{diceCount:3,diceSize:12,original:"3d12+19",average:38.5,bonus:19},moderate:{diceCount:3,diceSize:10,original:"3d10+16",average:32.5,bonus:16},low:{diceCount:3,diceSize:6,original:"3d6+16",average:26.5,bonus:16}},{level:18,extreme:{diceCount:3,diceSize:12,original:"3d12+34",average:53.5,bonus:34},high:{diceCount:3,diceSize:12,original:"3d12+20",average:39.5,bonus:20},moderate:{diceCount:3,diceSize:10,original:"3d10+17",average:33.5,bonus:17},low:{diceCount:3,diceSize:6,original:"3d6+17",average:27.5,bonus:17}},{level:19,extreme:{diceCount:4,diceSize:12,original:"4d12+29",average:55,bonus:29},high:{diceCount:4,diceSize:10,original:"4d10+20",average:42,bonus:20},moderate:{diceCount:4,diceSize:8,original:"4d8+17",average:35,bonus:17},low:{diceCount:4,diceSize:6,original:"4d6+14",average:28,bonus:14}},{level:20,extreme:{diceCount:4,diceSize:12,original:"4d12+32",average:58,bonus:32},high:{diceCount:4,diceSize:10,original:"4d10+22",average:44,bonus:22},moderate:{diceCount:4,diceSize:8,original:"4d8+19",average:37,bonus:19},low:{diceCount:4,diceSize:6,original:"4d6+15",average:29,bonus:15}},{level:21,extreme:{diceCount:4,diceSize:12,original:"4d12+34",average:60,bonus:34},high:{diceCount:4,diceSize:10,original:"4d10+24",average:46,bonus:24},moderate:{diceCount:4,diceSize:8,original:"4d8+20",average:38,bonus:20},low:{diceCount:4,diceSize:6,original:"4d6+17",average:31,bonus:17}},{level:22,extreme:{diceCount:4,diceSize:12,original:"4d12+37",average:63,bonus:37},high:{diceCount:4,diceSize:10,original:"4d10+26",average:48,bonus:26},moderate:{diceCount:4,diceSize:8,original:"4d8+22",average:40,bonus:22},low:{diceCount:4,diceSize:6,original:"4d6+18",average:32,bonus:18}},{level:23,extreme:{diceCount:4,diceSize:12,original:"4d12+39",average:65,bonus:39},high:{diceCount:4,diceSize:12,original:"4d12+24",average:50,bonus:24},moderate:{diceCount:4,diceSize:10,original:"4d10+20",average:42,bonus:20},low:{diceCount:4,diceSize:6,original:"4d6+19",average:33,bonus:19}},{level:24,extreme:{diceCount:4,diceSize:12,original:"4d12+42",average:68,bonus:42},high:{diceCount:4,diceSize:12,original:"4d12+26",average:52,bonus:26},moderate:{diceCount:4,diceSize:10,original:"4d10+22",average:44,bonus:22},low:{diceCount:4,diceSize:6,original:"4d6+21",average:35,bonus:21}}],areaDamage:[{limited:{diceCount:1,diceSize:6,original:"1d6",average:3.5,bonus:0},unlimited:{diceCount:1,diceSize:4,original:"1d4",average:2.5,bonus:0},level:-1},{limited:{diceCount:1,diceSize:10,original:"1d10",average:5.5,bonus:0},unlimited:{diceCount:1,diceSize:6,original:"1d6",average:3.5,bonus:0},level:0},{limited:{diceCount:2,diceSize:6,original:"2d6",average:7,bonus:0},unlimited:{diceCount:2,diceSize:4,original:"2d4",average:5,bonus:0},level:1},{limited:{diceCount:3,diceSize:6,original:"3d6",average:10.5,bonus:0},unlimited:{diceCount:2,diceSize:6,original:"2d6",average:7,bonus:0},level:2},{limited:{diceCount:4,diceSize:6,original:"4d6",average:14,bonus:0},unlimited:{diceCount:2,diceSize:8,original:"2d8",average:9,bonus:0},level:3},{limited:{diceCount:5,diceSize:6,original:"5d6",average:17.5,bonus:0},unlimited:{diceCount:3,diceSize:6,original:"3d6",average:10.5,bonus:0},level:4},{limited:{diceCount:6,diceSize:6,original:"6d6",average:21,bonus:0},unlimited:{diceCount:2,diceSize:10,original:"2d10",average:11,bonus:0},level:5},{limited:{diceCount:7,diceSize:6,original:"7d6",average:24.5,bonus:0},unlimited:{diceCount:4,diceSize:6,original:"4d6",average:14,bonus:0},level:6},{limited:{diceCount:8,diceSize:6,original:"8d6",average:28,bonus:0},unlimited:{diceCount:4,diceSize:6,original:"4d6",average:14,bonus:0},level:7},{limited:{diceCount:9,diceSize:6,original:"9d6",average:31.5,bonus:0},unlimited:{diceCount:5,diceSize:6,original:"5d6",average:17.5,bonus:0},level:8},{limited:{diceCount:10,diceSize:6,original:"10d6",average:35,bonus:0},unlimited:{diceCount:5,diceSize:6,original:"5d6",average:17.5,bonus:0},level:9},{limited:{diceCount:11,diceSize:6,original:"11d6",average:38.5,bonus:0},unlimited:{diceCount:6,diceSize:6,original:"6d6",average:21,bonus:0},level:10},{limited:{diceCount:12,diceSize:6,original:"12d6",average:42,bonus:0},unlimited:{diceCount:6,diceSize:6,original:"6d6",average:21,bonus:0},level:11},{limited:{diceCount:13,diceSize:6,original:"13d6",average:45.5,bonus:0},unlimited:{diceCount:5,diceSize:8,original:"5d8",average:22.5,bonus:0},level:12},{limited:{diceCount:14,diceSize:6,original:"14d6",average:49,bonus:0},unlimited:{diceCount:7,diceSize:6,original:"7d6",average:24.5,bonus:0},level:13},{limited:{diceCount:15,diceSize:6,original:"15d6",average:52.5,bonus:0},unlimited:{diceCount:4,diceSize:12,original:"4d12",average:26,bonus:0},level:14},{limited:{diceCount:16,diceSize:6,original:"16d6",average:56,bonus:0},unlimited:{diceCount:8,diceSize:6,original:"8d6",average:28,bonus:0},level:15},{limited:{diceCount:17,diceSize:6,original:"17d6",average:59.5,bonus:0},unlimited:{diceCount:8,diceSize:6,original:"8d6",average:28,bonus:0},level:16},{limited:{diceCount:18,diceSize:6,original:"18d6",average:63,bonus:0},unlimited:{diceCount:8,diceSize:6,original:"8d6",average:28,bonus:0},level:17},{limited:{diceCount:19,diceSize:6,original:"19d6",average:66.5,bonus:0},unlimited:{diceCount:9,diceSize:6,original:"9d6",average:31.5,bonus:0},level:18},{limited:{diceCount:20,diceSize:6,original:"20d6",average:70,bonus:0},unlimited:{diceCount:9,diceSize:6,original:"9d6",average:31.5,bonus:0},level:19},{limited:{diceCount:21,diceSize:6,original:"21d6",average:73.5,bonus:0},unlimited:{diceCount:6,diceSize:10,original:"6d10",average:33,bonus:0},level:20},{limited:{diceCount:22,diceSize:6,original:"22d6",average:77,bonus:0},unlimited:{diceCount:10,diceSize:6,original:"10d6",average:35,bonus:0},level:21},{limited:{diceCount:23,diceSize:6,original:"23d6",average:80.5,bonus:0},unlimited:{diceCount:8,diceSize:8,original:"8d8",average:36,bonus:0},level:22},{limited:{diceCount:24,diceSize:6,original:"24d6",average:84,bonus:0},unlimited:{diceCount:11,diceSize:6,original:"11d6",average:38.5,bonus:0},level:23},{limited:{diceCount:25,diceSize:6,original:"25d6",average:87.5,bonus:0},unlimited:{diceCount:11,diceSize:6,original:"11d6",average:38.5,bonus:0},level:24}],difficultyClass:[{level:-1,extreme:19,high:16,moderate:13},{level:0,extreme:19,high:16,moderate:13},{level:1,extreme:20,high:17,moderate:14},{level:2,extreme:22,high:18,moderate:15},{level:3,extreme:23,high:20,moderate:17},{level:4,extreme:25,high:21,moderate:18},{level:5,extreme:26,high:22,moderate:19},{level:6,extreme:27,high:24,moderate:21},{level:7,extreme:29,high:25,moderate:22},{level:8,extreme:30,high:26,moderate:23},{level:9,extreme:32,high:28,moderate:25},{level:10,extreme:33,high:29,moderate:26},{level:11,extreme:34,high:30,moderate:27},{level:12,extreme:36,high:32,moderate:29},{level:13,extreme:37,high:33,moderate:30},{level:14,extreme:39,high:34,moderate:31},{level:15,extreme:40,high:36,moderate:33},{level:16,extreme:41,high:37,moderate:34},{level:17,extreme:43,high:38,moderate:35},{level:18,extreme:44,high:40,moderate:37},{level:19,extreme:46,high:41,moderate:38},{level:20,extreme:47,high:42,moderate:39},{level:21,extreme:48,high:44,moderate:41},{level:22,extreme:50,high:45,moderate:42},{level:23,extreme:51,high:46,moderate:43},{level:24,extreme:52,high:48,moderate:45}],spell:[{level:-1,extreme:11,high:8,moderate:5},{level:0,extreme:11,high:8,moderate:5},{level:1,extreme:12,high:9,moderate:6},{level:2,extreme:14,high:10,moderate:7},{level:3,extreme:15,high:12,moderate:9},{level:4,extreme:17,high:13,moderate:10},{level:5,extreme:18,high:14,moderate:11},{level:6,extreme:19,high:16,moderate:13},{level:7,extreme:21,high:17,moderate:14},{level:8,extreme:22,high:18,moderate:15},{level:9,extreme:24,high:20,moderate:17},{level:10,extreme:25,high:21,moderate:18},{level:11,extreme:26,high:22,moderate:19},{level:12,extreme:28,high:24,moderate:21},{level:13,extreme:29,high:25,moderate:22},{level:14,extreme:31,high:26,moderate:23},{level:15,extreme:32,high:28,moderate:25},{level:16,extreme:33,high:29,moderate:26},{level:17,extreme:35,high:30,moderate:27},{level:18,extreme:36,high:32,moderate:29},{level:19,extreme:38,high:33,moderate:30},{level:20,extreme:39,high:34,moderate:31},{level:21,extreme:40,high:36,moderate:33},{level:22,extreme:42,high:37,moderate:34},{level:23,extreme:43,high:38,moderate:35},{level:24,extreme:44,high:40,moderate:37}],resistance:[{level:-1,maximum:1,minimum:1},{level:0,maximum:3,minimum:1},{level:1,maximum:3,minimum:2},{level:2,maximum:5,minimum:2},{level:3,maximum:6,minimum:3},{level:4,maximum:7,minimum:4},{level:5,maximum:8,minimum:4},{level:6,maximum:9,minimum:5},{level:7,maximum:10,minimum:5},{level:8,maximum:11,minimum:6},{level:9,maximum:12,minimum:6},{level:10,maximum:13,minimum:7},{level:11,maximum:14,minimum:7},{level:12,maximum:15,minimum:8},{level:13,maximum:16,minimum:8},{level:14,maximum:17,minimum:9},{level:15,maximum:18,minimum:9},{level:16,maximum:19,minimum:9},{level:17,maximum:19,minimum:10},{level:18,maximum:20,minimum:10},{level:19,maximum:21,minimum:11},{level:20,maximum:22,minimum:11},{level:21,maximum:23,minimum:12},{level:22,maximum:24,minimum:12},{level:23,maximum:25,minimum:13},{level:24,maximum:26,minimum:13}],weakness:[{level:-1,maximum:1,minimum:1},{level:0,maximum:3,minimum:1},{level:1,maximum:3,minimum:2},{level:2,maximum:5,minimum:2},{level:3,maximum:6,minimum:3},{level:4,maximum:7,minimum:4},{level:5,maximum:8,minimum:4},{level:6,maximum:9,minimum:5},{level:7,maximum:10,minimum:5},{level:8,maximum:11,minimum:6},{level:9,maximum:12,minimum:6},{level:10,maximum:13,minimum:7},{level:11,maximum:14,minimum:7},{level:12,maximum:15,minimum:8},{level:13,maximum:16,minimum:8},{level:14,maximum:17,minimum:9},{level:15,maximum:18,minimum:9},{level:16,maximum:19,minimum:9},{level:17,maximum:19,minimum:10},{level:18,maximum:20,minimum:10},{level:19,maximum:21,minimum:11},{level:20,maximum:22,minimum:11},{level:21,maximum:23,minimum:12},{level:22,maximum:24,minimum:12},{level:23,maximum:25,minimum:13},{level:24,maximum:26,minimum:13}],hazarddefense:[{level:-1,eac:18,hac:15,lac:12,esave:9,hsave:8,lsave:2,hardness:"2-4",hpmin:11},{level:0,eac:19,hac:16,lac:13,esave:10,hsave:9,lsave:3,hardness:"3-5",hitPoints:"15-17"},{level:1,eac:19,hac:16,lac:13,esave:11,hsave:10,lsave:4,hardness:"5-7",hitPoints:"23-25"},{level:2,eac:21,hac:18,lac:15,esave:12,hsave:11,lsave:5,hardness:"7-9",hitPoints:"30-34"},{level:3,eac:22,hac:19,lac:16,esave:14,hsave:12,lsave:6,hardness:"10-12",hitPoints:"42-46"},{level:4,eac:24,hac:21,lac:18,esave:15,hsave:14,lsave:8,hardness:"11-13",hitPoints:"46-50"},{level:5,eac:25,hac:22,lac:19,esave:17,hsave:15,lsave:9,hardness:"12-14",hitPoints:"50-54"},{level:6,eac:27,hac:24,lac:21,esave:18,hsave:17,lsave:11,hardness:"13-15",hitPoints:"54-58"},{level:7,eac:28,hac:25,lac:22,esave:20,hsave:18,lsave:12,hardness:"14-16",hitPoints:"58-62"},{level:8,eac:30,hac:27,lac:24,esave:21,hsave:19,lsave:13,hardness:"15-17",hitPoints:"62-66"},{level:9,eac:31,hac:28,lac:25,esave:23,hsave:21,lsave:15,hardness:"16-18",hitPoints:"66-70"},{level:10,eac:33,hac:30,lac:27,esave:24,hsave:22,lsave:16,hardness:"17-19",hitPoints:"70-74"},{level:11,eac:34,hac:31,lac:28,esave:26,hsave:24,lsave:18,hardness:"19-21",hitPoints:"78-82"},{level:12,eac:36,hac:33,lac:30,esave:27,hsave:25,lsave:19,hardness:"20-22",hitPoints:"82-86"},{level:13,eac:37,hac:34,lac:31,esave:29,hsave:26,lsave:20,hardness:"21-23",hitPoints:"86-90"},{level:14,eac:39,hac:36,lac:33,esave:30,hsave:28,lsave:22,hardness:"22-24",hitPoints:"90-94"},{level:15,eac:40,hac:37,lac:34,esave:32,hsave:29,lsave:23,hardness:"23-25",hitPoints:"94-98"},{level:16,eac:42,hac:39,lac:36,esave:33,hsave:30,lsave:25,hardness:"25-27",hitPoints:"101-107"},{level:17,eac:43,hac:40,lac:37,esave:35,hsave:32,lsave:26,hardness:"27-29",hitPoints:"109-115"},{level:18,eac:45,hac:42,lac:39,esave:36,hsave:33,lsave:27,hardness:"29-31",hitPoints:"117-123"},{level:19,eac:46,hac:43,lac:40,esave:38,hsave:35,lsave:29,hardness:"31-33",hitPoints:"125-131"},{level:20,eac:48,hac:45,lac:42,esave:39,hsave:36,lsave:30,hardness:"33-35",hitPoints:"133-139"},{level:21,eac:49,hac:46,lac:43,esave:41,hsave:38,lsave:32,hardness:"36-38",hitPoints:"144-152"},{level:22,eac:51,hac:48,lac:45,esave:43,hsave:39,lsave:33,hardness:"39-41",hitPoints:"156-164"},{level:23,eac:52,hac:49,lac:46,esave:44,hsave:40,lsave:34,hardness:"44-46",hitPoints:"168-176"},{level:24,eac:54,hac:51,lac:48,esave:46,hsave:42,lsave:36,hardness:"46-50",hitPoints:"180-188"}],hazardoffense:[{level:-1,satk:10,catk:8,simpledmg:"2d4+1",complexdmg:"1d4+1",edc:19,hdc:16},{level:0,satk:11,catk:8,simpledmg:"2d6+3",complexdmg:"1d6+2",edc:19,hdc:16},{level:1,satk:13,catk:9,simpledmg:"2d6+5",complexdmg:"1d6+3",edc:20,hdc:17},{level:2,satk:14,catk:11,simpledmg:"2d10+7",complexdmg:"1d10+4",edc:22,hdc:18},{level:3,satk:16,catk:12,simpledmg:"2d10+13",complexdmg:"1d10+6",edc:23,hdc:20},{level:4,satk:17,catk:14,simpledmg:"4d8+10",complexdmg:"2d8+5",edc:25,hdc:21},{level:5,satk:19,catk:15,simpledmg:"4d8+14",complexdmg:"2d8+7",edc:26,hdc:22},{level:6,satk:20,catk:17,simpledmg:"4d8+18",complexdmg:"2d8+9",edc:27,hdc:24},{level:7,satk:22,catk:18,simpledmg:"4d10+18",complexdmg:"2d10+9",edc:29,hdc:25},{level:8,satk:23,catk:20,simpledmg:"4d10+22",complexdmg:"2d10+11",edc:30,hdc:26},{level:9,satk:25,catk:21,simpledmg:"4d10+26",complexdmg:"2d10+13",edc:32,hdc:28},{level:10,satk:26,catk:23,simpledmg:"4d12+26",complexdmg:"2d12+13",edc:33,hdc:29},{level:11,satk:28,catk:24,simpledmg:"4d12+30",complexdmg:"2d12+15",edc:34,hdc:30},{level:12,satk:29,catk:26,simpledmg:"6d10+27",complexdmg:"3d10+14",edc:36,hdc:32},{level:13,satk:31,catk:27,simpledmg:"6d10+31",complexdmg:"3d10+16",edc:37,hdc:33},{level:14,satk:32,catk:29,simpledmg:"6d10+35",complexdmg:"3d10+18",edc:39,hdc:34},{level:15,satk:34,catk:30,simpledmg:"6d12+33",complexdmg:"3d12+17",edc:40,hdc:36},{level:16,satk:35,catk:32,simpledmg:"6d12+35",complexdmg:"3d12+18",edc:41,hdc:37},{level:17,satk:37,catk:33,simpledmg:"6d12+37",complexdmg:"3d12+19",edc:43,hdc:38},{level:18,satk:38,catk:35,simpledmg:"6d12+41",complexdmg:"3d12+20",edc:44,hdc:40},{level:19,satk:40,catk:36,simpledmg:"8d10+40",complexdmg:"4d10+20",edc:46,hdc:41},{level:20,satk:41,catk:38,simpledmg:"8d10+44",complexdmg:"4d10+22",edc:47,hdc:42},{level:21,satk:43,catk:39,simpledmg:"8d10+48",complexdmg:"4d10+24",edc:48,hdc:44},{level:22,satk:44,catk:41,simpledmg:"8d10+52",complexdmg:"4d10+26",edc:50,hdc:45},{level:23,satk:46,catk:42,simpledmg:"8d12+48",complexdmg:"4d12+24",edc:51,hdc:46},{level:24,satk:47,catk:44,simpledmg:"8d12+52",complexdmg:"4d12+26",edc:52,hdc:48}],level:[-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]};async function registerNpcRollerHandlebarsTemplates(){await loadTemplates([`modules/${MODULENAME}/templates/feature/npc-roller/index.hbs`,`modules/${MODULENAME}/templates/feature/npc-roller/table.hbs`,`modules/${MODULENAME}/templates/feature/npc-roller/cell.hbs`]),Handlebars.registerPartial("rollAppTable",`{{> "modules/${MODULENAME}/templates/feature/npc-roller/table.hbs"}}`),Handlebars.registerPartial("rollAppCell",`{{> "modules/${MODULENAME}/templates/feature/npc-roller/cell.hbs"}}`)}__name(registerNpcRollerHandlebarsTemplates,"registerNpcRollerHandlebarsTemplates"),__name2(registerNpcRollerHandlebarsTemplates,"registerNpcRollerHandlebarsTemplates");function enableNpcRollerButton(_app,html){const button=$(`<button><i class="fa fa-dice"></i> ${game.i18n.localize(`${MODULENAME}.npcRoller.button-label`)}</button>`);button.on("click",()=>{new NpcRoller().render(!0)});const footer=html.find(".directory-footer.action-buttons");footer.length>0&&footer.append(button)}__name(enableNpcRollerButton,"enableNpcRollerButton"),__name2(enableNpcRollerButton,"enableNpcRollerButton");class NpcRoller extends Application{static{__name(this,"NpcRoller")}static{__name2(this,"NpcRoller")}constructor(options){super(options),Hooks.on("controlToken",this.#onControlToken.bind(this))}static get defaultOptions(){return{...super.defaultOptions,title:game.i18n.localize(`${MODULENAME}.npcRoller.title`),template:`modules/${MODULENAME}/templates/feature/npc-roller/index.hbs`,tabs:[{navSelector:".roll-app-nav",contentSelector:".roll-app-body",initial:".roll-app-attacks"}],width:800,height:"auto",resizable:!0}}getData(options){const data=super.getData(options);return data.data={levels:foundry.utils.deepClone(SCALE_APP_DATA)},data.data.selected=canvas.tokens?.controlled.map(token=>token.actor?.system.details.level.value),data}activateListeners(html){super.activateListeners(html),html.find("button.rollable").on("click",this.#handleRollButtonClick)}#onControlToken(){setTimeout(this.render.bind(this),0)}async#handleRollButtonClick(event2){const target=$(event2.target),rollName=target.data("rollname"),token=canvas.tokens?.controlled[0],formula=target.data("formula"),secret=game?.keyboard?.isModifierActive(KeyboardManager.MODIFIER_KEYS.CONTROL);if(formula){const formulaString=formula.toString();await new Roll(formulaString).toMessage({speaker:ChatMessage.getSpeaker({token:token?.document}),flavor:rollName,whisper:ChatMessage.getWhisperRecipients("GM").map(u=>u.id)},{rollMode:secret?CONST.DICE_ROLL_MODES.PRIVATE:game.settings.get("core","rollMode"),create:!0})}}close(){return Hooks.off("controlToken",this.#onControlToken.bind(this)),super.close()}}function getFolder(name){return game.folders?.getName(name)}__name(getFolder,"getFolder"),__name2(getFolder,"getFolder");function getFolderInFolder(name,parentName){let parent;return parentName?(parent=game.folders?.getName(parentName),parent.getSubfolders().find(f=>f.name===name)):getFolder(name)}__name(getFolderInFolder,"getFolderInFolder"),__name2(getFolderInFolder,"getFolderInFolder");function getActor(name,folder){return game.actors?.find(a=>a.name===name&&a.folder?.name===folder)}__name(getActor,"getActor"),__name2(getActor,"getActor");function parseDamage(value){const[diceString,bonusString]=value.split("+");let bonus=0;bonusString!==void 0&&(bonus=parseInt(bonusString));const[diceCountString,diceSizeString]=diceString.split("d"),result={diceCount:parseInt(diceCountString),diceSize:parseInt(diceSizeString),original:value,average:0,bonus};return result.average=(result.diceSize+1)/2*result.diceCount+result.bonus,result}__name(parseDamage,"parseDamage"),__name2(parseDamage,"parseDamage");function constructFormula({diceCount,diceSize,bonus}){let formula=`${diceCount}d${diceSize}`;return bonus>0&&(formula=`${formula}+${bonus}`),formula}__name(constructFormula,"constructFormula"),__name2(constructFormula,"constructFormula");function getLeveledData(key,oldValue,oldLevel,newLevel){const data=SCALE_APP_DATA[key],oldLevelData=data[oldLevel+1],newLevelData=data[newLevel+1];let bestMatch={key:"undefined",delta:Number.MAX_SAFE_INTEGER};for(const entry of Object.entries(oldLevelData)){const key2=entry[0];if(key2==="level")continue;const value=parseInt(entry[1]),delta=Math.abs(value-oldValue);delta<bestMatch.delta&&(bestMatch={key:key2,delta})}const result={value:newLevelData[bestMatch.key],delta:oldValue-oldLevelData[bestMatch.key],total:0};return result.total=result.value+result.delta,result}__name(getLeveledData,"getLeveledData"),__name2(getLeveledData,"getLeveledData");function getHPData(oldValue,oldLevel,newLevel){const data=SCALE_APP_DATA.hitPoints,oldLevelData=data[oldLevel+1],newLevelData=data[newLevel+1];let bestMatch={key:"undefined",percentile:0,delta:Number.MAX_SAFE_INTEGER};for(const entry of Object.entries(oldLevelData)){const key=entry[0];if(key==="level")continue;const entryValue=entry[1],{minimum,maximum}=entryValue,range=maximum-minimum,percentile=(oldValue-minimum)/range,dMin=Math.abs(oldValue-minimum),dMax=Math.abs(oldValue-maximum),delta=Math.min(dMin,dMax);if(oldValue>minimum&&oldValue<maximum){bestMatch={key,percentile,delta};break}else delta<bestMatch.delta&&(bestMatch={key,percentile,delta})}const newValue=newLevelData[bestMatch.key];return Math.round(newValue.minimum+(newValue.maximum-newValue.minimum)*bestMatch.percentile)}__name(getHPData,"getHPData"),__name2(getHPData,"getHPData");function getMinMaxData(key,oldValue,oldLevel,newLevel){const data=SCALE_APP_DATA[key],oldLevelData=data[oldLevel+1],newLevelData=data[newLevel+1],oldRange=Math.abs(oldLevelData.maximum-oldLevelData.minimum),oldPercentile=(oldValue-oldLevelData.minimum)/oldRange,newRange=Math.abs(newLevelData.maximum-newLevelData.minimum);return Math.round(newLevelData.minimum+newRange*oldPercentile)}__name(getMinMaxData,"getMinMaxData"),__name2(getMinMaxData,"getMinMaxData");function constructRelativeDamage(oldDmg,stdDmg,newDmg){const count=newDmg.diceCount,size=newDmg.diceSize,bonus=newDmg.bonus+oldDmg.bonus-stdDmg.bonus;return parseDamage(constructFormula({diceCount:count,diceSize:size,bonus}))}__name(constructRelativeDamage,"constructRelativeDamage"),__name2(constructRelativeDamage,"constructRelativeDamage");function getDamageData(oldValue,oldLevel,newLevel){const data=SCALE_APP_DATA.strikeDamage,oldLevelData=data[oldLevel+1],newLevelData=data[newLevel+1],parsedOldValue=parseDamage(oldValue);let bestMatch={key:"undefined",delta:Number.MAX_SAFE_INTEGER};for(const entry of Object.entries(oldLevelData)){const key=entry[0];if(key==="level")continue;const value=entry[1],delta=Math.abs(value.average-parsedOldValue.average);delta<bestMatch.delta&&(bestMatch={key,delta})}return bestMatch.delta<parsedOldValue.average*.5?constructRelativeDamage(parsedOldValue,oldLevelData[bestMatch.key],newLevelData[bestMatch.key]).original:oldValue}__name(getDamageData,"getDamageData"),__name2(getDamageData,"getDamageData");function getAreaDamageData(oldValue,oldLevel,newLevel){const data=SCALE_APP_DATA.areaDamage,oldLevelData=data[oldLevel+1],newLevelData=data[newLevel+1],parsedOldValue=parseDamage(oldValue);let bestMatch={key:"undefined",delta:Number.MAX_SAFE_INTEGER};for(const entry of Object.entries(oldLevelData)){const key=entry[0];if(key==="level")continue;const value=entry[1],delta=Math.abs(value.average-parsedOldValue.average);delta<bestMatch.delta&&(bestMatch={key,delta})}return bestMatch.delta<parsedOldValue.average*.5?constructRelativeDamage(parsedOldValue,oldLevelData[bestMatch.key],newLevelData[bestMatch.key]).original:oldValue}__name(getAreaDamageData,"getAreaDamageData"),__name2(getAreaDamageData,"getAreaDamageData");async function scaleNPCToLevelFromActor(actorId,newLevel){const actor=game.actors.get(actorId);actor&&await scaleNPCToLevel(actor,newLevel)}__name(scaleNPCToLevelFromActor,"scaleNPCToLevelFromActor"),__name2(scaleNPCToLevelFromActor,"scaleNPCToLevelFromActor");async function scaleNPCToLevel(actor,newLevel){const rootFolder=getFolder("cr-scaler"),folderName=`Level ${newLevel}`,folder=getFolderInFolder(folderName,rootFolder?.name)??await Folder.create({name:folderName,type:"Actor",parent:rootFolder?rootFolder.id:""}),system=actor.system,oldLevel=system.details.level.value,updateData={folder:folder.id,"system.details.level.value":newLevel};for(const[key,attr]of Object.entries(system.abilities)){const mod=getLeveledData("abilityScore",parseInt(attr.mod),oldLevel,newLevel).total,value=10+mod*2,min=3;updateData[`system.abilities.${key}`]={value,min,mod}}const drData=[],resistances=system.attributes.resistances;for(let i=0;i<resistances.length;i++){const resistance=resistances[i];drData.push({label:resistance.label,type:resistance.type,exceptions:resistance.exceptions??"",value:getMinMaxData("resistance",resistance.value,oldLevel,newLevel).toString(),doubleVs:resistance.doubleVs??""})}updateData["system.attributes.resistances"]=drData;const dvData=[],weaknesses=system.attributes.weaknesses;for(let i=0;i<weaknesses.length;i++){const weakness=weaknesses[i];dvData.push({label:weakness.label,type:weakness.type,exceptions:weakness.exceptions??"",value:getMinMaxData("weakness",weakness.value,oldLevel,newLevel).toString()})}updateData["system.attributes.vulnerabilities"]=dvData,updateData["system.attributes.ac.value"]=getLeveledData("armorClass",system.attributes.ac?.value??0,oldLevel,newLevel).total,updateData["system.perception.mod"]=getLeveledData("perception",system.perception.mod??0,oldLevel,newLevel).total,updateData["system.saves.fortitude.value"]=getLeveledData("savingThrow",system.saves.fortitude.value??0,oldLevel,newLevel).total,updateData["system.saves.reflex.value"]=getLeveledData("savingThrow",system.saves.reflex.value??0,oldLevel,newLevel).total,updateData["system.saves.will.value"]=getLeveledData("savingThrow",system.saves.will.value??0,oldLevel,newLevel).total;const hp=getHPData(system.attributes.hp?.value??0,oldLevel,newLevel);updateData["system.attributes.hp.max"]=hp,updateData["system.attributes.hp.value"]=hp;let itemUpdates=[];const items=actor.items;for(const itemId of items.keys()){const item=items.get(itemId);if(item.type==="lore"){const oldValue=parseInt(item.system.mod.value),newValue=getLeveledData("skill",oldValue,oldLevel,newLevel).total;itemUpdates.push({_id:item.id,"system.mod.value":newValue})}else if(item.type==="spellcastingEntry"){const oldAttack=parseInt(item.system.spelldc.value),newAttack=getLeveledData("spell",oldAttack,oldLevel,newLevel).total,oldDC=parseInt(item.system.spelldc.dc),newDC=getLeveledData("difficultyClass",oldDC,oldLevel,newLevel).total;itemUpdates.push({_id:item.id,"system.spelldc.value":newAttack,"system.spelldc.dc":newDC})}else if(item.type==="melee"){const oldAttack=parseInt(item.system.bonus.value),newAttack=getLeveledData("spell",oldAttack,oldLevel,newLevel).total,attackUpdate={_id:item.id,"system.bonus.value":newAttack,"system.bonus.total":newAttack},damage=item.system.damageRolls;if(Array.isArray(damage))for(let i=0;i<damage.length;i++)attackUpdate[`system.damageRolls.${i}.damage`]=getDamageData(damage[i].damage,oldLevel,newLevel),attackUpdate[`system.damageRolls.${i}.damageType`]=damage[i].damageType;else for(const key in damage)attackUpdate[`system.damageRolls.${key}.damage`]=getDamageData(damage[key].damage,oldLevel,newLevel),attackUpdate[`system.damageRolls.${key}.damageType`]=damage[key].damageType;itemUpdates.push(attackUpdate)}}logDebug(itemUpdates);let newActor=getActor(actor.name,folder.name);newActor!==void 0?await newActor.update(updateData):(newActor=actor.clone(updateData),newActor=await Actor.create(newActor?._source)),await newActor.updateEmbeddedDocuments("Item",itemUpdates),itemUpdates=[];const DC_REGEXES=[/(data-pf2-dc=")(\d+)(")/g,/(@Check\[.*?type:.*?|dc:)(\d+)(.*?])/g];for(let regexNo=0;regexNo<DC_REGEXES.length;regexNo++){const regex=DC_REGEXES[regexNo];for(const item of items.filter(item2=>item2.system.description.value.includes("DC")||item2.system.description.value.includes("dc:")).filter(item2=>!Array.of("consumable","armor","backpack","book","equipment","treasure","weapon").includes(item2.type)).filter(item2=>!item2.system.description.value.includes("type:flat"))){const description=item.system.description.value;let newDescription=description,match=regex.exec(description),indexOffset=0;for(;match!==null;){const fullMatch=match[0];let value;regexNo===0?value=match[1]:value=match[2];const index=match.index+indexOffset,newDCValue=getLeveledData("difficultyClass",parseInt(value),oldLevel,newLevel).total,newDCString=`${match[1]}${newDCValue}${match[3]}`;newDescription=newDescription.substring(0,index)+newDCString+newDescription.substring(index+fullMatch.length),indexOffset+=newDescription.length-description.length-indexOffset,match=regex.exec(description)}itemUpdates.push({_id:item.id,"system.description.value":newDescription})}}await newActor.updateEmbeddedDocuments("Item",itemUpdates),itemUpdates=[];for(const item of newActor.items.filter(item2=>!item2.isOfType("spell")).values()){const DMG_REGEX=/\d+d\d+(\+\d*)?/g,description=item.system.description.value;let newDescription=description,match=DMG_REGEX.exec(description),indexOffset=0;for(;match!==null;){const[fullMatch]=match,index=match.index+indexOffset,newDamageFormula=getAreaDamageData(fullMatch,oldLevel,newLevel);newDescription=newDescription.substring(0,index)+newDamageFormula+newDescription.substring(index+fullMatch.length),indexOffset+=newDescription.length-description.length-indexOffset,match=DMG_REGEX.exec(description)}itemUpdates.push({_id:item.id,"system.description.value":newDescription})}await newActor.updateEmbeddedDocuments("Item",itemUpdates)}__name(scaleNPCToLevel,"scaleNPCToLevel"),__name2(scaleNPCToLevel,"scaleNPCToLevel");class FollowTheExpertAction{static{__name(this,"FollowTheExpertAction")}static{__name2(this,"FollowTheExpertAction")}img;name;slug;traits;variants;effect;constructor(){this.img="systems/pf2e/icons/spells/favorable-review.webp",this.name=`${MODULENAME}.macros.basicActionMacros.actions.FollowTheExpertToggle`,this.slug="follow-the-expert",this.traits=["exploration"],this.variants=new Collection,this.effect="Compendium.pf2e.other-effects.VCSpuc3Tf3XWMkd3"}fixupRules(effect,expert){const expertSkills=expert.skills;if(!expertSkills)return;const flags=expert.flags.pf2e?.followTheExpert,minLevel=flags?.minimum??2,lores=Object.values(expertSkills).filter(s=>s.lore&&(s.rank??0)>=minLevel).map(s=>({label:s.label,value:s.slug})),skillRule=effect.system.rules.find(e=>e.key==="ChoiceSet"&&e.flag==="followTheExpertSkill"),profRule=effect.system.rules.find(e=>e.key==="ChoiceSet"&&e.flag==="followTheExpertProficiency");if(!skillRule||!profRule)throw new Error("Effect: FTE did not have expected rules");minLevel<=1&&profRule.choices.push({label:"PF2E.ProficiencyLevel1",sort:0,value:1}),skillRule.choices=skillRule.choices.filter(c=>(expertSkills[c.value]?.rank??0)>=minLevel).concat(lores);const skills=skillRule.choices.map(c=>c.value);for(const choice of profRule.choices){const skillsAtLevel=skills.filter(s=>expertSkills[s].rank===choice.value);skillsAtLevel.length>0?choice.predicate=[{or:skillsAtLevel.map(s=>({eq:["{item|flags.pf2e.rulesSelections.followTheExpertSkill}",s]}))}]:choice.predicate=["disabled"]}if(flags?.bonus){const rankSlugs=Object.keys(CONFIG.PF2E.proficiencyRanks);effect.system.rules.push({key:"AdjustModifier",mode:"upgrade",slug:"follow-the-expert-circumstance",selector:"{item|flags.pf2e.rulesSelections.followTheExpertSkill}",value:{brackets:rankSlugs.map((r,i)=>({start:i,end:i,value:flags.bonus?.[r]})).filter(b=>b.value!==void 0),field:"item|flags.pf2e.rulesSelections.followTheExpertProficiency"}})}}async use(_options){const source=await fromUuid(this.effect);if(!source)throw new Error(`Effect ${this.effect} not found!`);const effect=source.toObject();(effect.flags.core??={}).sourceId=this.effect;const actors=canvas.tokens.controlled.flatMap(token=>token.actor??[]);if(actors.length===0&&game.user.character&&actors.push(game.user.character),actors.length===0)return ui.notifications.error("PF2E.ErrorMessage.NoTokenSelected",{localize:!0});const target=game.user.targets.first();target?.actor&&this.fixupRules(effect,target.actor);for(const actor of actors){const existing=actor.itemTypes.effect.find(e=>e.flags.core?.sourceId===this.effect);existing?await existing.delete():await actor.createEmbeddedDocuments("Item",[effect])}return!0}async toMessage(_options){}}let followTheExpert;Hooks.once("setup",()=>{followTheExpert=new FollowTheExpertAction});async function registerBasicActionMacrosHandlebarsTemplates(){await loadTemplates([`modules/${MODULENAME}/templates/macros/bam/index.hbs`,`modules/${MODULENAME}/templates/macros/bam/actionButton.hbs`]),Handlebars.registerPartial("actionButton",`{{> "modules/${MODULENAME}/templates/macros/bam/actionButton.hbs"}}`)}__name(registerBasicActionMacrosHandlebarsTemplates,"registerBasicActionMacrosHandlebarsTemplates"),__name2(registerBasicActionMacrosHandlebarsTemplates,"registerBasicActionMacrosHandlebarsTemplates");function getBestBonuses(actorSkills,party,actionList){for(const actorId of party){const skills=actorSkills.get(actorId);for(const action of actionList){const skill=skills?.[action.skill?.toLowerCase()];if(!skill)continue;const bonus=skill.check?.mod??skill.mod;bonus>(action.best??-1)&&(action.best=bonus,action.whoIsBest=actorId)}}}__name(getBestBonuses,"getBestBonuses"),__name2(getBestBonuses,"getBestBonuses");function createMapOfSkillsPerActor(actors){const map=new Map;for(const actor of actors){const skills=fetchSkills(actor);skills&&map.set(actor.id,skills)}return map}__name(createMapOfSkillsPerActor,"createMapOfSkillsPerActor"),__name2(createMapOfSkillsPerActor,"createMapOfSkillsPerActor");function fetchSkills(actor){return{perception:actor.perception,...actor.skills}}__name(fetchSkills,"fetchSkills"),__name2(fetchSkills,"fetchSkills");function createButtonData(action,idx,actor,party,actorSkills){const skillName=action.skill?.toLowerCase(),skill=skillName?actorSkills[skillName]:null,bonus=skill?skill.check?.mod??skill.mod:-1;return{best:game.settings.get(MODULENAME,"basicActionMacroShowBestBonus")&&party.length&&party.includes(actor.id)?bonus>=(action.best??0):!1,idx,action,skill,bonus}}__name(createButtonData,"createButtonData"),__name2(createButtonData,"createButtonData");function prepareActions(selectedActor,bamActions){const showUnusable=game.settings.get(MODULENAME,"bamShowUnusable"),actionsToUse=bamActions.filter(x=>{const hasSkill=selectedActor.skills?.[x.skill.toLocaleLowerCase()]?.rank??!1,hasAltSkillAndFeat=x.altSkillAndFeat?.find(y=>selectedActor.skills?.[y.skill.toLocaleLowerCase()]?.rank)&&x.altSkillAndFeat?.find(y=>selectedActor.itemTypes.feat.find(feat=>feat.slug===y.feat));return showUnusable||x.actionType!=="skill_trained"||x.actionType==="skill_trained"&&["npc","familiar"].includes(selectedActor.type)||selectedActor.itemTypes.feat.find(feat=>feat.slug==="clever-improviser")||hasSkill||hasAltSkillAndFeat}).filter(m=>m.module?game.modules.get(m.module)?.active:!0).sort((a,b)=>a.name.localeCompare(b.name,game.i18n.lang));return actionsToUse.forEach(x=>{const traits=x?.action?.traits??[];x.showMAP=traits.includes("attack"),x.showDowntime=traits.includes("downtime"),x.showExploration=traits.includes("exploration")}),actionsToUse}__name(prepareActions,"prepareActions"),__name2(prepareActions,"prepareActions");async function basicActionMacros(){const bamActions=[{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.AdministerFirstAidStabilize`),skill:"Medicine",action:game.pf2e.actions.get("administer-first-aid")?.variants.get("stabilize"),icon:"systems/pf2e/icons/features/feats/treat-wounds.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.AdministerFirstAidStopBleeding`),skill:"Medicine",action:game.pf2e.actions.get("administer-first-aid")?.variants.get("stop-bleeding"),icon:"systems/pf2e/icons/conditions/persistent-damage.webp"},{actionType:"other",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.AidToggle`),skill:"",action:["macroEffectAid","xdy-pf2e-workbench.xdy-internal-utility-macros"],icon:"systems/pf2e/icons/spells/efficient-apport.webp"},{actionType:"other",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.AidASE`),skill:"",action:["Aid","pf2e-action-support-engine-macros.action-support-engine-macros"],module:"pf2e-action-support-engine",icon:"systems/pf2e/icons/spells/efficient-apport.webp"},{actionType:"other",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.AidPF2eMacros`),skill:"",action:options=>game.activemacros.aid(options.actors?.[0]),module:"pf2e-macros",icon:"systems/pf2e/icons/spells/efficient-apport.webp"},{actionType:"other",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.AvoidNotice`),skill:"Stealth",action:game.pf2e.actions.get("avoid-notice"),icon:"systems/pf2e/icons/features/classes/surprice-attack.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Balance`),skill:"Acrobatics",action:game.pf2e.actions.get("balance"),icon:"icons/skills/movement/feet-winged-boots-brown.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Climb`),skill:"Athletics",action:game.pf2e.actions.get("climb"),icon:"icons/sundries/misc/ladder.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Coerce`),skill:"Intimidation",action:game.pf2e.actions.get("coerce"),icon:"icons/skills/social/intimidation-impressing.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.CommandAnAnimal`),skill:"Nature",action:game.pf2e.actions.get("command-an-animal"),icon:"icons/environment/creatures/horse-white.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.ConcealAnObject`),skill:"Stealth",action:game.pf2e.actions.get("conceal-an-object"),icon:"systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Craft`),skill:"Crafting",action:game.pf2e.actions.craft,icon:"icons/skills/trades/smithing-anvil-silver-red.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.CreateForgery`),skill:"Society",action:game.pf2e.actions.get("create-forgery"),icon:"systems/pf2e/icons/spells/transcribe-moment.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.CreateADiversionDistractingWords`),skill:"Deception",action:game.pf2e.actions.get("create-a-diversion")?.variants.get("distracting-words"),icon:"icons/skills/social/wave-halt-stop.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.CreateADiversionGesture`),skill:"Deception",action:game.pf2e.actions.get("create-a-diversion")?.variants.get("gesture"),icon:"icons/skills/social/wave-halt-stop.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.CreateADiversionTrick`),skill:"Deception",action:game.pf2e.actions.get("create-a-diversion")?.variants.get("trick"),icon:"systems/pf2e/icons/spells/charming-words.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.DecipherWritingArcana`),skill:"Arcana",action:game.pf2e.actions.get("decipher-writing"),options:{statistic:"arcana"},icon:"icons/skills/trades/academics-book-study-runes.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.DecipherWritingOccultism`),skill:"Occultism",action:game.pf2e.actions.get("decipher-writing"),options:{statistic:"occultism"},icon:"icons/skills/trades/academics-book-study-purple.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.DecipherWritingReligion`),skill:"Religion",action:game.pf2e.actions.get("decipher-writing"),options:{statistic:"religion"},icon:"systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.DecipherWritingSociety`),skill:"Society",action:game.pf2e.actions.get("decipher-writing"),options:{statistic:"society"},icon:"icons/skills/trades/academics-study-reading-book.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Demoralize`),skill:"Intimidation",action:["XDY DO_NOT_IMPORT Demoralize","xdy-pf2e-workbench.asymonous-benefactor-macros-internal"],icon:"icons/skills/social/intimidation-impressing.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Disarm`),skill:"Athletics",action:game.pf2e.actions.get("disarm"),icon:"icons/skills/melee/sword-damaged-broken-glow-red.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.DisableDevice`),skill:"Thievery",action:game.pf2e.actions.get("disable-device"),icon:"systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Escape`),skill:"",action:game.pf2e.actions.get("escape"),icon:"icons/skills/movement/feet-winged-boots-glowing-yellow.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Feint`),skill:"Deception",action:game.pf2e.actions.get("feint"),icon:"icons/skills/melee/maneuver-sword-katana-yellow.webp"},{actionType:"other",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.FollowTheExpertToggle`),skill:"",action:followTheExpert,icon:"systems/pf2e/icons/spells/favorable-review.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.ForceOpen`),skill:"Athletics",action:game.pf2e.actions.get("force-open"),icon:"icons/equipment/feet/boots-armored-steel.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.GatherInformation`),skill:"Diplomacy",action:game.pf2e.actions.get("gather-information"),icon:"icons/skills/social/diplomacy-handshake.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Grapple`),skill:"Athletics",action:game.pf2e.actions.get("grapple"),icon:"icons/skills/melee/unarmed-punch-fist.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Hide`),skill:"Stealth",action:game.pf2e.actions.get("hide"),icon:"systems/pf2e/icons/features/classes/wild.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Impersonate`),skill:"Deception",action:game.pf2e.actions.get("impersonate"),icon:"icons/equipment/head/mask-carved-scream-tan.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.JumpHigh`),skill:"Athletics",action:game.pf2e.actions.get("high-jump"),icon:"icons/skills/movement/arrows-up-trio-red.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.JumpLong`),skill:"Athletics",action:game.pf2e.actions.get("long-jump"),icon:"icons/skills/movement/figure-running-gray.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Lie`),skill:"Deception",action:game.pf2e.actions.get("lie"),icon:"icons/magic/control/mouth-smile-deception-purple.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.MakeAnImpression`),skill:"Diplomacy",action:game.pf2e.actions.get("make-an-impression"),icon:"icons/environment/people/commoner.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.ManeuverInFlight`),skill:"Acrobatics",action:game.pf2e.actions.get("maneuver-in-flight"),icon:"icons/commodities/biological/wing-bird-white.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.PalmAnObject`),skill:"Thievery",action:game.pf2e.actions.get("palm-an-object"),icon:"icons/sundries/gaming/playing-cards.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Perform`),skill:"Performance",action:game.pf2e.actions.get("perform")?.variants.get("singing"),icon:"icons/skills/trades/music-singing-voice-blue.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.PickALock`),skill:"Thievery",action:game.pf2e.actions.get("pick-a-lock"),icon:"icons/skills/social/theft-pickpocket-bribery-brown.webp"},{actionType:"other",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.RaiseAShieldToggle`),skill:"",action:game.pf2e.actions.raiseAShield,icon:"systems/pf2e/icons/actions/raise-a-shield.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.RecallKnowledge`),skill:"",action:["XDY DO_NOT_IMPORT Recall_Knowledge","xdy-pf2e-workbench.asymonous-benefactor-macros-internal"],icon:"icons/skills/trades/academics-study-reading-book.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Repair`),skill:"Crafting",action:game.pf2e.actions.repair,icon:"icons/tools/smithing/anvil.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Reposition`),skill:"Athletics",action:game.pf2e.actions.get("reposition"),icon:"icons/sundries/gaming/chess-pawn-white-pink.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Request`),skill:"Diplomacy",action:game.pf2e.actions.get("request"),icon:"icons/skills/social/thumbsup-approval-like.webp"},{actionType:"basic",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Seek`),skill:"Perception",action:game.pf2e.actions.get("seek"),icon:"icons/tools/scribal/magnifying-glass.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.SenseDirection`),skill:"Survival",action:game.pf2e.actions.get("sense-direction"),icon:"icons/tools/navigation/compass-brass-blue-red.webp"},{actionType:"basic",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.SenseMotive`),skill:"Perception",action:game.pf2e.actions.get("sense-motive"),icon:"icons/environment/people/commoner.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Shove`),skill:"Athletics",action:game.pf2e.actions.get("shove"),icon:"systems/pf2e/icons/spells/hydraulic-push.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Sneak`),skill:"Stealth",action:game.pf2e.actions.get("sneak"),icon:"systems/pf2e/icons/conditions/unnoticed.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Squeeze`),skill:"Acrobatics",action:game.pf2e.actions.get("squeeze"),icon:"icons/commodities/tech/claw-mechanical.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Steal`),skill:"Thievery",action:game.pf2e.actions.get("steal"),icon:"icons/containers/bags/coinpouch-gold-red.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.SubsistSociety`),skill:"Society",action:game.pf2e.actions.get("subsist"),options:{statistic:"society"},icon:"icons/environment/settlement/building-rubble.webp"},{actionType:"basic",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.SubsistSurvival`),skill:"Survival",action:game.pf2e.actions.get("subsist"),options:{statistic:"survival"},icon:"icons/environment/wilderness/camp-improvised.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Swim`),skill:"Athletics",action:game.pf2e.actions.get("swim"),icon:"icons/creatures/fish/fish-shark-swimming.webp"},{actionType:"other",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.TakeCoverToggle`),skill:"",action:game.pf2e.actions.get("take-cover"),icon:"systems/pf2e/icons/equipment/shields/tower-shield.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Track`),skill:"Survival",action:game.pf2e.actions.get("track"),icon:"systems/pf2e/icons/conditions/observed.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.TreatDisease`),skill:"Medicine",action:game.pf2e.actions.get("treat-disease"),icon:"icons/magic/nature/root-vine-caduceus-healing.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.TreatPoison`),skill:"Medicine",action:game.pf2e.actions.get("treat-poison"),icon:"systems/pf2e/icons/effects/treat-poison.webp"},{actionType:"skill_trained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.TreatWounds`),skill:"Medicine",altSkillAndFeat:[{skill:"Nature",feat:"natural-medicine"},{skill:"Crafting",feat:"chirurgeon"}],action:["XDY DO_NOT_IMPORT Treat Wounds and Battle Medicine","xdy-pf2e-workbench.asymonous-benefactor-macros-internal"],icon:"icons/skills/wounds/injury-stapled-flesh-tan.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.Trip`),skill:"Athletics",action:game.pf2e.actions.get("trip"),icon:"icons/skills/wounds/bone-broken-marrow-yellow.webp"},{actionType:"skill_untrained",name:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.actions.TumbleThrough`),skill:"Acrobatics",action:game.pf2e.actions.get("tumble-through"),icon:"icons/skills/movement/feet-winged-sandals-tan.webp"}],actionDialog=window.actionDialog;if(actionDialog?.rendered)return actionDialog.close();const controlled=canvas.tokens.controlled.flatMap(token=>token.actor??[]);controlled.length===0&&game.user.character&&controlled.push(game.user.character);const selectedActor=controlled[0],supportedActorTypes=["character","npc","familiar"];if(!selectedActor||!supportedActorTypes.includes(selectedActor.type))return ui.notifications.warn(game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.noActorSelected`));const actionsToUse=prepareActions(selectedActor,bamActions),actors=game?.scenes?.current?.tokens.map(actor=>actor.actor).filter(actor=>supportedActorTypes.includes(actor?.type??"unknown"))||[],party=game.actors?.party?.members||[],partyIds=party.map(actor=>actor.id)||[],allActorsSkills=createMapOfSkillsPerActor(actors);if(partyIds.includes(selectedActor.id)){const partySkills=createMapOfSkillsPerActor(party);getBestBonuses(partySkills,partyIds,actionsToUse)}const width=26+(1+~~((actionsToUse.length-1)/14))*250,tabView=game.settings.get(MODULENAME,"bamTabview"),selectedActorSkills=allActorsSkills.get(selectedActor.id)??{},data=actionsToUse.map((action,idx)=>createButtonData(action,idx,selectedActor,partyIds,selectedActorSkills)),filteredData={encounter:data.filter(value=>!(value.action.showDowntime||value.action.showExploration)),downtime:data.filter(value=>value.action.showDowntime),exploration:data.filter(value=>value.action.showExploration),tabView},content=await renderTemplate("modules/xdy-pf2e-workbench/templates/macros/bam/index.hbs",filteredData);window.actionDialog=new Dialog({title:game.i18n.format(`${MODULENAME}.macros.basicActionMacros.title`,{name:selectedActor.name}),content,buttons:{close:{icon:'<i class="fas fa-times"></i>',label:game.i18n.localize(`${MODULENAME}.macros.basicActionMacros.cancel`)}},default:"close",render:html=>{const action=__name2((button,event2)=>{const action2=actionsToUse[button.dataset.action],current=action2.action;if(Array.isArray(current)){const macroName=current[0],compendiumName=current[1],pack=game.packs.get(compendiumName);pack?pack.getDocuments().then(documents=>{const macro_data=documents.find(i=>i._source.name===macroName)?.toObject();macro_data?new Macro(macro_data).execute(event2):ui.notifications.error(game.i18n.format(`${MODULENAME}.macros.basicActionMacros.macroNotFound`,{macroName}))}):ui.notifications.error(game.i18n.format(`${MODULENAME}.macros.basicActionMacros.compendiumNotFound`,{compendiumName}))}else if(typeof current=="object"){const mapValue=button.dataset.map&&button.dataset.map!=="0"?-(Number.parseInt(button.dataset.map)/5):0;current.use({event:event2,multipleAttackPenalty:mapValue,skipDialog:event2.skipDialog,...action2.options}).then()}else{const skills=getSkills(selectedActor,action2.skill),variant=button.dataset.map&&button.dataset.map!=="0"?getMapVariant(skills[0],{},Number.parseInt(button.dataset.map)):null;variant?action2.action({event:event2,actors:[selectedActor],modifiers:variant?.modifiers,...variant?.extra}):action2.action({event:event2,actors:[selectedActor],skill:action2.skill.toLocaleLowerCase()})}},"action");if("querySelectorAll"in html){for(const button of html.querySelectorAll(".action-list button"))button.addEventListener("click",event2=>action(button,event2));for(const tabButton of html.querySelectorAll("a.item"))tabButton.addEventListener("click",()=>{if(tabView){for(const active of html.querySelectorAll(".active"))active.classList.remove("active");for(const active of html.querySelectorAll(`[data-tab=${tabButton.dataset.tab}]`))active.classList.add("active")}else for(const tab of html.querySelectorAll(".bam-body .tab"))tab.dataset.tab===tabButton.dataset.tab&&tab.classList.toggle("active")})}}},{jQuery:!1,classes:["pf2e-bg","bam-dialog"],width,popOut:!0,resizable:!0}).render(!0)}__name(basicActionMacros,"basicActionMacros"),__name2(basicActionMacros,"basicActionMacros");function getSkills(selectedActor,proficiencyKey){const skills=selectedActor.skills;return skills?proficiencyKey==="lore"?Object.values(skills).filter(skill=>skill!==void 0&&skill.lore):[skills[proficiencyKey]].filter(s=>!!s):[]}__name(getSkills,"getSkills"),__name2(getSkills,"getSkills");function getMapVariant(skill,extra,map){const modifier=new game.pf2e.Modifier({label:game.i18n.localize("PF2E.MultipleAttackPenalty"),modifier:map,type:"untyped"}),label=game.i18n.format("PF2E.MAPAbbreviationLabel",{penalty:map});return new Variant(label,skill,extra,[modifier])}__name(getMapVariant,"getMapVariant"),__name2(getMapVariant,"getMapVariant");class Variant{static{__name(this,"Variant")}static{__name2(this,"Variant")}label;skill;extra;modifiers;assuranceTotal;constructor(label,skill,extra,modifiers=[],assuranceTotal=0){this.label=label,this.skill=skill,this.extra=extra,this.modifiers=modifiers,this.assuranceTotal=assuranceTotal}}async function buildNpcSpellbookJournal(){const activeWindow=ui.activeWindow;let actor;if(activeWindow?.constructor.name==="NPCSheetPF2e")actor=activeWindow.token?.actor||activeWindow.actor;else{const actors=canvas.tokens.controlled.map(a=>a.actor).filter(a=>a?.isOfType("npc"));actors?.length===1&&(actor=actors[0])}const spellcastingEntries=actor?.spellcasting?.contents?.filter(item=>item.spells),length=spellcastingEntries?.length;if(!actor||length===0){ui.notifications.warn(game.i18n.localize(`${MODULENAME}.macros.buildNpcSpellbookJournal.noSpellcastingEntry`));return}const spellList=[];for(let i=0;i<length;i++){spellList[i]={entry:spellcastingEntries[i].name,spells:[]};for(let ii=0;ii<spellcastingEntries[i]?.spells?.contents?.length;ii++)spellList[i].spells.push("@UUID["+spellcastingEntries[i].spells.contents[ii].sourceId+"]")}const updates={name:game.i18n.format(`${MODULENAME}.macros.buildNpcSpellbookJournal.generatedSpellbookFor`,{name:actor.name}),content:`<table class="pf2-table">
    <tr>
       <th>Entry</th>
       <th>Spells</th>
    </tr>`};for(let ff=0;ff<spellList.length;ff++)updates.content+=`
    <tr>
        <td>${spellList[ff].entry}</td>
        <td><div style="display: flex; gap:3px; flex-wrap: wrap; align-items: center;justify-content: center;">${spellList[ff].spells}</div></td>
</tr>
`;updates.content+="</table>";const journal=game.journal.getName(updates.name);journal&&await journal.delete(),await JournalEntry.create(updates)}__name(buildNpcSpellbookJournal,"buildNpcSpellbookJournal"),__name2(buildNpcSpellbookJournal,"buildNpcSpellbookJournal");function actionsReminder(combatant,reduction=0){const actor=combatant.actor;if(actor&&shouldIHandleThis(actor)&&shouldShowActionReminder(actor,reduction)){const actionsMessage=`${combatant.token?.name} has ${Math.max(calculateMaxActions(actor)-Math.max(actor.getCondition("stunned")?.value??0,actor.getCondition("slowed")?.value??0,reduction),0)} actions remaining.`;ChatMessage.create({flavor:actionsMessage,whisper:actor?.hasPlayerOwner?[]:ChatMessage.getWhisperRecipients("GM").map(u=>u.id)},{}).then(),ui.notifications.info(actionsMessage)}}__name(actionsReminder,"actionsReminder"),__name2(actionsReminder,"actionsReminder");function shouldShowActionReminder(actor,reduction){const reminderAllowSetting=String(game.settings.get(MODULENAME,"actionsReminderAllow")),showForPC=["all","players"].includes(reminderAllowSetting)&&actor?.hasPlayerOwner,showForNPC=["all","gm"].includes(reminderAllowSetting)&&!actor?.hasPlayerOwner;return(showForPC||showForNPC)&&hasConditionOrReduction(actor,reduction)}__name(shouldShowActionReminder,"shouldShowActionReminder"),__name2(shouldShowActionReminder,"shouldShowActionReminder");function hasConditionOrReduction(actor,reduction){return actor.hasCondition("stunned","slowed","quickened")||reduction>0}__name(hasConditionOrReduction,"hasConditionOrReduction"),__name2(hasConditionOrReduction,"hasConditionOrReduction");function calculateMaxActions(actor){return actor.traits?.has("minion")?2:3+(actor.hasCondition("quickened")?1:0)}__name(calculateMaxActions,"calculateMaxActions"),__name2(calculateMaxActions,"calculateMaxActions");async function autoReduceStunned(combatant,userId){if(!combatant?.actor||userId!==game.user.id&&!shouldIHandleThis(combatant?.actor))return 0;let stunReduction=0;const actors=[combatant?.actor,...minionsInCurrentScene(combatant?.actor)];for(const actor of actors){const stunned=actor.getCondition("stunned")?.value??0;if(stunned){stunReduction=Math.min(stunned,calculateMaxActions(actor));for(let i=0;i<stunReduction;i++)await actor?.decreaseCondition("stunned")}}return stunReduction}__name(autoReduceStunned,"autoReduceStunned"),__name2(autoReduceStunned,"autoReduceStunned");function reminderTargeting(message,setting){const context=message?.flags?.pf2e?.context??{};if(message.actor&&shouldIHandleThis(message.actor)&&message.flags&&message.user&&["spell-attack-roll","attack-roll"].includes(context.type)){const targets=message.user.targets;if(!targets||targets.size===0){const title=context.title;if(setting==="reminder"){const info=game.i18n.format(`${MODULENAME}.SETTINGS.reminderTargeting.info`,{title});ui.notifications.info(info)}else if(setting==="mustTarget"){const error=game.i18n.format(`${MODULENAME}.SETTINGS.reminderTargeting.error`,{title});return ui.notifications.error(error),!1}}}return!0}__name(reminderTargeting,"reminderTargeting"),__name2(reminderTargeting,"reminderTargeting");function chatCardDescriptionCollapse(html){const hasCardContent=html.querySelectorAll(".card-content");if(hasCardContent.length>0){const effectItem=game.i18n.localize(`${MODULENAME}.effectItem`);if(String(game.settings.get(MODULENAME,"autoCollapseItemChatCardContent"))==="collapsedDefault"){hasCardContent.forEach(content=>content.style.display="none");const cardContentSiblings=hasCardContent[0].parentElement?.children;if(cardContentSiblings?.[0]&&cardContentSiblings[0].insertAdjacentHTML("beforeend",eye),game.settings.get(MODULENAME,"autoCollapseItemChatCardMoveEffectLinks")){const linksToMove=[],pTags=Array.from(html.getElementsByTagName("p"));for(const pTag of pTags){const contentLink=pTag.querySelector("a.content-link");contentLink&&contentLink?.getAttribute("data-tooltip")?.includes(effectItem)&&linksToMove.push(pTag)}const chatMessageContainer=html.closest(".chat-message");chatMessageContainer&&linksToMove.length>0&&(linksToMove[0].classList.add("item-block-line"),chatMessageContainer.append(...linksToMove))}}}html.addEventListener("click",event2=>{const target=event2.target.closest("h3");if(target){const content=target.closest(".chat-message")?.querySelector(".card-content");content&&(event2.preventDefault(),content.style.display=content.style.display==="none"?"block":"none",content.style.display==="none"&&hasCardContent.forEach(content2=>content2.style.display="none"),toggleEyes(html))}})}__name(chatCardDescriptionCollapse,"chatCardDescriptionCollapse"),__name2(chatCardDescriptionCollapse,"chatCardDescriptionCollapse");function toggleEyes(html){const hasEye=html.querySelectorAll(".fa-eye"),hasEyeSlash=html.querySelectorAll(".fa-eye-slash");for(const eye2 of Array.from(hasEye))eye2.classList.toggle("fa-eye-slash"),eye2.classList.toggle("fa-eye");for(const eye2 of Array.from(hasEyeSlash))eye2.classList.toggle("fa-eye-slash"),eye2.classList.toggle("fa-eye")}__name(toggleEyes,"toggleEyes"),__name2(toggleEyes,"toggleEyes");function handleRollNoteToggling(html){let note;const hasNote=html.querySelectorAll(".roll-note");for(note of Array.from(hasNote))note.style.display=note.style.display==="none"?"block":"none";toggleEyes(html)}__name(handleRollNoteToggling,"handleRollNoteToggling"),__name2(handleRollNoteToggling,"handleRollNoteToggling");function chatActionCardDescriptionCollapse(html){const hasAction=html.querySelectorAll(".action");if(hasAction.length>0){const rollNotes=html.querySelectorAll(".roll-note");if(rollNotes.length>0){if(String(game.settings.get(MODULENAME,"autoCollapseItemActionChatCardContent"))==="collapsedDefault"){for(const note of Array.from(rollNotes))note.style.display="none";const actionSiblings=hasAction[0].parentElement?.children;actionSiblings?.[1]&&actionSiblings[1].insertAdjacentHTML("beforeend",eye)}html.addEventListener("click",event2=>{event2.target?.matches("h4.action, .fa-eye, .fa-eye-slash, strong")&&(event2.preventDefault(),handleRollNoteToggling(html))})}}}__name(chatActionCardDescriptionCollapse,"chatActionCardDescriptionCollapse"),__name2(chatActionCardDescriptionCollapse,"chatActionCardDescriptionCollapse");const eye=' <i style="font-size: small; max-width: min-content" class="fa-solid fa-eye-slash">';function chatAttackCardDescriptionCollapse(html){const hasRollNote=html.querySelectorAll(".roll-note");if(hasRollNote.length>0){if(String(game.settings.get(MODULENAME,"autoCollapseItemAttackChatCardContent"))==="collapsedDefault"){for(const note of hasRollNote)note.style.display="none";hasRollNote[0].parentNode?.parentNode?.children[0].insertAdjacentHTML("beforeend",eye)}html.addEventListener("click",event2=>{event2.target.matches("h4.action, .fa-eye, .fa-eye-slash, strong")&&(event2.preventDefault(),handleRollNoteToggling(html))})}}__name(chatAttackCardDescriptionCollapse,"chatAttackCardDescriptionCollapse"),__name2(chatAttackCardDescriptionCollapse,"chatAttackCardDescriptionCollapse");function damageCardExpand(message,html,expandDmg){const diceTooltips=html.querySelectorAll(".dice-tooltip");expandDmg==="expandedAll"?diceTooltips.forEach(diceTooltip=>diceTooltip.style.display="block"):expandDmg.startsWith("expandedNew")&&game.messages.contents.filter(isActuallyDamageRoll).slice(-Math.min(expandDmg.endsWith("est")?1:3,game.messages.size)).filter(m=>m.id===message.id).length>0&&diceTooltips.forEach(diceTooltip=>diceTooltip.style.display="block")}__name(damageCardExpand,"damageCardExpand"),__name2(damageCardExpand,"damageCardExpand");async function mystifyNpcItems(actor,minimumRarity=String(game.settings.get(MODULENAME,"npcMystifyAllPhysicalMagicalItemsOfThisRarityOrGreater")),usingPartyLevel=game.settings.get(MODULENAME,"npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterUsingPartyLevel"),minimumLevel=Number.parseInt(String(game.settings.get(MODULENAME,"npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreater")))??-1,multiplier=Number.parseFloat(String(game.settings.get(MODULENAME,"npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreaterMultiplier")))){usingPartyLevel&&game.settings.set(MODULENAME,"npcMystifyAllPhysicalMagicalItemsOfThisLevelOrGreater",game?.actors?.party?.level??minimumLevel),multiplier!==1&&minimumLevel!==-1&&(minimumLevel=minimumLevel*multiplier);const itemUpdates=[],rarityKeys=Object.keys(CONFIG.PF2E.rarityTraits);if(!actor||!actor.items)return;const relevantItems=Array.from(actor.items?.filter(item=>["armor","shield","consumable","backpack","book","equipment","treasure","weapon"].includes(item.type)).map(item=>item).filter(item=>item.isIdentified).filter(item=>!item.isTemporary).filter(item=>item.level>=minimumLevel).filter(item=>rarityKeys.indexOf(item.rarity)>=rarityKeys.indexOf(minimumRarity)).filter(item=>item.isMagical||item.isAlchemical));for(const item of relevantItems??[])itemUpdates.push({_id:item.id,"system.identification.status":"unidentified","system.identification.unidentified":item.getMystifiedData("unidentified")});await actor.updateEmbeddedDocuments("Item",itemUpdates)}__name(mystifyNpcItems,"mystifyNpcItems"),__name2(mystifyNpcItems,"mystifyNpcItems");async function autoRollDamage(message){const settings={autoRollDamageAllow:String(game.settings.get(MODULENAME,"autoRollDamageAllow")),autoRollDamageForStrike:game.settings.get(MODULENAME,"autoRollDamageForStrike"),autoRollDamageForSpellAttack:game.settings.get(MODULENAME,"autoRollDamageForSpellAttack"),autoRollDamageForSpellWhenNotAnAttack:game.settings.get(MODULENAME,"autoRollDamageForSpellWhenNotAnAttack")};if(shouldIHandleThisMessage(message,["all","players"].includes(settings.autoRollDamageAllow),["all","gm"].includes(settings.autoRollDamageAllow))){const pf2eFlags=message.flags.pf2e,originUuid=pf2eFlags?.origin?.uuid;if(originUuid){const messageToken=canvas?.scene?.tokens.get(message.speaker.token),actor=messageToken?.actor?messageToken?.actor:game.actors?.get(message.speaker.actor),rollType=pf2eFlags.context?.type,origin=originUuid?await fromUuid(originUuid):null,isAttackSpell=origin?.traits?.has("attack")??!1,isSaveSpell=origin?.system?.defense?.save??!1,hasFixedTime=Number.isInteger(parseInt(origin?.system?.time?.value))??!1,rollForNonSpellAttack=rollType==="attack-roll"&&settings.autoRollDamageForStrike,rollForNonAttackSpell=origin!==null&&!isAttackSpell&&pf2eFlags.casting!==null&&hasFixedTime&&origin?.system?.damage,rollForNonAttackSaveSpell=isSaveSpell&&rollForNonAttackSpell&&(settings.autoRollDamageForSpellWhenNotAnAttack==="saveSpell"||settings.autoRollDamageForSpellWhenNotAnAttack==="anySpell"),rollForNonAttackNonSaveSpell=!isSaveSpell&&rollForNonAttackSpell&&(settings.autoRollDamageForSpellWhenNotAnAttack==="nonSaveSpell"||settings.autoRollDamageForSpellWhenNotAnAttack==="anySpell"),rollForAttackSpell=isAttackSpell&&settings.autoRollDamageForSpellAttack&&hasFixedTime,degreeOfSuccess=degreeOfSuccessWithRerollHandling(message),isFailure=["criticalFailure","failure"].includes(degreeOfSuccess),isSuccess=["criticalSuccess","success"].includes(degreeOfSuccess),isBasicSave=pf2eFlags.context?.options?.includes("item:defense:basic"),flags=(await getLatestChatMessageWithOrigin(5,originUuid))?.flags,targetHelperWillAutoroll=game.modules.get("pf2e-target-helper")?.active&&game.settings.get("pf2e-target-helper","multipleTargetRollDamage")!=="no",letTargetHelperAutorollDamage=(flags["pf2e-target-helper"]?.targets??0)>1&&targetHelperWillAutoroll;actor&&(rollForNonAttackNonSaveSpell||rollForNonAttackSaveSpell&&(isFailure||isBasicSave&&degreeOfSuccess==="success")||rollForAttackSpell&&isSuccess)&&!letTargetHelperAutorollDamage?await handleSpell(pf2eFlags,10,originUuid,origin,message,degreeOfSuccess):actor&&rollForNonSpellAttack&&isSuccess&&await handleNonSpell(actor,message,degreeOfSuccess)}}}__name(autoRollDamage,"autoRollDamage"),__name2(autoRollDamage,"autoRollDamage");async function noOrSuccessfulFlatcheck(message){let rollDamage=!0;if(game.modules.get("pf2-flat-check")?.active){const actorFlat=message.actor?.itemTypes.condition.filter(x=>["blinded","dazzled"].includes(x.slug))??[],targetFlat=message.target?.actor.itemTypes.condition.filter(x=>["concealed","hidden","invisible","undetected"].includes(x.slug))??[];if(actorFlat?.length>0||targetFlat?.length>0){const{token,actor}=message;let{item}=message;const match=message.flags.pf2e?.origin?.uuid?.match(/Item.(\w+)/);if(!item&&match&&match[1]==="xxPF2ExUNARMEDxx"&&(item={type:"weapon",data:{}}),token&&item&&actor&&!isActuallyDamageRoll(message)){await new Promise(resolve=>setTimeout(resolve,150));const array=Array.from(game.messages),messageIndex=array.findIndex(msg=>msg.id===message.id);messageIndex>-1&&(rollDamage=!array.slice(messageIndex).reverse().find(msg=>msg.content.includes("dice-result flat-check-failure")))}}else return rollDamage}return rollDamage}__name(noOrSuccessfulFlatcheck,"noOrSuccessfulFlatcheck"),__name2(noOrSuccessfulFlatcheck,"noOrSuccessfulFlatcheck");function persistentDamage(message){const flavor=message.flavor,persistentFlavor=flavor?.includes("<strong>"+game.i18n.localize("PF2E.ConditionTypePersistent"));if(shouldIHandleThisMessage(message,["all","players"].includes(String(game.settings.get(MODULENAME,"applyPersistentAllow"))),["all","gm"].includes(String(game.settings.get(MODULENAME,"applyPersistentAllow"))))&&flavor&&persistentFlavor&&message.speaker.token&&message.rolls&&message.rolls.length>0&&message.id===game.messages.contents.pop()?.id&&game.actors&&(message.getFlag(MODULENAME,"persistentHandled")??!0)){const token=canvas.tokens?.get(message.speaker.token);token&&token.isOwner&&token?.actor?.applyDamage({damage:message.rolls[0],token:token.document}).then(()=>message.setFlag(MODULENAME,"persistentHandled",!0).then());const actor=token?.actor;if(actor&&game.settings.get(MODULENAME,"applyPersistentDamageRecoveryRoll")){const condition=actor.conditions.filter(condition2=>condition2.slug==="persistent-damage").find(condition2=>flavor.includes(condition2.name));condition&&condition.rollRecovery().then()}}}__name(persistentDamage,"persistentDamage"),__name2(persistentDamage,"persistentDamage");function persistentHealing(message,enabled){if(enabled&&shouldIHandleThisMessage(message,["all","players"].includes(String(game.settings.get(MODULENAME,"applyPersistentAllow"))),["all","gm"].includes(String(game.settings.get(MODULENAME,"applyPersistentAllow"))))&&message.flavor&&message.rolls&&game.combats&&game.combats.active&&game.combats.active.combatant&&game.combats.active.combatant.actor&&message.id===game.messages.contents.pop()?.id&&(message.getFlag(MODULENAME,"persistentHandled")??!0)){const token=game.combats.active.combatant.token;if(token&&token.isOwner){const fastHealingLabel=game.i18n.localize(`${MODULENAME}.SETTINGS.applyPersistentHealing.FastHealingLabel`),regenerationLabel=game.i18n.localize(`${MODULENAME}.SETTINGS.applyPersistentHealing.RegenerationLabel`);if([fastHealingLabel,regenerationLabel].some(text=>message.flavor?.includes(text))){const healing=message.rolls.reduce((sum,current)=>sum+(current.total||1),0)*-1;token.actor?.applyDamage({damage:healing,token:token.actor?.getActiveTokens()[0].document}).then(()=>message.setFlag(MODULENAME,"persistentHandled",!0).then())}}}}__name(persistentHealing,"persistentHealing"),__name2(persistentHealing,"persistentHealing");function getActionFromMessage(actions,message){const attackAbilities=actions.filter(atk=>atk?.system?.traits.value.includes("attack")).filter(atk=>atk.id===message.item?.id),strikes=message.actor?.system?.actions?.filter(atk=>atk?.type==="strike").filter(atk=>atk?.item?.id===message.item?.id),allAttacks=attackAbilities.concat(strikes);if(allAttacks.length===1)return allAttacks[0];if(allAttacks.length>1&&strikes&&strikes?.length>1){const s=`<h4 class="action">(.*?)${game.i18n.localize(`${MODULENAME}.SETTINGS.autoRollDamageForStrike.strike`)}: (.*?)<`,strikeName=message.flavor?.match(s);return strikeName&&strikeName[2]?actions.find(a=>a.label===strikeName[2]):null}else return null}__name(getActionFromMessage,"getActionFromMessage"),__name2(getActionFromMessage,"getActionFromMessage");async function getLatestChatMessageWithOrigin(numberOfMessagesToCheck,originUuid){const chatLength=game.messages?.contents.length??0;for(let i=1;i<=Math.min(numberOfMessagesToCheck+1,chatLength);i++){const spellMessage=game.messages?.contents[chatLength-i];if(spellMessage&&spellMessage.flags.pf2e.origin?.uuid===originUuid)return spellMessage}}__name(getLatestChatMessageWithOrigin,"getLatestChatMessageWithOrigin"),__name2(getLatestChatMessageWithOrigin,"getLatestChatMessageWithOrigin");async function getCastRankFromChat(numberOfMessagesToCheck,originUuid){const level=(await getLatestChatMessageWithOrigin(numberOfMessagesToCheck,originUuid))?.content.match(/data-cast-level="(\d+)"/);return level&&level[1]?parseInt(level[1]):0}__name(getCastRankFromChat,"getCastRankFromChat"),__name2(getCastRankFromChat,"getCastRankFromChat");async function handleSpell(flags,numberOfMessagesToCheck,originUuid,origin,message,degreeOfSuccess){const castRank=await determineCastRank(origin.name,flags,numberOfMessagesToCheck,originUuid,origin.system);let blind=determineBlindStatus(message);if(await noOrSuccessfulFlatcheck(message)){const target=constructTargetElement(castRank);blind&&game.settings.get(MODULENAME,"castPrivateSpellHideName")&&(blind=!1),message.flags?.pf2e?.origin?.variant?.overlays?.length>0?await origin.loadVariant({castRank,overlayIds:[message.flags.pf2e.origin.variant.overlays[0]]}).rollDamage({outcome:degreeOfSuccess,target,ctrlKey:blind}):await origin?.rollDamage({outcome:degreeOfSuccess,target,ctrlKey:blind})}}__name(handleSpell,"handleSpell"),__name2(handleSpell,"handleSpell");async function determineCastRank(spellName,flags,numberOfMessagesToCheck,originUuid,system){let castRank=flags.origin?.castRank?Number(flags.origin?.castRank):0;return castRank===0&&(castRank=await getCastRankFromChat(numberOfMessagesToCheck,originUuid)),castRank===0&&(game.settings.get(MODULENAME,"autoRollDamageNotifyOnSpellCardNotFound")&&ui.notifications.info(game.i18n.format(`${MODULENAME}.spellCardNotFound`,{spell:spellName})),castRank=system.level.value??0),castRank}__name(determineCastRank,"determineCastRank"),__name2(determineCastRank,"determineCastRank");function determineBlindStatus(message){const originalRollMode=game.settings.get("core","rollMode");return((message?.type===CONST.CHAT_MESSAGE_TYPES.WHISPER||message?.blind||message?.whisper&&message?.whisper.length>0)&&originalRollMode!==CONST.DICE_ROLL_MODES.PRIVATE)??!1}__name(determineBlindStatus,"determineBlindStatus"),__name2(determineBlindStatus,"determineBlindStatus");function constructTargetElement(castRank){const target=document.createElement("div");return target.dataset.castRank=castRank.toString(),target.closest=()=>({dataset:{castRank}}),target}__name(constructTargetElement,"constructTargetElement"),__name2(constructTargetElement,"constructTargetElement");async function handleNonSpell(actor,message,degreeOfSuccess){const options=actor?.getRollOptions(["all","damage-roll"]),damageOption=options?.find(option=>option.match(/(.*)-attack/))?.replace("-attack","-damage");options?.push(damageOption);const checkContext=message.flags.pf2e.context??null,mapIncreases=checkContext&&"mapIncreases"in checkContext&&[0,1,2].includes(checkContext.mapIncreases)?checkContext.mapIncreases:null,altUsage=checkContext&&"altUsage"in checkContext?checkContext.altUsage:null,target=message.target?.token?.object??null,actions=actor?.system?.actions;if(!actions||actions.length===0||!await noOrSuccessfulFlatcheck(message))return;const toRoll=getActionFromMessage(actions,message);if(toRoll&&toRoll.type==="strike")return toRoll[degreeOfSuccess==="success"?"damage":"critical"]?.({event,altUsage,mapIncreases,checkContext,target,options});await handleElementalBlastAttack(actor,message,degreeOfSuccess,checkContext)}__name(handleNonSpell,"handleNonSpell"),__name2(handleNonSpell,"handleNonSpell");async function handleElementalBlastAttack(actor,message,degreeOfSuccess,checkContext){const roll=message.rolls.find(r=>r.options?.action==="elemental-blast");if(roll&&actor.isOfType("character")){const identifier=roll?.options.identifier,[element,damageType,meleeOrRanged,actionCost]=identifier?.split(".")??[];if(objectHasKey(CONFIG.PF2E.elementTraits,element)&&objectHasKey(CONFIG.PF2E.damageTypes,damageType)){const params={element,damageType,melee:meleeOrRanged==="melee",actionCost:Number(actionCost)||1,checkContext,outcome:degreeOfSuccess,event};await new game.pf2e.ElementalBlast(actor).damage(params)}}}__name(handleElementalBlastAttack,"handleElementalBlastAttack"),__name2(handleElementalBlastAttack,"handleElementalBlastAttack");async function reduceFrightened(combatant,userId){if(!combatant||!combatant.actor||userId!==game.user.id&&!shouldIHandleThis(combatant.actor))return;const actors=[combatant.actor,...minionsInCurrentScene(combatant.actor)];for(const actor of actors){const minimumFrightened=actor?.getFlag(MODULENAME,"condition.frightened.min")??0,frightened=actor.getCondition("frightened"),currentFrightened=frightened?.value??0;if(frightened&&currentFrightened>0&&!frightened.isLocked){const reduceBy=actor.itemTypes.feat.some(feat=>feat.slug==="dwarven-doughtiness")?2:1;for(let i=0;i<reduceBy&&currentFrightened-i>minimumFrightened;i++)await actor.decreaseCondition("frightened")}}}__name(reduceFrightened,"reduceFrightened"),__name2(reduceFrightened,"reduceFrightened");function dyingHandlingPreUpdateActorHook(actor,update,currentActorHp,updateHp,autoGainDying){const automaticMove=String(game.settings.get(MODULENAME,"enableAutomaticMove")),automoveIfZeroHP=game.combat&&(automaticMove==="reaching0HPCharactersOnly"&&actor.type===CHARACTER_TYPE||automaticMove==="reaching0HP"&&[CHARACTER_TYPE,NPC_TYPE].includes(actor.type)),autoRemoveDying=String(game.settings.get(MODULENAME,"autoRemoveDyingAtGreaterThanZeroHP")),autoRemoveUnconscious=String(game.settings.get(MODULENAME,"autoRemoveUnconsciousAtGreaterThanZeroHP"));autoGainDying&&!autoGainDying.startsWith("no")?handleDyingOnZeroHP(actor,foundry.utils.deepClone(update),currentActorHp,updateHp,autoGainDying).then(hpRaisedAbove0=>{logDebug("Workbench increaseDyingOnZeroHP complete"),hpRaisedAbove0?autoRemoveDying&&!autoRemoveDying.startsWith("no")?new Promise(resolve=>setTimeout(resolve,250)).then(()=>{autoRemoveDyingAtGreaterThanZeroHp(actor,currentActorHp<=0&&hpRaisedAbove0,autoRemoveDying).then(()=>{logDebug("Workbench autoRemoveDyingAtGreaterThanZeroHP complete"),autoRemoveUnconscious&&autoRemoveUnconsciousAtGreaterThanZeroHP(actor,currentActorHp<=0&&hpRaisedAbove0).then()})}):autoRemoveUnconscious&&autoRemoveUnconsciousAtGreaterThanZeroHP(actor,currentActorHp<=0&&hpRaisedAbove0).then():automoveIfZeroHP&&currentActorHp>0&&updateHp<=0&&moveOnZeroHP(actor)}):currentActorHp<=0&&updateHp>0?autoRemoveDying&&!autoRemoveDying.startsWith("no")?autoRemoveDyingAtGreaterThanZeroHp(actor,currentActorHp<=0,autoRemoveDying).then(()=>{autoRemoveUnconscious&&autoRemoveUnconsciousAtGreaterThanZeroHP(actor,currentActorHp<=0).then()}):autoRemoveUnconscious&&autoRemoveUnconsciousAtGreaterThanZeroHP(actor,currentActorHp<=0).then():automoveIfZeroHP&&currentActorHp>0&&updateHp<=0&&moveOnZeroHP(actor)}__name(dyingHandlingPreUpdateActorHook,"dyingHandlingPreUpdateActorHook"),__name2(dyingHandlingPreUpdateActorHook,"dyingHandlingPreUpdateActorHook");async function itemHandlingItemHook(item){isFirstGM()&&item.slug==="dying"&&item.parent&&handleDying(0,0,item.parent,!1);const giveWounded=game.settings.get(MODULENAME,"giveWoundedWhenDyingRemoved"),giveUnconscious=game.settings.get(MODULENAME,"giveUnconsciousIfDyingRemovedAt0HP");(giveWounded||giveUnconscious)&&(giveWounded?giveWoundedWhenDyingRemoved(item).then(()=>{logDebug("Workbench giveWoundedWhenDyingRemoved complete"),giveUnconscious&&giveUnconsciousIfDyingRemovedAt0HP(item).then(()=>{logDebug("Workbench giveUnconsciousIfDyingRemovedAt0HP complete")})}):giveUnconscious&&await giveUnconsciousIfDyingRemovedAt0HP(item))}__name(itemHandlingItemHook,"itemHandlingItemHook"),__name2(itemHandlingItemHook,"itemHandlingItemHook");function handleDyingRecoveryRoll(message,enabled){const flavor=message.flavor,token=message.token;if(enabled&&shouldIHandleThisMessage(message,["all","players"].includes(String(game.settings.get(MODULENAME,"handleDyingRecoveryRollAllow"))),["all","gm"].includes(String(game.settings.get(MODULENAME,"handleDyingRecoveryRollAllow"))))&&(flavor.includes(game.i18n.localize("PF2E.Recovery.critFailure"))||flavor.includes(game.i18n.localize("PF2E.Recovery.critSuccess"))||flavor.includes(game.i18n.localize("PF2E.Recovery.failure"))||flavor.includes(game.i18n.localize("PF2E.Recovery.success")))&&message.id===game.messages.contents.pop()?.id&&token&&token.actor&&token.isOwner){const outcome=message.flags?.pf2e?.context?.outcome??"",messageToken=canvas?.scene?.tokens.get(message.speaker.token),actor=messageToken?.actor?messageToken?.actor:game.actors?.get(message.speaker.actor),originalDyingCounter=token.actor?.getCondition("dying")?.value??0;let dyingCounter=0,outcomeString="";switch(outcome){case"criticalFailure":dyingCounter=dyingCounter+2,outcomeString=game.i18n.localize("PF2E.CritFailure");break;case"criticalSuccess":dyingCounter=dyingCounter-2,outcomeString=game.i18n.localize("PF2E.CritSuccess");break;case"failure":dyingCounter=dyingCounter+1,outcomeString=game.i18n.localize("PF2E.Failure");break;case"success":outcomeString=game.i18n.localize("PF2E.Success"),dyingCounter=dyingCounter-1;break}if(originalDyingCounter>0||dyingCounter!==0){handleDying(dyingCounter,originalDyingCounter,actor);const total=message.rolls.reduce((total2,roll)=>total2+roll.total,0);ChatMessage.create({flavor:game.i18n.format(`${MODULENAME}.SETTINGS.handleDyingRecoveryRoll.handled`,{outcome:outcomeString,defeated:token.combatant?.defeated?game.i18n.format(`${MODULENAME}.SETTINGS.handleDyingRecoveryRoll.defeated`,{name:token.actor?.name??"???"}):"",roll:total}),speaker:message.speaker}).then(),message.delete({render:!1}).then()}}}__name(handleDyingRecoveryRoll,"handleDyingRecoveryRoll"),__name2(handleDyingRecoveryRoll,"handleDyingRecoveryRoll");function handleDying(dyingCounter,originalDyingCounter,actor,isDefeated=actor.combatant?.defeated){const shouldDie=originalDyingCounter+dyingCounter>=actor.system.attributes.dying.max&&!isDefeated,shouldBecomeDying=originalDyingCounter+dyingCounter>0&&!isDefeated;shouldDie?actor.increaseCondition("dying",{max:actor.system.attributes.dying.max,value:actor.system.attributes.dying.max}).then(()=>{actor.combatant?.toggleDefeated().then(()=>{actor.unsetFlag(MODULENAME,"dyingLastApplied").then(()=>console.log("dyingLastApplied cleared because dead"))})}):shouldBecomeDying?actor.increaseCondition("dying",{max:actor.system.attributes.dying.max,value:Math.min(dyingCounter,actor.system.attributes.dying.max)}).then(()=>{const dying=actor.getCondition("dying");console.log(`dyingCounter was ${originalDyingCounter} is ${dying.value}`);const now=Date.now();return actor.setFlag(MODULENAME,"dyingLastApplied",now).then(()=>{console.log(`dyingLastApplied set to ${now}, dyingCounter was ${originalDyingCounter} is ${dying.value}`)})}):actor.decreaseCondition("dying",{forceRemove:!0}).then(()=>actor.unsetFlag(MODULENAME,"dyingLastApplied").then(()=>console.log("dyingLastApplied cleared because not dying")))}__name(handleDying,"handleDying"),__name2(handleDying,"handleDying");async function autoRemoveDyingAtGreaterThanZeroHp(actor,hpAboveZero,autoRemoveDying){const dying=actor.getCondition("dying");if(shouldIHandleThis(actor)&&dying&&!dying.isLocked&&hpAboveZero){const value=dying?.value||0;dying&&value>0&&!dying.isLocked&&(!autoRemoveDying.endsWith("ForCharacters")||["character","familiar"].includes(actor.type))&&handleDying(0,0,actor)}return!0}__name(autoRemoveDyingAtGreaterThanZeroHp,"autoRemoveDyingAtGreaterThanZeroHp"),__name2(autoRemoveDyingAtGreaterThanZeroHp,"autoRemoveDyingAtGreaterThanZeroHp");async function autoRemoveUnconsciousAtGreaterThanZeroHP(actor,hpRaisedAboveZero){const unconscious=actor.getCondition("unconscious");shouldIHandleThis(actor)&&hpRaisedAboveZero&&unconscious&&!unconscious.isLocked&&await actor.decreaseCondition("unconscious",{forceRemove:!0})}__name(autoRemoveUnconsciousAtGreaterThanZeroHP,"autoRemoveUnconsciousAtGreaterThanZeroHP"),__name2(autoRemoveUnconsciousAtGreaterThanZeroHP,"autoRemoveUnconsciousAtGreaterThanZeroHP");function getRelevantMessages(actor){const relevant=game.messages.contents.slice(-Math.min(10,game.messages.size));return game.settings.get(MODULENAME,"autoGainDyingIgnoresTargeting")?relevant:relevant.filter(message=>message.target?.actor.id===actor.id)}__name(getRelevantMessages,"getRelevantMessages"),__name2(getRelevantMessages,"getRelevantMessages");function filterMessagesByContextType(messages,contextType){return messages.filter(message=>message.flags.pf2e.context?.type===contextType)}__name(filterMessagesByContextType,"filterMessagesByContextType"),__name2(filterMessagesByContextType,"filterMessagesByContextType");function filterMessagesByStrikeDamaging(messages){return messages.filter(message=>message.flags.pf2e.strike?.damaging)}__name(filterMessagesByStrikeDamaging,"filterMessagesByStrikeDamaging"),__name2(filterMessagesByStrikeDamaging,"filterMessagesByStrikeDamaging");function filterMessagesByActorEnemy(messages){return messages.filter(message=>message.target?.actor&&message.actor?.isEnemyOf(message.target?.actor))}__name(filterMessagesByActorEnemy,"filterMessagesByActorEnemy"),__name2(filterMessagesByActorEnemy,"filterMessagesByActorEnemy");function findLastMessageWithTotalGreaterOrEqual(messages,total){return messages.findLast(message=>message.rolls?.[0]?.total>=total)}__name(findLastMessageWithTotalGreaterOrEqual,"findLastMessageWithTotalGreaterOrEqual"),__name2(findLastMessageWithTotalGreaterOrEqual,"findLastMessageWithTotalGreaterOrEqual");function checkIfLatestDamageMessageIsCriticalHitByEnemy(actor,option){const hp=actor.attributes.hp;if(hp&&hp.value&&game.messages.contents.length>0&&(!(!option.startsWith("no")&&option.endsWith("ForCharacters"))||["character","familiar"].includes(actor.type))){const relevant=getRelevantMessages(actor),isDamageRoll=filterMessagesByContextType(relevant,"damage-roll"),isDamagingStrike=filterMessagesByStrikeDamaging(isDamageRoll),attackerIsEnemy=filterMessagesByActorEnemy(isDamagingStrike),criticalSuccess=filterMessagesByCriticalSuccess(attackerIsEnemy),bigEnough=findLastMessageWithTotalGreaterOrEqual(criticalSuccess,hp.value),chatMessagePF2e=bigEnough===isDamageRoll?.reverse()[0]?bigEnough:null;return chatMessagePF2e!=null}return!1}__name(checkIfLatestDamageMessageIsCriticalHitByEnemy,"checkIfLatestDamageMessageIsCriticalHitByEnemy"),__name2(checkIfLatestDamageMessageIsCriticalHitByEnemy,"checkIfLatestDamageMessageIsCriticalHitByEnemy");function filterMessagesByCriticalSuccess(messages){return messages.filter(message=>message.flags.pf2e.context?.outcome==="criticalSuccess")}__name(filterMessagesByCriticalSuccess,"filterMessagesByCriticalSuccess"),__name2(filterMessagesByCriticalSuccess,"filterMessagesByCriticalSuccess");function handleOrcFerocity(actor,update,effectsToCreate,name,shouldIncreaseWounded=!0,hpNowAboveZero=!1){const orcFerocity=actor.itemTypes.feat.find(feat=>feat.slug==="orc-ferocity"),orcFerocityUsed=actor.itemTypes.effect.find(effect=>effect.slug==="orc-ferocity-used"),incredibleFerocity=actor.itemTypes.feat.find(feat=>feat.slug==="incredible-ferocity"),undyingFerocity=actor.itemTypes.feat.find(feat=>feat.slug==="undying-ferocity"),rampagingFerocity=actor.itemTypes.feat.find(feat=>feat.slug==="rampaging-ferocity");if(orcFerocity&&(!orcFerocityUsed||orcFerocityUsed.isExpired)){foundry.utils.setProperty(update,"system.attributes.hp.value",1),undyingFerocity&&foundry.utils.setProperty(update,"system.attributes.hp.temp",Math.max(actor.level,actor.hitPoints?.temp??0)),shouldIncreaseWounded=!0;const effect={type:"effect",name:game.i18n.localize(`${MODULENAME}.effects.orcFerocityUsed`),img:"systems/pf2e/icons/default-icons/alternatives/ancestries/orc.svg",system:{slug:"orc-ferocity-used",tokenIcon:{show:!1},duration:{value:incredibleFerocity?1:24,unit:"hours",sustained:!1,expiry:"turn-start"}}};effectsToCreate.push(effect),rampagingFerocity&&ChatMessage.create({flavor:game.i18n.format(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.orcFerocityMessage`,{name}),speaker:ChatMessage.getSpeaker({actor}),whisper:game.settings.get("pf2e","metagame_secretDamage")&&!actor?.hasPlayerOwner?ChatMessage.getWhisperRecipients("GM").map(u=>u.id):[]}).then(),hpNowAboveZero=!0}return{shouldIncreaseWounded,hpNowAboveZero}}__name(handleOrcFerocity,"handleOrcFerocity"),__name2(handleOrcFerocity,"handleOrcFerocity");function handleDeliberateDeath(actor,effectsToCreate,name){const deliberateDeath=actor.itemTypes.feat.find(feat=>feat.slug==="deliberate-death"),deliberateDeathUsed=actor.itemTypes.effect.find(effect=>effect.slug==="deliberate-death-used");if(deliberateDeath&&(!deliberateDeathUsed||deliberateDeathUsed.isExpired)){const effect={type:"effect",name:game.i18n.localize(`${MODULENAME}.effects.deliberateDeathUsed`),img:"icons/skills/melee/strike-dagger-skull-white.webp",system:{slug:"deliberate-death-used",tokenIcon:{show:!1},duration:{value:24,unit:"hours",sustained:!1,expiry:"turn-start"}}};effectsToCreate.push(effect),ChatMessage.create({flavor:game.i18n.format(`${MODULENAME}.SETTINGS.autoGainDyingAtZeroHP.deliberateDeathMessage`,{name}),speaker:ChatMessage.getSpeaker({actor}),whisper:game.settings.get("pf2e","metagame_secretDamage")&&!actor?.hasPlayerOwner?ChatMessage.getWhisperRecipients("GM").map(u=>u.id):[]}).then()}}__name(handleDeliberateDeath,"handleDeliberateDeath"),__name2(handleDeliberateDeath,"handleDeliberateDeath");async function handleDyingOnZeroHP(actor,update,hp,updateHp,autogainDying){if(!shouldIHandleThis(actor)||hp<=0||updateHp>0)return updateHp>0;const name=`${actor.token?.name??actor.name}`;let shouldIncreaseWounded=!1,dyingCounter=0,hpNowAboveZero=!1;const effectsToCreate=[],nonlethalOption=String(game.settings.get(MODULENAME,"nonLethalIsNotLethal")),__ret=handleOrcFerocity(actor,update,effectsToCreate,name,shouldIncreaseWounded,hpNowAboveZero);return shouldIncreaseWounded=__ret.shouldIncreaseWounded,hpNowAboveZero=__ret.hpNowAboveZero,handleDeliberateDeath(actor,effectsToCreate,name),!hpNowAboveZero&&(!autogainDying.endsWith("ForCharacters")||["character","familiar"].includes(actor.type))&&(autogainDying?.startsWith("addWoundedLevel")?dyingCounter=(actor.getCondition("wounded")?.value??0)+1:dyingCounter=1),checkIfLatestDamageMessageIsCriticalHitByEnemy(actor,autogainDying)&&(dyingCounter+=1),hpNowAboveZero&&await actor.update(update),shouldIncreaseWounded&&await actor.increaseCondition("wounded"),(!String(game.settings.get(MODULENAME,"nonLethalIsNotLethal")).endsWith("ForCharacters")||["character","familiar"].includes(actor.type))&&!hpNowAboveZero&&checkIfLatestDamageMessageIsNonlethal(actor,nonlethalOption)&&(actor.hasCondition("unconscious")||await actor.toggleCondition("unconscious"),dyingCounter=0),handleDying(dyingCounter,0,actor),effectsToCreate.length>0&&await actor.createEmbeddedDocuments("Item",effectsToCreate),hpNowAboveZero}__name(handleDyingOnZeroHP,"handleDyingOnZeroHP"),__name2(handleDyingOnZeroHP,"handleDyingOnZeroHP");async function giveWoundedWhenDyingRemoved(item){const actor=item.parent;if(isFirstGM()&&item.slug==="dying"&&actor){const items=actor.items;let bounceBack=!1,bounceBackUsed=!1,numbToDeath=!1,numbToDeathUsed=!1;items&&(bounceBack=items.find(feat=>feat.slug==="bounce-back"),bounceBackUsed=actor.itemTypes.effect.find(effect=>effect.slug==="bounce-back-used")??!1,numbToDeath=items.find(feat=>feat.slug==="numb-to-death"),numbToDeathUsed=actor.itemTypes.effect.find(effect=>effect.slug==="numb-to-death-used")??!1);const name=`${actor.token?.name??actor.name}`;if(numbToDeath&&(!numbToDeathUsed||bounceBackUsed.isExpired)){const effect={type:"effect",name:game.i18n.localize(`${MODULENAME}.effects.numbToDeathUsed`),img:"icons/magic/death/hand-dirt-undead-zombie.webp",system:{slug:"numb-to-death-used",tokenIcon:{show:!1},duration:{value:24,unit:"hours",sustained:!1,expiry:"turn-start"}}};ChatMessage.create({flavor:game.i18n.format(`${MODULENAME}.SETTINGS.giveWoundedWhenDyingRemoved.numbToDeathMessage`,{name}),speaker:ChatMessage.getSpeaker({token:actor.token}),whisper:game.settings.get("pf2e","metagame_secretDamage")&&!actor?.hasPlayerOwner?ChatMessage.getWhisperRecipients("GM").map(u=>u.id):[]}).then(),await actor.createEmbeddedDocuments("Item",[effect])}else if(bounceBack&&(!bounceBackUsed||bounceBackUsed.isExpired)){const effect={type:"effect",name:game.i18n.localize(`${MODULENAME}.effects.bounceBackUsed`),img:"icons/magic/life/ankh-gold-blue.webp",system:{slug:"bounce-back-used",tokenIcon:{show:!1},duration:{value:24,unit:"hours",sustained:!1,expiry:"turn-start"}}};await actor.createEmbeddedDocuments("Item",[effect])}else await item.parent?.increaseCondition("wounded")}}__name(giveWoundedWhenDyingRemoved,"giveWoundedWhenDyingRemoved"),__name2(giveWoundedWhenDyingRemoved,"giveWoundedWhenDyingRemoved");async function giveUnconsciousIfDyingRemovedAt0HP(item){const actor=item.parent;isFirstGM()&&item.slug==="dying"&&game.settings.get(MODULENAME,"giveUnconsciousIfDyingRemovedAt0HP")&&actor.system.attributes?.hp?.value===0&&!actor.hasCondition("unconscious")&&(actor.hasCondition("unconscious")||await item.parent?.toggleCondition("unconscious"))}__name(giveUnconsciousIfDyingRemovedAt0HP,"giveUnconsciousIfDyingRemovedAt0HP"),__name2(giveUnconsciousIfDyingRemovedAt0HP,"giveUnconsciousIfDyingRemovedAt0HP");function dyingHandlingPreCreateChatMessageHook(message){const autoGainDying=String(game.settings.get(MODULENAME,"autoGainDyingIfTakingDamageWhenAlreadyDying"));if(autoGainDying&&!autoGainDying.startsWith("no")){const actor=message.actor;if(actor&&shouldIHandleThis(actor)&&message.content?.includes("damage-taken")){const now=Date.now(),flag=actor.getFlag(MODULENAME,"dyingLastApplied")||now;if(console.log(`dyingLastApplied is ${flag}, now is ${now}`),!flag?.between(now-4e3,now)){const originalDyingCounter=actor?.getCondition("dying")?.value??0;let dyingCounter=0;if(!autoGainDying.startsWith("no")&&originalDyingCounter>0){const wasCritical=checkIfLatestDamageMessageIsCriticalHitByEnemy(actor,autoGainDying);(!autoGainDying.endsWith("ForCharacters")||["character","familiar"].includes(actor.type))&&(dyingCounter=dyingCounter+1,wasCritical&&(dyingCounter=dyingCounter+1)),console.log(`Before handleDying dyingLastApplied is ${flag}, now is ${now}, dyingCounter was ${originalDyingCounter} will increase by ${dyingCounter}`),handleDying(dyingCounter,originalDyingCounter,actor)}}}}}__name(dyingHandlingPreCreateChatMessageHook,"dyingHandlingPreCreateChatMessageHook"),__name2(dyingHandlingPreCreateChatMessageHook,"dyingHandlingPreCreateChatMessageHook");function checkIfLatestDamageMessageIsNonlethal(actor,option){const hp=actor.attributes.hp;if(hp&&hp.value&&game.messages.contents.length>0&&!option.startsWith("no")&&(!option.endsWith("ForCharacters")||["character","familiar"].includes(actor.type))){const lastDamageRoll=getRelevantMessages(actor).findLast(message=>message.flags.pf2e.context?.type==="damage-roll"),totalDamage=lastDamageRoll?.rolls?.[0]?.total??0,isNonlethal=(lastDamageRoll?.flags?.pf2e?.context?.options??[]).includes("nonlethal");return(totalDamage>=hp.value&&isNonlethal)??!1}return!1}__name(checkIfLatestDamageMessageIsNonlethal,"checkIfLatestDamageMessageIsNonlethal"),__name2(checkIfLatestDamageMessageIsNonlethal,"checkIfLatestDamageMessageIsNonlethal");function ignoreDeadEidolon(actor){return actor?.traits.has("eidolon")&&game.settings.get(MODULENAME,"reminderCannotAttackIgnoreDeadEidolon")}__name(ignoreDeadEidolon,"ignoreDeadEidolon"),__name2(ignoreDeadEidolon,"ignoreDeadEidolon");function checkAttackValidity(message,cancelAttack){if(!shouldBeChecked(message))return!0;const token=getSpeakerToken$1(message),reason=getAttackReason(token,message?.flags?.pf2e?.context?.options.filter(o=>o.startsWith("action:")));return reason?(notifyUser(token,reason,message?.flags?.pf2e?.context?.title,cancelAttack),!1):!0}__name(checkAttackValidity,"checkAttackValidity"),__name2(checkAttackValidity,"checkAttackValidity");function getSpeakerToken$1(message){return canvas?.scene?.tokens.get(message.speaker.token)}__name(getSpeakerToken$1,"getSpeakerToken$1"),__name2(getSpeakerToken$1,"getSpeakerToken$1");function shouldBeChecked(message){const traits=(message?.flags?.pf2e?.context??{})?.traits;return message.actor&&shouldIHandleThis(message.actor)&&message.flags&&game.combats.active&&message.user&&["spell-attack-roll","attack-roll","skill-check"].includes(message.flags.pf2e.context?.type)&&traits?.some(t=>t==="attack")}__name(shouldBeChecked,"shouldBeChecked"),__name2(shouldBeChecked,"shouldBeChecked");function getAttackReason(token,actions){const actor=token.actor,conditionReasons={dead:`${MODULENAME}.SETTINGS.reminderCannotAttack.dead`,hasNoHp:`${MODULENAME}.SETTINGS.reminderCannotAttack.hasNoHp`,defeated:`${MODULENAME}.SETTINGS.reminderCannotAttack.defeated`,unconscious:`${MODULENAME}.SETTINGS.reminderCannotAttack.unconscious`,petrified:`${MODULENAME}.SETTINGS.reminderCannotAttack.petrified`,restrained:`${MODULENAME}.SETTINGS.reminderCannotAttack.restrained`};return actor?.isDead&&!ignoreDeadEidolon(actor)?conditionReasons.dead:(actor?.hitPoints?.value??0)<=0&&!ignoreDeadEidolon(actor)?conditionReasons.hasNoHp:game.combats.active?.combatant?.token===token&&game.combats.active.combatant.defeated?conditionReasons.defeated:actor?.hasCondition("unconscious")?conditionReasons.unconscious:actor?.hasCondition("petrified")?conditionReasons.petrified:actor?.hasCondition("restrained")&&!["action:escape","action:force-open"].some(a=>actions.includes(a))?conditionReasons.restrained:""}__name(getAttackReason,"getAttackReason"),__name2(getAttackReason,"getAttackReason");function notifyUser(token,reason,title,cancelAttack){const reasonKey=cancelAttack?"reminderCannotAttack.error":"reminderCannotAttack.info",actorName=token.actor?.name||"(unknown)";ui.notifications[cancelAttack?"error":"info"](generateNotificationMessage(title,actorName,reason,reasonKey))}__name(notifyUser,"notifyUser"),__name2(notifyUser,"notifyUser");function generateNotificationMessage(title,actorName,reason,reasonKey){return game.i18n.format(`${MODULENAME}.SETTINGS.${reasonKey}`,{title,actorName,reason:game.i18n.localize(reason)})}__name(generateNotificationMessage,"generateNotificationMessage"),__name2(generateNotificationMessage,"generateNotificationMessage");async function reminderBreathWeapon(message){const messageContent=message.content;if(isFirstGM()&&messageContent&&game.combats&&game.combats.active){const activeActor=getSpeakerToken(message)?.actor;if(activeActor){const diceFormulaMatch=retrieveDiceFormulaMatch(messageContent),diceValue=diceFormulaMatch?`1d${diceFormulaMatch[1]}`:"";if(diceValue){const effectDetails=getEffectDetails(activeActor,messageContent,diceValue);await activeActor?.createEmbeddedDocuments("Item",[effectDetails])}}}}__name(reminderBreathWeapon,"reminderBreathWeapon"),__name2(reminderBreathWeapon,"reminderBreathWeapon");function getSpeakerToken(message){return canvas?.scene?.tokens.get(message.speaker.token)}__name(getSpeakerToken,"getSpeakerToken"),__name2(getSpeakerToken,"getSpeakerToken");function retrieveDiceFormulaMatch(messageContent){return messageContent.match(/1d([46])( rounds| recharge|<\/a> rounds)/i)}__name(retrieveDiceFormulaMatch,"retrieveDiceFormulaMatch"),__name2(retrieveDiceFormulaMatch,"retrieveDiceFormulaMatch");function getEffectDetails(activeActor,messageContent,diceValue){const titleRetrieved=messageContent.match(/>(.*?) <span class="action-glyph"/);return{type:"effect",name:getEffectName(titleRetrieved),img:"systems/pf2e/icons/spells/dragon-breath.webp",system:getSystemProperties(activeActor,diceValue)}}__name(getEffectDetails,"getEffectDetails"),__name2(getEffectDetails,"getEffectDetails");function getEffectName(titleRetrieved){return titleRetrieved?game.i18n.localize(`${MODULENAME}.SETTINGS.reminderBreathWeapon.used`)+titleRetrieved[1]:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderBreathWeapon.used`)+game.i18n.localize(`${MODULENAME}.SETTINGS.reminderBreathWeapon.defaultName`)}__name(getEffectName,"getEffectName"),__name2(getEffectName,"getEffectName");function getSystemProperties(activeActor,diceValue){return{tokenIcon:{show:!0},duration:getDurationProperties(diceValue),description:{value:`<h2>${game.i18n.localize(`${MODULENAME}.SETTINGS.reminderBreathWeapon.name`)}</h2>`},source:{value:game.i18n.localize(`${MODULENAME}.SETTINGS.reminderBreathWeapon.defaultName`)},rules:[],slug:`xdy-breath-weapon-reminder-${myRandomId()}`,unidentified:getUnidentifiedProperty(activeActor),traits:{value:[]},level:{value:activeActor.level??0},badge:null,context:null}}__name(getSystemProperties,"getSystemProperties"),__name2(getSystemProperties,"getSystemProperties");function getDurationProperties(diceValue){return{value:new Roll(diceValue).roll({async:!1}).total+1,unit:"rounds",sustained:!1,expiry:"turn-start"}}__name(getDurationProperties,"getDurationProperties"),__name2(getDurationProperties,"getDurationProperties");function getUnidentifiedProperty(activeActor){return game.settings.get(MODULENAME,"reminderBreathWeaponHidden")&&!game.actors?.party?.members.map(m=>m.id).includes(activeActor.id)}__name(getUnidentifiedProperty,"getUnidentifiedProperty"),__name2(getUnidentifiedProperty,"getUnidentifiedProperty");async function handlePrivateSpellcasting(data,message){const spellUUID=message.flags?.pf2e.origin?.uuid,origin=fromUuidSync(spellUUID),partyMembersWithSpell=findPartyMembersWithSpell(origin);if(isAutoRevealActive()&&partyMembersWithSpell&&partyMembersWithSpell.length>0){game.settings.get(MODULENAME,"castPrivateSpellAutoRevealPartyMembersThatKnowSpell")&&showPartymembersWithSpell(message,partyMembersWithSpell,data);return}if(updateDataAndSource(data,message),isPublicMessageActive()&&!isShiftModifierActive()){const{content,flags}=await generateMessageData(message,origin,spellUUID,data),whisper=game.settings.get(MODULENAME,"castPrivateSpellWithPublicMessageShowToGM")?[]:game.users.filter(u=>u.active).filter(u=>u.id!==ChatMessage.getWhisperRecipients("GM").map(u2=>u2.id)[0]).map(u=>u.id),user=game.userId;whisper.length>0?await ChatMessage.create({whisper,user,content,flags}):await ChatMessage.create({user,content,flags})}}__name(handlePrivateSpellcasting,"handlePrivateSpellcasting"),__name2(handlePrivateSpellcasting,"handlePrivateSpellcasting");function showPartymembersWithSpell(message,membersWithSpell,data){const oldContent=message.content,$editedContent=$(`<div>${oldContent}</div>`);$editedContent.find("hr.item-block-divider:first").after(game.i18n.format(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.knownBy`,{spellHavers:membersWithSpell?.join(",")??""}));const newContent=$editedContent.html();newContent!==oldContent&&(data.content=newContent,message.updateSource({content:newContent}))}__name(showPartymembersWithSpell,"showPartymembersWithSpell"),__name2(showPartymembersWithSpell,"showPartymembersWithSpell");async function generateMessageData(message,origin,spellUUID,data){const anonymous=game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.they`),tokenName=game.settings.get("pf2e","metagame_tokenSetsNameVisibility")?anonymous:message.alias??message.token?.name??message.actor?.name??anonymous,type=message.flags?.pf2e.origin?.type??"spell",traditionString=message.flags?.pf2e.casting?.tradition??"",isBasicSave=message.flags.pf2e.context?.options?.includes("item:defense:basic"),content=buildSpellMessage(origin,tokenName,type,traditionString,spellUUID,data,isBasicSave),flags={"xdy-pf2e-workbench":{privateSpell:{originUuid:message.flags?.pf2e.origin?.uuid,originCastRank:message.flags.pf2e.origin.castRank}}};return{content,flags}}__name(generateMessageData,"generateMessageData"),__name2(generateMessageData,"generateMessageData");function getDcRkForLevel(level){return{1:15,2:18,3:20,4:23,5:26,6:28,7:31,8:34,9:36,10:39}[level]??0}__name(getDcRkForLevel,"getDcRkForLevel"),__name2(getDcRkForLevel,"getDcRkForLevel");function getDcRkForRarity(rarity){return{uncommon:2,rare:5,unique:10,common:0}[rarity]??0}__name(getDcRkForRarity,"getDcRkForRarity"),__name2(getDcRkForRarity,"getDcRkForRarity");const TRADITION_SKILLS={arcane:"arcana",divine:"religion",occult:"occultism",primal:"nature"};function findPartyMembersWithSpell(origin){return game.actors?.party?.members?.filter(actor=>actor.items?.filter(i=>i.slug===origin.slug)?.filter(i=>i.isOfType("spell"))?.filter(i=>i.spellcasting).some(item=>{const spell=item,entry=spell.spellcasting;return!entry?.isPrepared||entry?.isPrepared&&entry?.system?.slots?.[`slot${spell.rank}`].prepared.some(s=>s.id===spell.id)})).map(actor=>actor.name)}__name(findPartyMembersWithSpell,"findPartyMembersWithSpell"),__name2(findPartyMembersWithSpell,"findPartyMembersWithSpell");function updateDataAndSource(data,message){data.type=CONST.CHAT_MESSAGE_TYPES.WHISPER,data.whisper=[...ChatMessage.getWhisperRecipients("GM").map(u=>u.id)],game.user.isGM||data.whisper.push(game.user.id),message.updateSource(data)}__name(updateDataAndSource,"updateDataAndSource"),__name2(updateDataAndSource,"updateDataAndSource");function isAutoRevealActive(){return!!game.settings.get(MODULENAME,"castPrivateSpellAutoRevealIfKnown")}__name(isAutoRevealActive,"isAutoRevealActive"),__name2(isAutoRevealActive,"isAutoRevealActive");function isPublicMessageActive(){return!!game.settings.get(MODULENAME,"castPrivateSpellWithPublicMessage")}__name(isPublicMessageActive,"isPublicMessageActive"),__name2(isPublicMessageActive,"isPublicMessageActive");function isShiftModifierActive(){return game?.keyboard?.isModifierActive(KeyboardManager.MODIFIER_KEYS.SHIFT)}__name(isShiftModifierActive,"isShiftModifierActive"),__name2(isShiftModifierActive,"isShiftModifierActive");function buildSpellMessage(origin,tokenName,type,traditionString,spellUUID,data,basic){let content="";if(origin){content=game.i18n.localize(game.i18n.format(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.firstPart`,{tokenName,type,traditionString,spellUUID})),game.settings.get(MODULENAME,"castPrivateSpellWithPublicMessageShowTraits")&&(content+=game.i18n.localize(game.i18n.format(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessageShowTraits.traitPart`,{traits:Object.values(origin.system.traits.value).map(trait=>trait.valueOf()).sort().join(", ")})));const level=origin.system.level.value,dcRK=getDcRkForLevel(level)+getDcRkForRarity(origin.system.traits?.rarity??"common"),skill=TRADITION_SKILLS[traditionString];content+=game.i18n.format(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.secondPartRK`,{skill,dcRK,rk:`&#123;${game.i18n.localize("PF2E.RecallKnowledge.Label")}	&#125;`})}else content+=game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.secondPartNoRK`);const buttons=$(data.content).find("button"),saveButtons=buttons.filter(i=>buttons[i].getAttribute("data-action")==="spell-save"),targetHelperActive=game.modules.find(s=>s.id==="pf2e-target-helper")?.active;if(saveButtons.length===1){const dataSave=saveButtons.attr("data-save")??"";if(targetHelperActive)content+=game.i18n.format(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.noButtonSavePart`,{dataSave,basic:basic?game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.basic`):""});else{const dataDC=saveButtons.attr("data-dc")??"";content+=game.i18n.format(`${MODULENAME}.SETTINGS.castPrivateSpellWithPublicMessage.savePart`,{dataSave,dataDC,traits:Object.values(origin.system.traits.value).map(trait=>game.pf2e.system.sluggify(trait.valueOf())).sort().join(","),basic})}}return content}__name(buildSpellMessage,"buildSpellMessage"),__name2(buildSpellMessage,"buildSpellMessage");async function castPrivateSpellHideName(message,html){if(game.messages.contents.reverse().filter(m=>m.type===4).filter(m=>m.flags?.pf2e?.casting).filter(m=>m.flags?.pf2e?.origin?.uuid===message.flags?.pf2e?.origin?.uuid).pop()){const flavor=html.querySelector(".flavor-text");if(flavor&&flavor.innerHTML){const searchValue=(await fromUuid(message.flags?.pf2e.origin?.uuid))?.name??"???",replaceValue=game.i18n.localize(`${MODULENAME}.SETTINGS.castPrivateSpell.aSpell`)+`<p data-visibility="gm">(${searchValue})</p>`;flavor.innerHTML=flavor.innerHTML.replace(searchValue,replaceValue)}}}__name(castPrivateSpellHideName,"castPrivateSpellHideName"),__name2(castPrivateSpellHideName,"castPrivateSpellHideName");const preCreateChatMessageHook=__name2((message,data,_options,_user)=>{let proceed=!0;const reminderTargetingEnabled=game.settings.get(MODULENAME,"reminderTargeting")==="mustTarget",reminderCannotAttack=String(game.settings.get(MODULENAME,"reminderCannotAttack")),castPrivateSpellEnabled=game.settings.get(MODULENAME,"castPrivateSpell"),ctrlHeld=["ControlLeft","ControlRight","MetaLeft","MetaRight","Meta","OsLeft","OsRight"].some(key=>game?.keyboard.downKeys.has(key)),privateCast=castPrivately(game.actors?.party?.members?.some(member=>member.id===message.actor?.id)??!1,message);return castPrivateSpellEnabled&&message.flags.pf2e?.casting?.id&&(ctrlHeld&&!privateCast||!ctrlHeld&&privateCast)&&handlePrivateSpellcasting(data,message).then(),reminderTargetingEnabled&&(proceed=reminderTargeting(message,String(game.settings.get(MODULENAME,"reminderTargeting")))),proceed&&reminderCannotAttack==="cancelAttack"&&(proceed=checkAttackValidity(message,!0)),proceed},"preCreateChatMessageHook");function castPrivately(inParty,message){const isNpc=message.actor?.type===NPC_TYPE,isAlly=message.actor?.alliance==="party",alwaysNpc=game.settings.get(MODULENAME,"castPrivateSpellAlwaysFor")==="npcs",alwaysNonAlly=game.settings.get(MODULENAME,"castPrivateSpellAlwaysFor")==="nonAllies",alwaysNonParty=game.settings.get(MODULENAME,"castPrivateSpellAlwaysFor")==="nonPartymembers";return isNpc&&alwaysNpc||!isAlly&&alwaysNonAlly||!inParty&&alwaysNonParty}__name(castPrivately,"castPrivately"),__name2(castPrivately,"castPrivately");function createChatMessageHook(message){String(game.settings.get(MODULENAME,"reminderCannotAttack"))==="reminder"&&checkAttackValidity(message,!1);const reminderTargetingSetting=String(game.settings.get(MODULENAME,"reminderTargeting"));["no","reminder"].includes(reminderTargetingSetting)&&reminderTargeting(message,reminderTargetingSetting),isActuallyDamageRoll(message)||(game.settings.get(MODULENAME,"autoRollDamageAllow")&&(game.settings.get(MODULENAME,"autoRollDamageForStrike")||game.settings.get(MODULENAME,"autoRollDamageForSpellAttack")||game.settings.get(MODULENAME,"autoRollDamageForSpellWhenNotAnAttack")!=="no")&&autoRollDamage(message).then(),game.settings.get(MODULENAME,"reminderBreathWeapon")&&reminderBreathWeapon(message).then()),dyingHandlingPreCreateChatMessageHook(message)}__name(createChatMessageHook,"createChatMessageHook"),__name2(createChatMessageHook,"createChatMessageHook");function deprecatedDyingHandlingRenderChatMessageHook(message){handleDyingRecoveryRoll(message,!!game.settings.get(MODULENAME,"handleDyingRecoveryRoll"))}__name(deprecatedDyingHandlingRenderChatMessageHook,"deprecatedDyingHandlingRenderChatMessageHook"),__name2(deprecatedDyingHandlingRenderChatMessageHook,"deprecatedDyingHandlingRenderChatMessageHook");function renderChatMessageHook(message,jq){const html=jq.get(0);persistentHealing(message,!!game.settings.get(MODULENAME,"applyPersistentHealing")),game.settings.get(MODULENAME,"applyPersistentDamage")&&persistentDamage(message),deprecatedDyingHandlingRenderChatMessageHook(message);const minimumUserRoleFlag=message.getFlag(MODULENAME,"minimumUserRole");if(!isNaN(minimumUserRoleFlag)&&minimumUserRoleFlag>game.user.role&&html.classList.add("xdy-pf2e-workbench-hide"),game.settings.get(MODULENAME,"npcMystifierUseMystifiedNameInChat")&&mangleNamesInChatMessage(message,html),isActuallyDamageRoll(message)){const expandDamageRolls=String(game.settings.get(MODULENAME,"autoExpandDamageRolls"));["expandedAll","expandedNew","expandedNewest"].includes(expandDamageRolls)&&damageCardExpand(message,html,expandDamageRolls)}else(String(game.settings.get(MODULENAME,"autoCollapseItemChatCardContent"))==="collapsedDefault"||String(game.settings.get(MODULENAME,"autoCollapseItemChatCardContent"))==="nonCollapsedDefault")&&chatCardDescriptionCollapse(html),(String(game.settings.get(MODULENAME,"autoCollapseItemAttackChatCardContent"))==="collapsedDefault"||String(game.settings.get(MODULENAME,"autoCollapseItemAttackChatCardContent"))==="nonCollapsedDefault")&&["weapon","melee","spell"].includes(message.item?.type??"")&&chatAttackCardDescriptionCollapse(html),((String(game.settings.get(MODULENAME,"autoCollapseItemActionChatCardContent"))==="collapsedDefault"||String(game.settings.get(MODULENAME,"autoCollapseItemActionChatCardContent"))==="nonCollapsedDefault")&&!message.item||message.item?.type==="action")&&chatActionCardDescriptionCollapse(html);if(game.settings.get(MODULENAME,"castPrivateSpellHideName")&&message?.flags?.pf2e?.origin?.type==="spell"&&isActuallyDamageRoll(message)&&castPrivateSpellHideName(message,html),message.rolls.at(-1)?.options.keeleyAdd10){const element=jq.get(0);if(element){const tags=element.querySelector(".flavor-text > .tags.modifiers"),formulaElem=element.querySelector(".reroll-discard .dice-formula"),newTotalElem=element.querySelector(".reroll-second .dice-total");if(tags&&formulaElem&&newTotalElem){const newTag=document.createElement("span");newTag.classList.add("tag","tag_transparent","keeley-add-10"),newTag.innerText=game.i18n.localize(`${MODULENAME}.SETTINGS.keeleysHeroPointRule.bonusTag`),newTag.dataset.slug="keeley-add-10",tags.querySelector(".tag")?.dataset.visibility==="gm"&&(newTag.dataset.visibility="gm"),tags.append(newTag);const span=document.createElement("span");span.className="keeley-add-10",span.innerText=" + 10",formulaElem?.append(span),newTotalElem.classList.add("keeley-add-10")}}}}__name(renderChatMessageHook,"renderChatMessageHook"),__name2(renderChatMessageHook,"renderChatMessageHook");function dropHeldItemsOnBecomingUnconscious(actor){const items=actor.items?.filter(i=>i.isHeld);if(items&&items.length>0){for(const item of items)item.traits.has("free-hand")||item.type==="shield"||item.traits.has("attached-to-shield")?actor.changeCarryType(item,{carryType:"worn",handsHeld:0,inSlot:!1}):actor.changeCarryType(item,{carryType:"dropped",handsHeld:0,inSlot:!1});const message=game.i18n.format(`${MODULENAME}.SETTINGS.dropHeldItemsOnBecomingUnconscious.message`,{name:game?.scenes?.current?.tokens?.find(t=>t.actor?.id===actor.id)?.name??actor.name,items:items.map(i=>i.name).join(", ")});ChatMessage.create({flavor:message,speaker:ChatMessage.getSpeaker({actor})}).then()}}__name(dropHeldItemsOnBecomingUnconscious,"dropHeldItemsOnBecomingUnconscious"),__name2(dropHeldItemsOnBecomingUnconscious,"dropHeldItemsOnBecomingUnconscious");async function createItemHook(item,_options,_id){item.actor?.isOfType(CHARACTER_TYPE)&&item.actor.hasCondition("unconscious")&&game.settings.get(MODULENAME,"dropHeldItemsOnBecomingUnconscious")&&shouldIHandleThis(item.actor)&&dropHeldItemsOnBecomingUnconscious(item.actor)}__name(createItemHook,"createItemHook"),__name2(createItemHook,"createItemHook");async function updateItemHook(_item,_update){}__name(updateItemHook,"updateItemHook"),__name2(updateItemHook,"updateItemHook");async function deleteItemHook(item,_options){await itemHandlingItemHook(item)}__name(deleteItemHook,"deleteItemHook"),__name2(deleteItemHook,"deleteItemHook");function pf2eEndTurnHook(combatant,_combat,userId){game.settings.get(MODULENAME,"decreaseFrightenedConditionEachTurn")&&reduceFrightened(combatant,userId).then(()=>logDebug("Workbench reduceFrightened complete"))}__name(pf2eEndTurnHook,"pf2eEndTurnHook"),__name2(pf2eEndTurnHook,"pf2eEndTurnHook");async function pf2eStartTurnHook(combatant,_combat,userId){const forWhom=String(game.settings.get(MODULENAME,"actionsReminderAllow"));game.settings.get(MODULENAME,"autoReduceStunned")?autoReduceStunned(combatant,userId).then(reduction=>{forWhom!=="none"&&actionsReminder(combatant,reduction)}):forWhom!=="none"&&actionsReminder(combatant,0)}__name(pf2eStartTurnHook,"pf2eStartTurnHook"),__name2(pf2eStartTurnHook,"pf2eStartTurnHook");function renderTokenHUDHook(_app,q,data){const html=q.get(0);html&&game.user?.isGM&&game.settings.get(MODULENAME,"npcMystifier")&&renderNameHud(data,html)}__name(renderTokenHUDHook,"renderTokenHUDHook"),__name2(renderTokenHUDHook,"renderTokenHUDHook");async function preUpdateActorHook(actor,update){const updateHp=foundry.utils.getProperty(update,"system.attributes.hp.value");if(typeof updateHp=="number"){const currentActorHp=actor.system.attributes.hp?.value||0;game.user?.isGM&&actor?.type===NPC_TYPE&&actor?.items?.size>0&&currentActorHp>0&&updateHp<=0&&game.settings.get("pf2e","automation.lootableNPCs")&&String(game.settings.get(MODULENAME,"npcMystifyAllPhysicalMagicalItems"))==="onZeroHp"&&await mystifyNpcItems(actor);const autoGainDying=String(game.settings.get(MODULENAME,"autoGainDyingAtZeroHP"));dyingHandlingPreUpdateActorHook(actor,update,currentActorHp,updateHp,autoGainDying)}}__name(preUpdateActorHook,"preUpdateActorHook"),__name2(preUpdateActorHook,"preUpdateActorHook");function preUpdateTokenHook(_document,update,options,..._args){game.settings.get(MODULENAME,"tokenAnimation")&&(update.x||update.y)&&foundry.utils.setProperty(options,"animation",{movementSpeed:game.settings.get(MODULENAME,"tokenAnimationSpeed")})}__name(preUpdateTokenHook,"preUpdateTokenHook"),__name2(preUpdateTokenHook,"preUpdateTokenHook");async function createTokenHook(token,..._args){game.user?.isGM&&game.settings.get(MODULENAME,"npcMystifier")&&tokenCreateMystification(token).then(),game.user?.isGM&&game.settings.get("pf2e","automation.lootableNPCs")&&String(game.settings.get(MODULENAME,"npcMystifyAllPhysicalMagicalItems"))==="onScene"&&token.actor&&token.actor.isOfType(NPC_TYPE)&&token.actor.items&&token.actor.items.size>0&&await mystifyNpcItems(token.actor.items)}__name(createTokenHook,"createTokenHook"),__name2(createTokenHook,"createTokenHook");function pf2eRerollHook(_oldRoll,newRoll,heroPoint,keep){if(!heroPoint||keep!=="new")return;const die=newRoll.dice.find(d=>d instanceof Die&&d.number===1&&d.faces===20),result=die?.results.find(r=>r.active&&r.result<=10);die&&result&&(newRoll.terms.push(OperatorTerm.fromData({class:"OperatorTerm",operator:"+",evaluated:!0}),NumericTerm.fromData({class:"NumericTerm",number:10,evaluated:!0})),newRoll._total+=10,newRoll.options.keeleyAdd10=!0)}__name(pf2eRerollHook,"pf2eRerollHook"),__name2(pf2eRerollHook,"pf2eRerollHook");async function pf2eSystemReadyHook(){const housepatcherSetting=game.settings.get(MODULENAME,"housepatcher");game.user.isGM&&housepatcherSetting&&await housepatcher(housepatcherSetting)}__name(pf2eSystemReadyHook,"pf2eSystemReadyHook"),__name2(pf2eSystemReadyHook,"pf2eSystemReadyHook");function renderActorSheetHook(sheet,q){const html=q.get(0);function itemFromCompendium(element,qualifiedName){const itemUuid=element.getAttribute(qualifiedName);return itemUuid?fromUuidSync(itemUuid):null}__name(itemFromCompendium,"itemFromCompendium"),__name2(itemFromCompendium,"itemFromCompendium");function itemFromActor(element,attributeName){const itemId=element.getAttribute(attributeName);return itemId?sheet.actor?.items?.get(itemId):null}__name(itemFromActor,"itemFromActor"),__name2(itemFromActor,"itemFromActor");function performColoring(setting,listSelector,itemSelector,fetchItem){if(sheet.actor?.type===CHARACTER_TYPE&&game.settings.get(MODULENAME,setting)){const lists=html.querySelectorAll(listSelector);for(const list of lists){const elementNodeListOf=list.querySelectorAll(itemSelector);for(const element of elementNodeListOf){const item=fetchItem(element);if(item){const rarity=item.system.traits.rarity;rarity&&element.querySelectorAll("h4").forEach(h4=>h4.classList.add(`xdy-pf2e-workbench-rarity-${rarity}`))}}}}}__name(performColoring,"performColoring"),__name2(performColoring,"performColoring"),performColoring("playerSpellsRarityColour",".spell-list",".spell",element=>itemFromActor(element,"data-item-id")),performColoring("playerFeatsRarityColour",".feats-pane",".slot",element=>itemFromActor(element,"data-item-id")),performColoring("playerCraftingRarityColour",".crafting-pane",".formula-item",element=>itemFromCompendium(element,"data-item-uuid")),sheet.actor?.type===CHARACTER_TYPE&&game.settings.get(MODULENAME,"playerFeatsPrerequisiteHint")&&html.querySelectorAll(".feats-pane").forEach(list=>{const elementNodeListOf=list.querySelectorAll(".slot");for(const element of elementNodeListOf){const feat=itemFromActor(element,"data-item-id");feat&&feat.system.prerequisites.value.length>0&&element.querySelectorAll("h4").forEach(h4Element=>h4Element.innerHTML+="*")}})}__name(renderActorSheetHook,"renderActorSheetHook"),__name2(renderActorSheetHook,"renderActorSheetHook");function onScaleNPCContextHook(_html,buttons){game.user?.isGM&&buttons.unshift({name:"Scale to Level",icon:'<i class="fas fa-level-up-alt"></i>',condition:li=>{const id=li.data("document-id");return(game.actors?.get(id)).isOfType("npc")},callback:async li=>{const id=li.data("document-id"),actor=game.actors?.get(id),oldLevel=24;new Dialog({title:"Scale NPC",content:`<p>Scale a creature to a range of levels, creating the creature at each level in the range. The min level must be less than or equal to the max level. To only scale to a single level, set both equal to the desired level.</p><div class="form-group"><label>Min Level</label><input id="startLevel" type="number" value="${oldLevel}" min="-1" max="24"></div><div class="form-group"><label>Max Level</label><input id="endLevel" type="number" value="${oldLevel}" min="-1" max="24"></div>`,buttons:{scale:{icon:'<i class="fas fa-level-up-alt"></i>',label:"Scale",callback:async html=>{ui.notifications?.info("Scaling NPC... please wait.");const startLevel=parseInt(html.find("#startLevel").val()),endLevel=parseInt(html.find("#endLevel").val());for(let i=startLevel;i<=endLevel;i++)await scaleNPCToLevel(actor,i);ui.notifications?.info(`Scaled ${actor.name} to levels ${startLevel} - ${endLevel}.`)}}},default:"scale"}).render(!0)}})}__name(onScaleNPCContextHook,"onScaleNPCContextHook"),__name2(onScaleNPCContextHook,"onScaleNPCContextHook");function toggleMenuSettings(html,settings){for(const key in settings.settings){const settingElement=settings.settings[key];if(settingElement&&settingElement.key){const settingName=settingElement.key;if(settingName!=="applyPersistentAllow"&&settingName.startsWith("applyPersistent")){const applyToggle=!(game.settings.get(MODULENAME,"applyPersistentAllow")==="none"||(game.user?.isGM?game.settings.get(MODULENAME,"applyPersistentAllow")==="players":game.settings.get(MODULENAME,"applyPersistentAllow")==="gm"));html.find(`input[name="${settingName}"]`).parent().parent().toggle(applyToggle)}if(settingName!=="handleDyingRecoveryRollAllow"&&settingName.startsWith("handleDyingRecoveryRoll")){const applyToggle=!(game.settings.get(MODULENAME,"handleDyingRecoveryRollAllow")==="none"||(game.user?.isGM?game.settings.get(MODULENAME,"handleDyingRecoveryRollAllow")==="players":game.settings.get(MODULENAME,"handleDyingRecoveryRollAllow")==="gm"));html.find(`input[name="${settingName}"]`).parent().parent().toggle(applyToggle)}if(settingName!=="autoRollDamageAllow"&&settingName.startsWith("autoRollDamage")){const applyToggle=!(game.settings.get(MODULENAME,"autoRollDamageAllow")==="none"||(game.user?.isGM?game.settings.get(MODULENAME,"autoRollDamageAllow")==="players":game.settings.get(MODULENAME,"autoRollDamageAllow")==="gm"));html.find(`input[name="${settingName}"]`).parent().parent().toggle(applyToggle),html.find(`select[name="${settingName}"]`).parent().parent().toggle(applyToggle)}}}}__name(toggleMenuSettings,"toggleMenuSettings"),__name2(toggleMenuSettings,"toggleMenuSettings");async function getAllFromAllowedPacks({type="equipment",fields=[],filter=null,strictSourcing=!0,fetch=!1}={}){const FUNC="getAllFromAllowedPacks",browser=game.pf2e.compendiumBrowser,validTypes=Object.keys(browser.settings);validTypes.push("all");const aliases={actor:"bestiary",npc:"bestiary",ability:"action"},originalType=type;if(!validTypes.includes(type)&&!validTypes.includes(type=aliases[type]??""))return ui.notifications.error(`${FUNC}: invalid type ${originalType}`),null;if(!Array.isArray(fields)||fields.length&&fields.some(()=>!1))return ui.notifications.error(`${FUNC}: fields must be an array of only strings`),null;if(filter&&typeof filter!="function")return ui.notifications.error(`${FUNC}: provided filter must be a function`),null;Object.keys(browser.packLoader.sourcesSettings.sources).length||await browser.packLoader.updateSources(browser.loadedPacksAll());const loadablePacks=(type==="all"?Object.values(browser.settings).flatMap(t=>Object.entries(t)):Object.entries(browser.settings[type])).filter(([_,p])=>p.load).map(([pack])=>pack),sources=browser.packLoader.sourcesSettings.sources,loadableSources=Object.values(sources).filter(s=>s?.load).map(s=>s.name.slugify({strict:!0}));fields.push("system.details.publication","system.publication","system.source","system.details.source");const out=[],sourceFilter=__name2(d=>{const slug=(d?.system?.details?.publication?.title??d?.system?.publication?.title??d?.system?.details?.source?.value??d?.system?.source?.value??"").slugify({strict:!0});return slug?loadableSources.includes(slug):!strictSourcing},"sourceFilter");for(const packName of loadablePacks){const pack=game.packs.get(packName),sourcedDocs=(await pack?.getIndex({fields}))?.filter(sourceFilter);let filteredDocs=[];try{filteredDocs=filter?sourcedDocs?.filter(filter):sourcedDocs}catch(error){return ui.notifications.error(`Error in provided filter: ${error.toString()}`),null}if(fetch){const newVar=await pack?.getDocuments({_id__in:filteredDocs?.map(d=>d._id)});out.push(...newVar)}else out.push(...filteredDocs)}return out}__name(getAllFromAllowedPacks,"getAllFromAllowedPacks"),__name2(getAllFromAllowedPacks,"getAllFromAllowedPacks");async function increaseFocusPoints(actor,value){const focus=actor.system.resources.focus,current=focus.value,result=Math.min(current+value,focus.max);await actor.update({"system.resources.focus.value":result}),await ChatMessage.create({type:CONST.CHAT_MESSAGE_TYPES.EMOTE,speaker:ChatMessage.getSpeaker(actor),flavor:'<strong><img src="systems/pf2e/icons/actions/Passive.webp" width="10" height="10" style="border: 0; margin-right: 3px;" alt="Passive">Refocus</strong>',content:game.i18n.format(`${MODULENAME}.macros.refocus.regains`,{focus:result-current})})}__name(increaseFocusPoints,"increaseFocusPoints"),__name2(increaseFocusPoints,"increaseFocusPoints");async function refocus(actors=canvas.tokens.controlled.map(token=>token.actor)??[]){if(actors.length===1){const actor=canvas.tokens.controlled[0].actor;let regain=1;actor&&(actor.feats?.map(x=>x.feats).flat()?.find(i=>["bloodline-focus","bonded-focus","conflux-focus","devoted-focus","domain-focus","hex-focus","inspirational-focus","link-focus","meditative-focus","primal-focus","wardens-focus"].includes(i.feat?.system?.slug))&&(regain=actor.system.resources.focus.max),increaseFocusPoints(actor,regain))}else ui.notifications.warn(game.i18n.localize(`${MODULENAME}.macros.refocus.selectOneActor`))}__name(refocus,"refocus"),__name2(refocus,"refocus");const MODULENAME="xdy-pf2e-workbench",NPC_TYPE="npc",CHARACTER_TYPE="character",activeHooks=new Set;var Phase=(Phase2=>(Phase2[Phase2.DOWN=0]="DOWN",Phase2[Phase2.INIT=10]="INIT",Phase2[Phase2.SETUP=20]="SETUP",Phase2[Phase2.READY=30]="READY",Phase2[Phase2.ACTIVE=40]="ACTIVE",Phase2))(Phase||{});let phase=0;function handle(hookName,shouldBeOn,hookFunction,once=!1){activeHooks.has(hookName)?shouldBeOn||(Hooks.off(hookName,hookFunction),activeHooks.delete(hookName)):shouldBeOn&&(once?Hooks.once(hookName,hookFunction):Hooks.on(hookName,hookFunction),activeHooks.add(hookName))}__name(handle,"handle"),__name2(handle,"handle");function updateHooks(cleanSlate=!1){phase>20&&game.user.isGM&&game.socket.emit("module."+MODULENAME,{operation:"updateHooks"}),cleanSlate&&activeHooks.clear();const gs=game.settings;handle("getActorDirectoryEntryContext",gs.get(MODULENAME,"npcScaler"),onScaleNPCContextHook),handle("renderJournalDirectory",gs.get(MODULENAME,"npcRoller"),enableNpcRollerButton),handle("preCreateChatMessage",gs.get(MODULENAME,"castPrivateSpell")||gs.get(MODULENAME,"reminderTargeting")!=="no"||gs.get(MODULENAME,"reminderCannotAttack")==="cancelAttack",preCreateChatMessageHook),handle("createChatMessage",gs.get(MODULENAME,"autoRollDamageAllow")||gs.get(MODULENAME,"autoRollDamageForStrike")||gs.get(MODULENAME,"autoRollDamageForSpellAttack")||gs.get(MODULENAME,"autoRollDamageForSpellWhenNotAnAttack")!=="no"||gs.get(MODULENAME,"automatedAnimationOn")||gs.get(MODULENAME,"reminderBreathWeapon")||gs.get(MODULENAME,"reminderCannotAttack")==="reminder"||gs.get(MODULENAME,"autoGainDyingIfTakingDamageWhenAlreadyDying"),createChatMessageHook),handle("renderChatMessage",!0,renderChatMessageHook),handle("createItem",game.settings.get(MODULENAME,"dropHeldItemsOnBecomingUnconscious"),foundry.utils.debounce(createItemHook,10)),handle("updateItem",!1,updateItemHook),handle("deleteItem",gs.get(MODULENAME,"giveWoundedWhenDyingRemoved")||gs.get(MODULENAME,"giveUnconsciousIfDyingRemovedAt0HP"),deleteItemHook),handle("pf2e.systemReady",gs.get(MODULENAME,"housepatcher")!=="",pf2eSystemReadyHook,!0),handle("pf2e.endTurn",gs.get(MODULENAME,"decreaseFrightenedConditionEachTurn"),pf2eEndTurnHook),handle("pf2e.startTurn",gs.get(MODULENAME,"actionsReminderAllow")!=="none"||gs.get(MODULENAME,"autoReduceStunned"),pf2eStartTurnHook),handle("pf2e.reroll",gs.get(MODULENAME,"keeleysHeroPointRule"),pf2eRerollHook),handle("renderTokenHUD",gs.get(MODULENAME,"npcMystifier"),renderTokenHUDHook),handle("preUpdateActor",gs.get(MODULENAME,"enableAutomaticMove").startsWith("reaching0HP")||!String(gs.get(MODULENAME,"autoGainDyingAtZeroHP")).startsWith("no")||!String(gs.get(MODULENAME,"nonLethalIsNotLethal")).startsWith("no")||!String(gs.get(MODULENAME,"autoRemoveDyingAtGreaterThanZeroHP")).startsWith("no")||gs.get(MODULENAME,"autoRemoveUnconsciousAtGreaterThanZeroHP")||gs.get("pf2e","automation.lootableNPCs")&&gs.get(MODULENAME,"npcMystifyAllPhysicalMagicalItems")==="onZeroHp",preUpdateActorHook),handle("preUpdateToken",gs.get(MODULENAME,"tokenAnimation"),preUpdateTokenHook),handle("createToken",gs.get(MODULENAME,"npcMystifier")||gs.get("pf2e","automation.lootableNPCs")&&gs.get(MODULENAME,"npcMystifyAllPhysicalMagicalItems")==="onScene",createTokenHook),handle("renderActorSheet",!0,renderActorSheetHook),changePauseText()}__name(updateHooks,"updateHooks"),__name2(updateHooks,"updateHooks"),Hooks.on("renderPause",(_app,_html,_options)=>{changePauseText()}),Hooks.once("init",async _actor=>{logInfo(`${MODULENAME} | Initializing xdy-pf2e-workbench`),phase=10,registerWorkbenchSettings(),await preloadTemplates(),registerNpcRollerHandlebarsTemplates().then(),registerBasicActionMacrosHandlebarsTemplates().then(),registerHandlebarsHelpers(),Hooks.on("renderSettingsMenuPF2eWorkbench",(_app,html,_settings)=>{toggleMenuSettings(html,_settings),_app.setPosition()}),updateHooks()});function changePauseText(){if(!document?.querySelector("#pause")?.classList.contains("paused"))return;if(game.settings.get(MODULENAME,"customPauseImage")!==""){const path=game.settings.get(MODULENAME,"customPauseImage"),prefix=path.startsWith("http")?"":"../../../";document.documentElement.style.setProperty("--xdy-pf2e-workbench-pause","url("+prefix+path+")")}document.documentElement.style.setProperty("--xdy-pf2e-workbench-pause-bottom","10%"),document.documentElement.style.setProperty("--xdy-pf2e-workbench-pause-figcaption-top","0%"),game.settings.get(MODULENAME,"customPauseRelocation")&&(document.documentElement.style.setProperty("--xdy-pf2e-workbench-pause-bottom","calc(50% - 64px)"),document.documentElement.style.setProperty("--xdy-pf2e-workbench-pause-figcaption-top","-100%"),document.documentElement.style.setProperty("--xdy-pf2e-workbench-pause-background",""));const text=game.settings.get(MODULENAME,"customPauseText");if(phase>=30){const element=document.querySelector("figcaption");text&&text!==""&&element&&(element.textContent=text,game?.i18n?.translations?.GAME.Paused&&(game.i18n.translations.GAME.Paused=text))}}__name(changePauseText,"changePauseText"),__name2(changePauseText,"changePauseText"),Hooks.once("setup",async()=>{logInfo(`${MODULENAME} | Setting up`),phase=20,registerWorkbenchKeybindings()});function handleCampaignFeatSection(){const legacyVariantRuleAncestryParagon=game.settings.get(MODULENAME,"legacyVariantRuleAncestryParagon"),legacyVariantRuleDualClass=game.settings.get(MODULENAME,"legacyVariantRuleDualClass");if(legacyVariantRuleDualClass||legacyVariantRuleAncestryParagon){const campaignFeatSections2=game.settings.get("pf2e","campaignFeatSections");legacyVariantRuleAncestryParagon&&(campaignFeatSections2.find(section=>section.id==="xdy_ancestryparagon")||campaignFeatSections2.push({id:"xdy_ancestryparagon",label:game.i18n.localize(`${MODULENAME}.SETTINGS.legacyVariantRuleAncestryParagon.title`),supported:["ancestry"],slots:[1,3,7,11,15,19]})),legacyVariantRuleDualClass&&(campaignFeatSections2.find(section=>section.id==="xdy_dualclass")||campaignFeatSections2.push({id:"xdy_dualclass",label:game.i18n.localize(`${MODULENAME}.SETTINGS.legacyVariantRuleDualClass.title`),supported:["class"],slots:[1,2,4,6,8,10,12,14,16,18,20]})),game.settings.set("pf2e","campaignFeatSections",campaignFeatSections2)}const campaignFeatSections=game.settings.get("pf2e","campaignFeatSections");campaignFeatSections&&!legacyVariantRuleDualClass&&campaignFeatSections.find(section=>section.id==="xdy_dualclass")&&(campaignFeatSections.splice(campaignFeatSections.findIndex(section=>section.id==="xdy_dualclass"),1),game.settings.set("pf2e","campaignFeatSections",campaignFeatSections)),campaignFeatSections&&!legacyVariantRuleAncestryParagon&&campaignFeatSections.find(section=>section.id==="xdy_ancestryparagon")&&(campaignFeatSections.splice(campaignFeatSections.findIndex(section=>section.id==="xdy_ancestryparagon"),1),game.settings.set("pf2e","campaignFeatSections",campaignFeatSections))}__name(handleCampaignFeatSection,"handleCampaignFeatSection"),__name2(handleCampaignFeatSection,"handleCampaignFeatSection"),Hooks.once("ready",()=>{logInfo(`${MODULENAME} | Ready`),phase=30,game.PF2eWorkbench={resetHeroPoints,addHeroPoints,scaleNPCToLevelFromActor,moveSelectedAheadOfCurrent,doMystificationFromToken,generateNameFromTraitsFromTokenId:generateNameFromTraitsForToken,noOrSuccessfulFlatcheck,basicActionMacros,refocus,buildNpcSpellbookJournal,callHeroPointHandler,mystifyNpcItems,getAllFromAllowedPacks},game.modules.get("pf2e-sheet-skill-actions")?.active&&ui.notifications.error(game.i18n.localize(`${MODULENAME}.modules.pf2e-sheet-skill-actions`)),game.modules.get("pf2e-toolbox")?.active&&ui.notifications.error(game.i18n.localize(`${MODULENAME}.modules.pf2e-toolbox`));const ta=game.settings.get(MODULENAME,"tokenAnimation"),mlt=game.modules.get("multilevel-tokens");if(ta&&mlt?.active&&ui.notifications.error(game.i18n.localize(`${MODULENAME}.modules.multilevel-tokens`)),updateHooks(),isFirstGM()&&game.settings.get(MODULENAME,"heroPointHandler")){let remainingMinutes=calcRemainingMinutes(!1);(remainingMinutes>0||game.settings.get(MODULENAME,"heroPointHandlerStartTimerOnReady"))&&(remainingMinutes=calcRemainingMinutes(!0),startTimer(remainingMinutes).then(()=>{createRemainingTimeMessage(remainingMinutes)}))}game.socket.on("module."+MODULENAME,operation=>{switch(operation?.operation){case"updateHooks":game.user.isGM||updateHooks();break;case"notification":if(!game.user.isGM){const type=operation.args[0],message=operation.args[1];ui.notifications.notify(message,type)}break}}),handleCampaignFeatSection(),phase=40,Hooks.callAll(`${MODULENAME}.moduleReady`)});function registerHandlebarsHelpers(){Handlebars.registerHelper("xdy_includes",function(array,value,options){return array.includes(value)?options.fn(this):options.inverse(this)}),Handlebars.registerHelper("xdy_ifeq",function(v1,v2,options){return v1===v2?options.fn(this):options.inverse()}),Handlebars.registerHelper("xdy_ifne",function(v1,v2,options){return v1!==v2?options.fn(this):options.inverse()}),Handlebars.registerHelper("xdy_isNaN",function(context,options){return isNaN(context)&&typeof context!="string"?options.fn(this):options.inverse(this)}),Handlebars.registerHelper("xdy_undefined",function(){}),Handlebars.registerHelper("xdy_hasKey",function(context,key){for(const prop of context)if(Object.getOwnPropertyDescriptor(prop,key))return!0;return!1})}__name(registerHandlebarsHelpers,"registerHandlebarsHelpers"),__name2(registerHandlebarsHelpers,"registerHandlebarsHelpers");export{CHARACTER_TYPE,MODULENAME,NPC_TYPE,Phase,changePauseText,phase,updateHooks};
//# sourceMappingURL=xdy-pf2e-workbench.mjs.map
