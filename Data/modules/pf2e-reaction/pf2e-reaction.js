function hasEffect(e,t){return e?.itemTypes?.effect?.find(e=>t===e.slug)}function heldItems(e,t,a=undefined){if(!e)return[];let i=Object.values(e?.itemTypes).flat(1).filter(e=>e.handsHeld>0).filter(e=>e.slug===t||e.category===t);if(a&&i.length>0){i=i.filter(e=>e.traits.has(a))}return i}function messageType(e,t){return t===e?.flags?.pf2e?.context?.type}function failureMessageOutcome(e){return"failure"===e?.flags?.pf2e?.context?.outcome}function criticalFailureMessageOutcome(e){return"criticalFailure"===e?.flags?.pf2e?.context?.outcome}function successMessageOutcome(e){return"success"===e?.flags?.pf2e?.context?.outcome}function criticalSuccessMessageOutcome(e){return"criticalSuccess"===e?.flags?.pf2e?.context?.outcome}function anyFailureMessageOutcome(e){return failureMessageOutcome(e)||criticalFailureMessageOutcome(e)}function anySuccessMessageOutcome(e){return successMessageOutcome(e)||criticalSuccessMessageOutcome(e)}function hasOption(e,t){return e?.flags?.pf2e?.context?.options?.includes(t)}function actorActionBySource(e,t){return e?.itemTypes?.action?.find(e=>t===e.sourceId)}function actorSpellBySource(e,t){return e?.itemTypes?.spell?.find(e=>t===e.sourceId)}function actorFeatBySource(e,t){return e?.itemTypes?.feat?.find(e=>t===e.sourceId)}function canReachEnemy(t,a,i,n=undefined){if(isNPC(i)){let e=i?.system?.actions.filter(e=>e.ready);if(n){n=n.toLowerCase();e=e.filter(e=>e.label.toLowerCase()===n||e?.weapon?.slug?.toLowerCase()===n)}const o=e.map(e=>e.traits).flat().map(e=>e.name).filter(e=>e.startsWith("reach")).map(e=>e.split("-").slice(-1)[0]);const r=getEnemyDistance(t,a);if(o.length){return r<=Math.max(...o)}else{return r<=i.attributes.reach.base}}else{let e=Math.max(i?.system?.actions?.filter(e=>e.ready).map(e=>e?.weaponTraits?.find(e=>e.name.startsWith("reach"))?.name?.replace("reach-","")).filter(e=>e).map(e=>Number(e)));if(e){return getEnemyDistance(t,a)<=e}return getEnemyDistance(t,a)<=i.attributes.reach.base||hasReachWeapon(i)&&getEnemyDistance(t,a,i.attributes.reach.base+5)<=i.attributes.reach.base+5}}function adjacentEnemy(e,t){return getEnemyDistance(e,t)<=5}function getEnemyDistance(e,t,a=null){return e.object.distanceTo(t.object,{reach:a})}function nonReach(e){return!e.find(e=>e.startsWith("reach"))}function actorHeldWeapon(e){return e?.system?.actions?.filter(e=>e.ready)}function hasReachWeapon(e){return e?.system?.actions?.filter(e=>e.ready)?.filter(e=>e?.weaponTraits?.find(e=>e.name==="reach"))?.length!==0}function isTargetCharacter(e){return isActorCharacter(e?.target?.actor)}function isActorCharacter(e){return["character","npc","familiar"].includes(e?.type)&&e?.alliance==="party"}function isNPC(e){return"npc"===e?.type}function _uuid(e){return e.uuid}let socketlibSocket=undefined;async function deleteItem(e){await(await fromUuid(e)).delete()}async function updateItem(e,t){(await fromUuid(e)).update(t)}const setupSocket=()=>{if(globalThis.socketlib){socketlibSocket=globalThis.socketlib.registerModule("pf2e-reaction");socketlibSocket.register("deleteItem",deleteItem);socketlibSocket.register("updateItem",updateItem)}return!!globalThis.socketlib};Hooks.once("setup",function(){if(!setupSocket())console.error("Error: Unable to set up socket lib for PF2e Reaction Checker")});const Requirement={None:"pf2e-reaction.SETTINGS.requirement.None",ActorHasEffect:"pf2e-reaction.SETTINGS.requirement.ActorHasEffect",TargetHasEffect:"pf2e-reaction.SETTINGS.requirement.TargetHasEffect",ActorHoldsItem:"pf2e-reaction.SETTINGS.requirement.ActorHoldsItem",TargetHoldsItem:"pf2e-reaction.SETTINGS.requirement.TargetHoldsItem"};const Trigger={None:"pf2e-reaction.SETTINGS.trigger.None",CriticalFailSavingThrow:"pf2e-reaction.SETTINGS.trigger.CriticalFailSavingThrow",FailSavingThrow:"pf2e-reaction.SETTINGS.trigger.FailSavingThrow",CriticalHitCreature:"pf2e-reaction.SETTINGS.trigger.CriticalHitCreature",EnemyUseManipulateAction:"pf2e-reaction.SETTINGS.trigger.EnemyUseManipulateAction",EnemyUseMoveAction:"pf2e-reaction.SETTINGS.trigger.EnemyUseMoveAction",EnemyUseRangedAttack:"pf2e-reaction.SETTINGS.trigger.EnemyUseRangedAttack",AllyTakeDamage:"pf2e-reaction.SETTINGS.trigger.AllyTakeDamage",ActorTakeDamage:"pf2e-reaction.SETTINGS.trigger.ActorTakeDamage",CreatureAttacksAlly:"pf2e-reaction.SETTINGS.trigger.CreatureAttacksAlly",YouHPZero:"pf2e-reaction.SETTINGS.trigger.YouHPZero",AllyHPZero:"pf2e-reaction.SETTINGS.trigger.AllyHPZero",EnemyUsesTrait:"pf2e-reaction.SETTINGS.trigger.EnemyUsesTrait",EnemyCastSpell:"pf2e-reaction.SETTINGS.trigger.EnemyCastSpell",EnemyHitsActor:"pf2e-reaction.SETTINGS.trigger.EnemyHitsActor",EnemyCriticalFailHitsActor:"pf2e-reaction.SETTINGS.trigger.EnemyCriticalFailHitsActor",EnemyCriticalHitsActor:"pf2e-reaction.SETTINGS.trigger.EnemyCriticalHitsActor",EnemyFailHitsActor:"pf2e-reaction.SETTINGS.trigger.EnemyFailHitsActor",ActorFailsHit:"pf2e-reaction.SETTINGS.trigger.ActorFailsHit",ActorFailsSkillCheck:"pf2e-reaction.SETTINGS.trigger.ActorFailsSkillCheck"};class HomebrewReactionRequirement{constructor(e){this.idx=e;this.name=Requirement.None;this.effect="";this.item="";this.trait="";this.choices=Requirement}static fromObj(e){const t=new HomebrewReactionRequirement;Object.assign(t,e);t.choices=Requirement;return t}}class HomebrewReactionTrigger{constructor(e){this.idx=e;this.name=Trigger.None;this.reachValue=0;this.reach=false;this.adjacent=false;this.trait="";this.choices=Trigger}static fromObj(e){const t=new HomebrewReactionTrigger;Object.assign(t,e);t.choices=Trigger;return t}}class HomebrewReaction{constructor(e){this.idx=e;this.uuid="";this.triggers=[new HomebrewReactionTrigger(0)];this.requirements=[]}static fromObj(e){const t=new HomebrewReaction;Object.assign(t,e);t.triggers=t.triggers.map(e=>HomebrewReactionTrigger.fromObj(e));t.requirements=t.requirements.map(e=>HomebrewReactionRequirement.fromObj(e));return t}}class ReactionHomebrewSettings extends FormApplication{static namespace="homebrewSettings";homebrewReactions=[];constructor(e){super();const t=game.settings.get("pf2e-reaction","homebrewReactions");if(t){this.homebrewReactions=t.map(e=>HomebrewReaction.fromObj(e));this.updateIndexes()}}static get defaultOptions(){return mergeObject(super.defaultOptions,{title:game.i18n.localize(`pf2e-reaction.SETTINGS.${this.namespace}.name`),id:`${this.namespace}-settings`,classes:["settings-menu"],template:`modules/pf2e-reaction/templates/homebrew.hbs`,width:1050,height:"auto",closeOnSubmit:true,resizable:true})}static get settings(){return{useHomebrew:{name:game.i18n.localize(`pf2e-reaction.SETTINGS.useHomebrew.name`),scope:"world",default:false,type:Boolean},homebrewReactions:{name:game.i18n.localize(`pf2e-reaction.SETTINGS.homebrewReactions.name`),scope:"world",default:[],type:Array}}}static registerSettings(){for(const e of Object.keys(this.settings)){game.settings.register("pf2e-reaction",e,{...this.settings[e],config:false})}}static init(){game.settings.registerMenu("pf2e-reaction",this.namespace,{name:game.i18n.localize(`pf2e-reaction.SETTINGS.${this.namespace}.name`),label:game.i18n.localize(`pf2e-reaction.SETTINGS.${this.namespace}.label`),hint:game.i18n.localize(`pf2e-reaction.SETTINGS.${this.namespace}.hint`),icon:"fas fa-hand",type:this,restricted:true});this.registerSettings()}getData(){const e=Object.entries(ReactionHomebrewSettings.settings).filter(([e,t])=>{return e!=="homebrewReactions"}).map(([e,t])=>{const a=game.settings.get("pf2e-reaction",e);return{...t,key:e,value:a,isCheckbox:t.type===Boolean}});return mergeObject(super.getData(),{settings:e,homebrewReactions:this.homebrewReactions})}async updateHomebrewReactions(e,t){if(!e.startsWith("homebrewReaction."))return;const a=e.replace("homebrewReaction.","");const i=a.split(".");const n=i[0];const o=i[1];if(o==="triggers"||o==="requirements"){const r=i[2];const c=i[3];this.homebrewReactions[n][o][r][c]=t}else{this.homebrewReactions[n][o]=t}}async _updateObject(e,t){for(const a of Object.keys(t)){if(a.startsWith("homebrewReaction."))continue;let e=t[a];if(e===null||e==="null"){e=""}await game.settings.set("pf2e-reaction",a,e)}for(const a of Object.keys(t)){if(!a.startsWith("homebrewReaction."))continue;const i=t[a];this.updateHomebrewReactions(a,i)}await game.settings.set("pf2e-reaction","homebrewReactions",this.rawValue())}updateIndexes(){for(let t=0;t<this.homebrewReactions.length;t++){this.homebrewReactions[t].idx=t;for(let e=0;e<this.homebrewReactions[t].triggers.length;e++){this.homebrewReactions[t].triggers[e].idx=e}for(let e=0;e<this.homebrewReactions[t].requirements.length;e++){this.homebrewReactions[t].requirements[e].idx=e}}}rawValue(){const t=[];for(let e=0;e<this.homebrewReactions.length;e++){t.push({uuid:this.homebrewReactions[e].uuid,triggers:this.homebrewReactions[e].triggers.map(e=>{return{name:e.name,reachValue:e.reachValue,reach:e.reach,adjacent:e.adjacent,trait:e.trait}}),requirements:this.homebrewReactions[e].requirements.map(e=>{return{name:e.name,effect:e.effect,item:e.item,trait:e.trait}})})}return t}updateForm(e){$(e.currentTarget).closest("form").serializeArray().forEach(e=>{this.updateHomebrewReactions(e.name,e.value)})}activateListeners(e){super.activateListeners(e);e.find(".add-reaction").click(async e=>{this.updateForm(e);this.homebrewReactions.push(new HomebrewReaction(this.homebrewReactions.length));super.render()});e.find(".homebrew-reaction-delete").click(async e=>{this.updateForm(e);this.homebrewReactions.splice($(e.currentTarget).data().idx,1);this.updateIndexes();super.render()});e.find(".trigger-reaction-delete").click(async e=>{this.updateForm(e);this.homebrewReactions[$(e.currentTarget).data().parent].triggers.splice($(e.currentTarget).data().idx,1);this.updateIndexes();super.render()});e.find(".requirement-reaction-delete").click(async e=>{this.updateForm(e);this.homebrewReactions[$(e.currentTarget).data().parent].requirements.splice($(e.currentTarget).data().idx,1);this.updateIndexes();super.render()});e.find(".add-reaction-trigger").click(async e=>{this.updateForm(e);const t=$(e.currentTarget).data().idx;this.homebrewReactions[t].triggers.push(new HomebrewReactionTrigger(this.homebrewReactions[t].triggers.length));super.render()});e.find(".add-reaction-requirement").click(async e=>{this.updateForm(e);const t=$(e.currentTarget).data().idx;this.homebrewReactions[t].requirements.push(new HomebrewReactionRequirement(this.homebrewReactions[t].requirements.length));super.render()});e.find(".homebrew-reaction-trigger").change(async e=>{this.updateForm(e);this.homebrewReactions[$(e.currentTarget).data().parent].triggers[$(e.currentTarget).data().idx].name=$(e.currentTarget).val();if("EnemyUsesTrait"!==$(e.currentTarget).val()){this.homebrewReactions[$(e.currentTarget).data().parent].triggers[$(e.currentTarget).data().idx].trait=""}super.render()});e.find(".homebrew-reaction-requirement").change(async e=>{this.updateForm(e);this.homebrewReactions[$(e.currentTarget).data().parent].requirements[$(e.currentTarget).data().idx].name=$(e.currentTarget).val();if("ActorHasEffect"!==$(e.currentTarget).val()&&"TargetHasEffect"!==$(e.currentTarget).val()){this.homebrewReactions[$(e.currentTarget).data().parent].requirements[$(e.currentTarget).data().idx].effect=""}if("ActorHoldsItem"!==$(e.currentTarget).val()&&"TargetHoldsItem"!==$(e.currentTarget).val()){this.homebrewReactions[$(e.currentTarget).data().parent].requirements[$(e.currentTarget).data().idx].item="";this.homebrewReactions[$(e.currentTarget).data().parent].requirements[$(e.currentTarget).data().idx].trait=""}super.render()})}}async function handleHomebrewMessages(i){if(Settings.useHomebrew){Settings.homebrewReactions.filter(e=>e.uuid.length>0&&e.triggers.length>0).filter(e=>e.triggers.filter(e=>e.name!=="None").length>0).forEach(t=>{const a=t.triggers.filter(e=>e.name!=="None");const e=t.requirements.filter(e=>e.name!=="None");if(!messageRequirements(i,e)){return}if(a.some(e=>handleHomebrewTrigger(e,i))){combatantsForTriggers(a,i).filter(e=>actorFeatBySource(e.actor,t.uuid)||actorActionBySource(e.actor,t.uuid)||actorSpellBySource(e.actor,t.uuid)).forEach(e=>{postInChatTemplate(_uuid(t),e,undefined,a.find(e=>e.name==="YouHPZero")!==undefined)})}})}}function handleHomebrewTrigger(e,t){if(e.name==="EnemyUseRangedAttack"&&messageType(t,"attack-roll")&&t?.flags?.pf2e?.context?.domains.includes("ranged-attack-roll")){return true}if(e.name==="EnemyUseManipulateAction"&&t?.item?.type==="action"&&t?.item?.system?.traits?.value.includes("manipulate")){return true}if(e.name==="EnemyUseMoveAction"&&t?.item?.type==="action"&&t?.item?.system?.traits?.value.includes("move")){return true}if(e.name==="FailSavingThrow"&&messageType(t,"saving-throw")&&anyFailureMessageOutcome(t)){return true}if(e.name==="CriticalFailSavingThrow"&&messageType(t,"saving-throw")&&criticalFailureMessageOutcome(t)){return true}if(e.name==="CriticalHitCreature"&&messageType(t,"attack-roll")&&criticalSuccessMessageOutcome(t)){return true}if(e.name==="AllyTakeDamage"&&messageType(t,"damage-roll")){return true}if(e.name==="ActorTakeDamage"&&messageType(t,"damage-roll")){return true}if((e.name==="YouHPZero"||e.name==="AllyHPZero")&&t?.flags?.pf2e?.appliedDamage&&!t?.flags?.pf2e?.appliedDamage?.isHealing&&t.actor.system?.attributes?.hp?.value===0){return true}if(e.name==="EnemyUsesTrait"&&t?.item?.system?.traits?.value?.includes(e.trait)){return true}if(e.name==="EnemyCastSpell"&&(t?.flags?.pf2e?.casting||messageType(t,"spell-cast"))){return true}if(e.name==="EnemyHitsActor"&&messageType(t,"attack-roll")){return true}if(e.name==="EnemyCriticalFailHitsActor"&&messageType(t,"attack-roll")&&criticalFailureMessageOutcome(t)){return true}if(e.name==="EnemyCriticalHitsActor"&&messageType(t,"attack-roll")&&criticalSuccessMessageOutcome(t)){return true}if(e.name==="EnemyFailHitsActor"&&messageType(t,"attack-roll")&&anyFailureMessageOutcome(t)){return true}if(e.name==="ActorFailsHit"&&messageType(t,"attack-roll")&&anyFailureMessageOutcome(t)){return true}if(e.name==="CreatureAttacksAlly"&&messageType(t,"attack-roll")){return true}if(e.name==="ActorFailsSkillCheck"&&messageType(t,"skill-check")&&anyFailureMessageOutcome(t)){return true}return false}function filterByDistance(e,t,a){let i=e;if(t.reach){i=i.filter(e=>canReachEnemy(a.token,e.token,e.actor))}else if(t.adjacent){i=i.filter(e=>adjacentEnemy(a.token,e.token))}else if(t.reachValue>0){i=i.filter(e=>getEnemyDistance(a.token,e.token)<=t.reachValue)}return i}function messageRequirements(t,e){return e.every(e=>{if(e.name==="TargetHasEffect"&&hasEffect(t?.target?.actor,e.effect)){return true}if(e.name==="ActorHasEffect"&&hasEffect(t?.actor,e.effect)){return true}if(e.name==="ActorHoldsItem"&&heldItems(t?.actor,e.item,e.trait).length>0){return true}if(e.name==="TargetHoldsItem"&&heldItems(t?.target?.actor,e.item,e.trait).length>0){return true}return false})}function combatantsForTriggers(e,a){let i=[];e.forEach(e=>{if(e.name==="EnemyUseRangedAttack"&&messageType(a,"attack-roll")&&a?.flags?.pf2e?.context?.domains.includes("ranged-attack-roll")){const t=filterByDistance(isActorCharacter(a?.actor)?npcWithReaction():characterWithReaction(),e,a);i=i.concat(t)}if(e.name==="EnemyUseManipulateAction"&&a?.item?.type==="action"&&a?.item?.system?.traits?.value.includes("manipulate")){const t=filterByDistance(isActorCharacter(a?.actor)?npcWithReaction():characterWithReaction(),e,a);i=i.concat(t)}if(e.name==="EnemyUseMoveAction"&&a?.item?.type==="action"&&a?.item?.system?.traits?.value.includes("move")){const t=filterByDistance(isActorCharacter(a?.actor)?npcWithReaction():characterWithReaction(),e,a);i=i.concat(t)}if(e.name==="FailSavingThrow"&&messageType(a,"saving-throw")&&anyFailureMessageOutcome(a)){const t=filterByDistance([a?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="CriticalFailSavingThrow"&&messageType(a,"saving-throw")&&criticalFailureMessageOutcome(a)){const t=filterByDistance([a?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="CriticalHitCreature"&&messageType(a,"attack-roll")&&criticalSuccessMessageOutcome(a)){const t=filterByDistance([a?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="AllyTakeDamage"&&messageType(a,"damage-roll")){const t=filterByDistance((isTargetCharacter(a)?characterWithReaction():npcWithReaction()).filter(e=>e?.actor?.id!==a?.target?.actor._id),e,a);i=i.concat(t)}if(e.name==="ActorTakeDamage"&&messageType(a,"damage-roll")){const t=filterByDistance([a?.target?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="YouHPZero"&&a?.flags?.pf2e?.appliedDamage&&!a?.flags?.pf2e?.appliedDamage?.isHealing&&a.actor.system?.attributes?.hp?.value===0){const t=filterByDistance([a?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="AllyHPZero"&&a?.flags?.pf2e?.appliedDamage&&!a?.flags?.pf2e?.appliedDamage?.isHealing&&a.actor.system?.attributes?.hp?.value===0){const t=filterByDistance((isTargetCharacter(a)?characterWithReaction():npcWithReaction()).filter(e=>e.actorId!==a?.actor?._id),e,a);i=i.concat(t)}if(e.name==="EnemyUsesTrait"&&a?.item?.system?.traits?.value?.includes(e.trait)){const t=filterByDistance(isActorCharacter(a?.actor)?npcWithReaction():characterWithReaction(),e,a);i=i.concat(t)}if(e.name==="EnemyCastSpell"&&(a?.flags?.pf2e?.casting||messageType(a,"spell-cast"))){const t=filterByDistance(isActorCharacter(a?.actor)?npcWithReaction():characterWithReaction(),e,a);i=i.concat(t)}if(e.name==="EnemyHitsActor"&&messageType(a,"attack-roll")){const t=filterByDistance([a?.target?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="EnemyCriticalFailHitsActor"&&messageType(a,"attack-roll")&&criticalFailureMessageOutcome(a)){const t=filterByDistance([a?.target?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="EnemyCriticalHitsActor"&&messageType(a,"attack-roll")&&criticalSuccessMessageOutcome(a)){const t=filterByDistance([a?.target?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="EnemyFailHitsActor"&&messageType(a,"attack-roll")&&anyFailureMessageOutcome(a)){const t=filterByDistance([a?.target?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="ActorFailsHit"&&messageType(a,"attack-roll")&&anyFailureMessageOutcome(a)){const t=filterByDistance([a?.token?.combatant],e,a);i=i.concat(t)}if(e.name==="CreatureAttacksAlly"&&messageType(a,"attack-roll")){const t=filterByDistance((isActorCharacter(a?.actor)?npcWithReaction():characterWithReaction()).filter(e=>e?.actor?.id!==a?.target?.actor._id),e,a);i=i.concat(t)}if(e.name==="ActorFailsSkillCheck"&&messageType(a,"skill-check")&&anyFailureMessageOutcome(a)){const t=filterByDistance([a?.token?.combatant],e,a);i=i.concat(t)}});i=i.filter(e=>e!==null);i=[...new Map(i.map(e=>[e["actorId"],e])).values()];return i}Hooks.on("preUpdateToken",(e,t,a,i)=>{if(game?.combats?.active&&(t.x>0||t.y>0)){handleHomebrewMessages({token:e,item:{type:"action",system:{traits:{value:["move"]}}},actor:e.actor})}});Hooks.on("preCreateChatMessage",async(e,t,a,i)=>{handleHomebrewMessages(e)});class Settings{static get weaponRange(){return game.settings.get("pf2e-reaction","weaponRange")}static get recallKnowledge(){return game.settings.get("pf2e-reaction","recall-knowledge")}static get recallKnowledgeHideDef(){return game.settings.get("pf2e-reaction","recall-knowledge-hide-def")}static get recallKnowledgeEasyLore(){return game.settings.get("pf2e-reaction","recall-knowledge-easyLore")}static get recallKnowledgeVeryEasyLore(){return game.settings.get("pf2e-reaction","recall-knowledge-veryEasyLore")}static get notification(){return game.settings.get("pf2e-reaction","on_notification")}static get showToPlayers(){return game.settings.get("pf2e-reaction","show-to-players")}static get useHomebrew(){return game.settings.get("pf2e-reaction","useHomebrew")}static get addReactionEffect(){return game.settings.get("pf2e-reaction","addReactionEffect")}static get allReactionEffect(){return game.settings.get("pf2e-reaction","allReactionEffect")}static get homebrewReactions(){return game.settings.get("pf2e-reaction","homebrewReactions")}static get postMessage(){return game.settings.get("pf2e-reaction","postMessage")}static register(){ReactionHomebrewSettings.init();game.settings.register("pf2e-reaction","weaponRange",{name:game.i18n.localize("pf2e-reaction.weaponRange.name"),hint:game.i18n.localize("pf2e-reaction.weaponRange.hint"),scope:"world",config:true,default:5,type:Number});game.settings.register("pf2e-reaction","recall-knowledge",{name:game.i18n.localize("pf2e-reaction.recall-knowledge.name"),hint:game.i18n.localize("pf2e-reaction.recall-knowledge.hint"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","recall-knowledge-hide-def",{name:game.i18n.localize("pf2e-reaction.hide"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","recall-knowledge-easyLore",{name:game.i18n.localize("pf2e-reaction.recall-knowledge-easyLore.name"),hint:game.i18n.localize("pf2e-reaction.recall-knowledge-easyLore.hint"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","recall-knowledge-veryEasyLore",{name:game.i18n.localize("pf2e-reaction.recall-knowledge-veryEasyLore.name"),hint:game.i18n.localize("pf2e-reaction.recall-knowledge-veryEasyLore.hint"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","on_notification",{name:game.i18n.localize("pf2e-reaction.show-notification.name"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","show-to-players",{name:game.i18n.localize("pf2e-reaction.show-to-players.name"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","addReactionEffect",{name:game.i18n.localize("pf2e-reaction.addReactionEffect.name"),hint:game.i18n.localize("pf2e-reaction.addReactionEffect.hint"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","allReactionEffect",{name:game.i18n.localize("pf2e-reaction.allReactionEffect.name"),hint:game.i18n.localize("pf2e-reaction.allReactionEffect.hint"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","postMessage",{name:game.i18n.localize("pf2e-reaction.post"),scope:"world",config:true,default:false,type:Boolean});game.settings.register("pf2e-reaction","timeoutDelete",{name:game.i18n.localize("pf2e-reaction.delete.name"),hint:game.i18n.localize("pf2e-reaction.delete.hint"),scope:"world",config:true,default:0,type:Number});game.keybindings.register("pf2e-reaction","skipTriggerReaction",{name:game.i18n.localize("pf2e-reaction.hotkey-v.name"),hint:game.i18n.localize("pf2e-reaction.hotkey-v.hint"),editable:[{key:"KeyV"}],onDown:()=>{game.skipMoveTrigger=mergeObject(game.skipMoveTrigger??{},{[game.userId]:true});return true},onUp:()=>{game.skipMoveTrigger=mergeObject(game.skipMoveTrigger??{},{[game.userId]:false});return true}})}}async function ringBell(a){if(messageType(a,"spell-attack-roll")||messageType(a,"attack-roll")){if(hasReaction(a?.target?.token?.combatant)){const e=actorAction(a?.target?.actor,"ring-bell");if(e&&getEnemyDistance(a.token,a.target?.token)<=30&&hasExploitVulnerabilityEffect(a.actor,a?.target?.actor)){await postInChatTemplate(_uuid(e),a.target?.token.combatant)}}if(isTargetCharacter(a)){characterWithReaction().forEach(e=>{if(!hasExploitVulnerabilityEffect(a.actor,e.actor)){return}const t=actorAction(e?.actor,"ring-bell");if(t&&getEnemyDistance(e?.token,a.token)<=30){postInChatTemplate(_uuid(t),e)}})}}else if(messageType(a,"saving-throw")){const i=await fromUuid(a?.flags?.pf2e?.origin?.uuid);if(i&&hasReaction(a?.token?.combatant)){const t=actorAction(a?.actor,"ring-bell");if(t&&getEnemyDistance(a.token,i?.actor?.token)<=30&&hasExploitVulnerabilityEffect(i?.actor,a.actor)){await postInChatTemplate(_uuid(t),a?.actor?.combatant)}}if(isActorCharacter(a?.actor)){characterWithReaction().filter(e=>e.actorId!==a?.actor._id).forEach(e=>{const t=actorAction(e?.actor,"ring-bell");if(t&&getEnemyDistance(e?.token,i?.actor?.token)<=30&&hasExploitVulnerabilityEffect(i?.actor,e.actor)){postTargetInChatTemplate(_uuid(t),e)}})}}}async function ferocity(t){if(t?.flags?.pf2e?.appliedDamage&&!t?.flags?.pf2e?.appliedDamage?.isHealing){if(t.actor.system?.attributes?.hp?.value===0&&hasReaction(t?.token?.combatant)){const e=actorAction(t?.actor,"ferocity");if(e){await postInChatTemplate(_uuid(e),t?.token?.combatant,undefined,true)}}}}async function entitysResurgence(e){if(e?.flags?.pf2e?.appliedDamage&&!e?.flags?.pf2e?.appliedDamage?.isHealing){if(e.actor.system?.attributes?.hp?.value===0&&hasReaction(e?.token?.combatant)){const t=actorAction(e?.actor,"entitys-resurgence");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant,undefined,true)}}}}async function finalSpite(e){if(e?.flags?.pf2e?.appliedDamage&&!e?.flags?.pf2e?.appliedDamage?.isHealing){if(e.actor.system?.attributes?.hp?.value===0&&hasReaction(e?.token?.combatant)){const t=actorAction(e?.actor,"final-spite");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant,undefined,true)}}}}async function amuletsAbeyance(a){if(messageType(a,"damage-roll")){if(hasReaction(a?.target?.token?.combatant)){const e=actorAction(a?.target?.actor,"amulets-abeyance");if(e&&hasExploitVulnerabilityEffect(a.actor,a?.target?.actor)){await postInChatTemplate(_uuid(e),a?.target?.token?.combatant)}}if(a?.target){(isTargetCharacter(a)?characterWithReaction():npcWithReaction()).filter(e=>e?.actor?.id!==a?.target?.actor._id).forEach(e=>{if(getEnemyDistance(a.target?.token,e.token)<=15&&hasExploitVulnerabilityEffect(a.actor,e.actor)){const t=actorAction(e.actor,"amulets-abeyance");if(t){postTargetInChatTemplate(_uuid(t),e)}}})}}}async function retributiveStrike(a){if(messageType(a,"damage-roll")){if(a?.target){(isTargetCharacter(a)?characterWithReaction():npcWithReaction()).filter(e=>e?.actor?.id!==a?.target?.actor._id).forEach(e=>{if(getEnemyDistance(a.target?.token,e.token)<=15&&getEnemyDistance(a.token,e.token)<=15){const t=actorAction(e.actor,"retributive-strike");if(t){postTargetInChatTemplate(_uuid(t),e)}}})}}}async function denierOfDestruction(a){if(messageType(a,"damage-roll")){if(a?.target){(isTargetCharacter(a)?characterWithReaction():npcWithReaction()).filter(e=>e?.actor?.id!==a?.target?.actor._id).forEach(e=>{if(getEnemyDistance(a.target?.token,e.token)<=30){const t=actorAction(e.actor,"denier-of-destruction");if(t){postTargetInChatTemplate(_uuid(t),e)}}})}}}async function glimpseOfRedemption(a){if(messageType(a,"damage-roll")){if(a?.target){(isTargetCharacter(a)?characterWithReaction():npcWithReaction()).filter(e=>e?.actor?.id!==a?.target?.actor._id).forEach(e=>{if(getEnemyDistance(a.target?.token,e.token)<=15&&getEnemyDistance(a.token,e.token)<=15){const t=actorAction(e.actor,"glimpse-of-redemption");if(t){postTargetInChatTemplate(_uuid(t),e)}}})}}}async function liberatingStep(a){if(messageType(a,"damage-roll")){if(a?.target){(isTargetCharacter(a)?characterWithReaction():npcWithReaction()).filter(e=>e?.actor?.id!==a?.target?.actor._id).forEach(e=>{if(getEnemyDistance(a.target?.token,e.token)<=15&&getEnemyDistance(a.token,e.token)<=15){const t=actorAction(e.actor,"liberating-step");if(t){postTargetInChatTemplate(_uuid(t),e)}}})}}else if(messageType(a,"skill-check")){if(isTargetCharacter(a)&&anySuccessMessageOutcome(a)){characterWithReaction().filter(e=>e?.actor?.id!==a?.target?.actor._id).forEach(e=>{if(a?.flags?.pf2e?.context?.options.find(e=>e==="action:grapple")){if(getEnemyDistance(a.target?.token,e.token)<=15&&getEnemyDistance(a.token,e.token)<=15){const t=actorAction(e.actor,"liberating-step");if(t){postTargetInChatTemplate(_uuid(t),e)}}}})}}}async function vengefulSpite(e){if(messageType(e,"attack-roll")){if(criticalSuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const t=actorAction(e?.target?.actor,"vengeful-spite");if(t){await postInChatTemplate(_uuid(t),e.target?.token?.combatant)}}}}}async function reactiveGnaw(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)&&adjacentEnemy(e.target?.token,e.token)){const t=actorAction(e?.target?.actor,"reactive-gnaw");if(t&&e?.item?.system?.damage?.damageType==="slashing"){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function ironCommand(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)&&getEnemyDistance(e?.target?.token,e.token)<=15){const t=actorAction(e?.target?.actor,"iron-command");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function selfishShield(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)&&getEnemyDistance(e?.target?.token,e.token)<=15){const t=actorAction(e?.target?.actor,"selfish-shield");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function destructiveVengeance(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)&&getEnemyDistance(e?.target?.token,e.token)<=15){const t=actorAction(e?.target?.actor,"destructive-vengeance");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function avengingBite(a){if(messageType(a,"attack-roll")){if(isActorCharacter(a.actor)){npcWithReaction().forEach(e=>{if(adjacentEnemy(a.token,e.token)){const t=actorAction(e.actor,"avenging-bite");if(t){postInChatTemplate(_uuid(t),e?.token?.combatant)}}})}}}async function implementsInterruption(a){if(!isActorCharacter(a.actor)&&messageWithAnyTrait(a,["concentrate","manipulate","move"])){characterWithReaction().forEach(e=>{const t=actorAction(e.actor,"implements-interruption");if(t){if(hasExploitVulnerabilityEffect(a.actor,e.actor)){if(canReachEnemy(a.token,e.token,e.actor)||getEnemyDistance(a.token,e.token)<=10&&actorHeldWeapon(e.actor).filter(e=>e?.item?.isRanged).length>=1){postInChatTemplate(_uuid(t),e)}}}})}}async function fastSwallow(e){if(messageType(e,"attack-roll")){if(anySuccessMessageOutcome(e)){if(hasReaction(e?.token?.combatant)){if(e?.item?.system?.attackEffects?.value.includes("improved-grab")){const t=actorAction(e?.actor,"fast-swallow");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant)}}}}}}async function wickedThorns(e){if(messageType(e,"attack-roll")){if(anySuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const t=actorAction(e?.target?.actor,"wicked-thorns");if(t){if(e?.item?.traits.has("unarmed")||e?.item?.isMelee&&nonReach(e?.item?.traits)){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}}}async function bansheeCry(a){if(a?.item?.type!=="spell"){return}if(!a.item.components.verbal){return}(isActorCharacter(a.actor)?npcWithReaction():characterWithReaction()).forEach(e=>{if(getEnemyDistance(a.token,e.token)<=30){const t=actorAction(e.actor,"banshee-cry");if(t){postInChatTemplate(_uuid(t),e)}}})}async function opportuneBackstab(a){if(!messageType(a,"damage-roll")){return}if(isTargetCharacter(a)){return}if(!a.item?.isMelee){return}characterWithReaction().filter(e=>e.actorId!==a?.actor?._id).forEach(e=>{const t=actorFeat(e.actor,"opportune-backstab");if(t&&canReachEnemy(a.target?.token,e.token,e.actor)){postInChatTemplate(_uuid(t),e)}})}async function disarmingBlock(t){if("appliedDamage"in t?.flags?.pf2e&&!t?.flags?.pf2e?.appliedDamage?.isHealing){if(t?.content.includes("shield")&&t?.content.includes("absorb")){const a=actorFeat(t.actor,"disarming-block");let e=game.messages.contents.slice(-10).reverse().find(e=>messageType(e,"damage-roll"));if(a&&e&&e.item?.isMelee&&hasReaction(t?.actor?.combatant)){postInChatTemplate(_uuid(a),t.actor?.combatant)}}}}async function convincingIllusion(e){if(messageType(e,"perception-check")||messageType(e,"saving-throw")){if(e?.flags?.pf2e?.origin?.uuid){const t=await fromUuid(e?.flags?.pf2e?.origin?.uuid);if(hasReaction(t?.actor?.combatant)){if(successMessageOutcome(e)){const a=actorFeat(t?.actor,"convincing-illusion");if(a&&t?.traits?.has("illusion")){await postInChatTemplate(_uuid(a),t?.actor?.combatant)}}}}}}async function mentalStatic(e){if(messageType(e,"saving-throw")&&hasReaction(e?.token?.combatant)){if(criticalSuccessMessageOutcome(e)){const t=actorFeat(e.actor,"mental-static");if(t&&hasOption(e,"check:statistic:will")&&hasOption(e,"item:trait:mental")){await postTargetInChatTemplate(_uuid(t),e?.actor?.combatant)}}}}async function premonitionOfClarity(e){if(messageType(e,"saving-throw")){if(hasReaction(e?.token?.combatant)&&anyFailureMessageOutcome(e)){const t=await fromUuid(e?.flags?.pf2e?.origin?.uuid);const a=actorFeat(e.actor,"premonition-of-clarity");if(a&&t?.traits?.has("mental")){await postInChatTemplate(_uuid(a),e.token.combatant)}}}}async function gritAndTenacity(e){if(messageType(e,"saving-throw")){if(hasReaction(e?.token?.combatant)&&anyFailureMessageOutcome(e)){const t=actorFeat(e.actor,"grit-and-tenacity");if(t){await postInChatTemplate(_uuid(t),e.token.combatant)}}}}async function orcFerocity(e){if(e?.flags?.pf2e?.appliedDamage&&!e?.flags?.pf2e?.appliedDamage?.isHealing){if(e.actor.system?.attributes?.hp?.value===0&&hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"orc-ferocity");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant,undefined,true)}}}}async function cheatDeath(e){if(e?.flags?.pf2e?.appliedDamage&&!e?.flags?.pf2e?.appliedDamage?.isHealing){if(e.actor.system?.attributes?.hp?.value===0&&hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"cheat-death");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant,undefined,true)}}}}async function cleave(t){if(messageType(t,"damage-roll")){if(hasReaction(t?.actor?.combatant)){const e=actorFeat(t.actor,"cleave");if(e&&t?.item?.isMelee){if(t.target?.actor.system.attributes.hp.value<=parseInt(t.content)){const a=game.combat?.turns?.filter(e=>!isActorCharacter(e.actor)).filter(e=>e.actorId!==t?.target?.actor._id).filter(e=>adjacentEnemy(t.target?.token,e.token)).filter(e=>e.actor.system.attributes.hp.value>0);if(a.length>0){await postInChatTemplate(_uuid(e),t.actor.combatant)}}}}}}async function shieldBlock(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant,"shield-block")){const t=Object.values(e?.item?.system?.damageRolls??{a:e?.item?.system?.damage}).map(e=>e?.damageType);if(t.filter(e=>e==="bludgeoning"||e==="piercing"||e==="slashing").length>0){const a=actorFeat(e?.target?.actor,"shield-block");if(a&&hasEffect(e.target?.actor,"effect-raise-a-shield")){await postInChatTemplate(_uuid(a),e.target?.token.combatant,"shield-block")}}}}}async function electricCounter(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"electric-counter");if(t&&hasEffect(e?.target?.actor,"stance-wild-winds-stance")){await postInChatTemplate(_uuid(t),e?.target?.token?.combatant)}}}}async function allInMyHead(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"all-in-my-head");if(t&&!e?.item?.traits.has("death")){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function unexpectedShift(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"unexpected-shift");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function resoundingFinale(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=Object.values(e?.item?.system?.damageRolls??{a:e?.item?.system?.damage}).map(e=>e.damageType);if(t.filter(e=>e==="sonic").length>0){const a=actorFeat(e?.target?.actor,"resounding-finale");if(a){await postInChatTemplate(_uuid(a),e.target?.token.combatant)}}}}}async function reverberate(t){if(messageType(t,"damage-roll")){if(hasReaction(t?.target?.token?.combatant)){const e=Object.values(t?.item?.system?.damageRolls??{a:t?.item?.system?.damage}).map(e=>e.damageType);if(e.filter(e=>e==="sonic").length>0){const e=actorFeat(t?.target?.actor,"reverberate");if(e&&t.item.type==="spell"){await postInChatTemplate(_uuid(e),t.target?.token.combatant)}}}}}async function verdantPresence(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"verdant-presence");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}if(e?.flags?.pf2e?.casting||messageType(e,"spell-cast")){if(e?.item&&isActorCharacter(e?.actor)){if(hasReaction(e?.token?.combatant)){const a=actorFeat(e?.actor,"verdant-presence");if(a&&e?.item?.system?.traditions.value.includes("primal")){await postInChatTemplate(_uuid(a),e?.token?.combatant)}}}}}async function alignKi(e){if(e?.flags?.pf2e?.casting||messageType(e,"spell-cast")){if(e?.item&&isActorCharacter(e?.actor)){if(hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"align-ki");if(t&&messageWithTrait(e,"monk")){await postInChatTemplate(_uuid(t),e?.token?.combatant)}}}}}async function mageHunter(i){if(i?.flags?.pf2e?.casting||messageType(i,"spell-cast")){(isActorCharacter(i?.actor)?npcWithReaction():characterWithReaction()).forEach(e=>{if(canReachEnemy(i.token,e.token,e.actor)){const t=actorFeat(e.actor,"mage-hunter");if(t){postInChatTemplate(_uuid(t),e)}}if(getEnemyDistance(i.token,e.token)<=30){const a=actorFeat(e.actor,"counter-thought");if(a&&spellWithTrait(i?.item,"mental")){postInChatTemplate(_uuid(a),e)}}})}}async function accompany(t){if(t?.flags?.pf2e?.casting||messageType(t,"spell-cast")){if(t?.item&&isActorCharacter(t?.actor)){if(!t?.item?.isCantrip){characterWithReaction().filter(e=>e.actorId!==t?.actor?._id).filter(e=>getEnemyDistance(t.token,e.token)<=30).forEach(e=>{const t=actorFeat(e.actor,"accompany");if(t){postInChatTemplate(_uuid(t),e)}})}}}}async function spellRelay(a){if(a?.flags?.pf2e?.casting||messageType(a,"spell-cast")){if(a?.item&&isActorCharacter(a?.actor)){let t=a?.item?.system?.range?.value?.match(/\d+/g);t=t?t[0]:0;characterWithReaction().filter(e=>e.actorId!==a?.actor?._id).filter(e=>getEnemyDistance(a.token,e.token)<=t).forEach(e=>{const t=actorFeat(e.actor,"spell-relay");if(t){postInChatTemplate(_uuid(t),e)}})}}}async function youFailedToAccountForThis(e){if(messageType(e,"spell-attack-roll")||messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"you-failed-to-account-for-this");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function suspectOfOpportunity(e){if(messageType(e,"spell-attack-roll")||messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"suspect-of-opportunity");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function foreseeDanger(e){if(messageType(e,"spell-attack-roll")||messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"foresee-danger");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function mirrorShield(e){if(messageType(e,"spell-attack-roll")||messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)&&criticalFailureMessageOutcome(e)){const t=actorFeat(e?.target?.actor,"mirror-shield");if(t){await postInChatTemplate(_uuid(t),e?.target?.token?.combatant)}}}}async function spiritualGuides(e){if(messageType(e,"perception-check")||messageType(e,"skill-check")){if(failureMessageOutcome(e)&&hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"spiritual-guides");if(t){await postInChatTemplate(_uuid(t),e.token.combatant)}}}}async function squawk(t){if(messageType(t,"skill-check")){if(hasReaction(t?.token?.combatant)){if(criticalFailureMessageOutcome(t)){const e=actorFeat(t?.actor,"squawk");if(e&&!t?.target?.actor?.system?.traits?.value?.includes("tengu")&&["deception","diplomacy","intimidation"].some(e=>t.flags?.pf2e?.context?.domains?.includes(e))){await postInChatTemplate(_uuid(e),t.token.combatant)}}}}}async function sacrificeArmor(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=Object.values(e?.item?.system?.damageRolls??{a:e?.item?.system?.damage}).map(e=>e.damageType);if(t.filter(e=>e==="bludgeoning"||e==="piercing"||e==="slashing").length>0){const a=actorFeat(e?.target?.actor,"sacrifice-armor");if(a){await postInChatTemplate(_uuid(a),e.target?.token.combatant)}}}}}async function reactiveTransformation(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=Object.values(e?.item?.system?.damageRolls??{a:e?.item?.system?.damage}).map(e=>e.damageType);if(t.filter(e=>["acid","cold","electricity","fire","poison"].includes(e)).length>0){const a=actorFeat(e?.target?.actor,"reactive-transformation");if(a){await postInChatTemplate(_uuid(a),e.target?.token.combatant)}}}}}async function fakeOut(n){if(messageType(n,"skill-check")&&isActorCharacter(n?.actor)&&messageWithTrait(n,"attack")||messageType(n,"attack-roll")&&isActorCharacter(n?.actor)){characterWithReaction().filter(e=>e.actorId!==n?.actor?._id).forEach(e=>{const t=actorFeat(e?.actor,"fake-out");if(t){const a=hasLoadedFirearmOrCrossbow(e.actor);if(a.length>0){const i=Math.max(...a.map(e=>e.item.rangeIncrement));if(getEnemyDistance(e?.token,n.target?.token)<=i){postInChatTemplate(_uuid(t),e)}}}})}}async function rubyResurrection(e){if(e?.flags?.pf2e?.appliedDamage&&!e?.flags?.pf2e?.appliedDamage?.isHealing){if(e.actor.system?.attributes?.hp?.value===0){if(hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"ruby-resurrection");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant,undefined,true)}}}}}async function rapidResponse(t){if(t?.flags?.pf2e?.appliedDamage&&!t?.flags?.pf2e?.appliedDamage?.isHealing){if(t.actor.system?.attributes?.hp?.value===0){if(isActorCharacter(t?.actor)){characterWithReaction().filter(e=>e.actorId!==t?.actor?._id).forEach(e=>{const t=actorFeat(e.actor,"rapid-response");if(t){postInChatTemplate(_uuid(t),e)}})}}}}async function no(a){if(a?.flags?.pf2e?.appliedDamage&&!a?.flags?.pf2e?.appliedDamage?.isHealing){if(a.actor.system?.attributes?.hp?.value===0){if(isActorCharacter(a?.actor)){characterWithReaction().filter(e=>e.actorId!==a?.actor?._id).forEach(e=>{const t=actorFeat(e.actor,"no");if(t&&a?.actor?.combatant&&getEnemyDistance(a.token,e.token)<=60){postInChatTemplate(_uuid(t),e)}})}}}}async function woundedRage(e){if(e?.flags?.pf2e?.appliedDamage&&!e?.flags?.pf2e?.appliedDamage?.isHealing){if(e.actor.system?.attributes?.hp?.value!==0&&hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"wounded-rage");if(t&&!hasCondition(e?.actor,"encumbered")&&!hasEffect(e.actor,"effect-rage")){await postInChatTemplate(_uuid(t),e?.token?.combatant)}}}}async function negateDamage(e){if(e?.flags?.pf2e?.appliedDamage&&!e?.flags?.pf2e?.appliedDamage?.isHealing){if(e.actor.system?.attributes?.hp?.value!==0&&hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"negate-damage");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant)}}}}async function distractingExplosion(t){if(!isActorCharacter(t?.actor)&&messageWithTrait(t,"concentrate")){characterWithReaction().filter(e=>canReachEnemy(t.token,e.token,e.actor)).forEach(e=>{const t=actorFeat(e.actor,"distracting-explosion");if(t){postInChatTemplate(_uuid(t),e)}})}}async function embraceThePain(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"embrace-the-pain");if(e?.item?.isMelee&&t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function retaliatoryCleansing(e){if(messageType(e,"damage-roll")){if(hasReaction(e?.target?.token?.combatant)&&adjacentEnemy(e.target?.token,e.token)){const t=actorFeat(e?.target?.actor,"retaliatory-cleansing");if(t){if(actorHeldWeapon(e?.target?.actor).filter(e=>e.slug==="holy-water"||e.weaponTraits.filter(e=>e.name==="bomb").length>0&&e.weaponTraits.filter(e=>e.name==="positive").length>0).length>0){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}}async function ectoplasmicShield(e){if(messageType(e,"attack-roll")&&hasOption(e,"ranged")){if(hasReaction(e?.target?.token?.combatant)){const t=actorAction(e?.target?.actor,"ectoplasmic-shield");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function nimbleDodge(e){if(messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"nimble-dodge")??actorAction(e?.target?.actor,"nimble-dodge");if(t&&!hasCondition(e?.target?.actor,"encumbered")){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function airyStep(e){if(messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"airy-step")??actorAction(e?.target?.actor,"airy-step");if(t){await postInChatTemplate(_uuid(nimble_dodge),e.target?.token.combatant)}}}}async function farabellusFlip(e){if(messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"farabellus-flip");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function reactiveShield(e){if(messageType(e,"attack-roll")&&anySuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"reactive-shield");if(t&&!hasEffect(e?.target?.actor,"effect-raise-a-shield")&&e?.item?.isMelee){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function pirouette(t){if(messageType(t,"attack-roll")){if(hasReaction(t?.target?.token?.combatant)){const e=actorFeat(t?.target?.actor,"pirouette");if(e&&hasEffect(t?.target?.actor,"stance-masquerade-of-seasons-stance")){await postInChatTemplate(_uuid(e),t.target?.token.combatant)}}}}async function fieryRetort(e){if(messageType(e,"attack-roll")&&anySuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"fiery-retort");if(t&&adjacentEnemy(e.token,e.target?.token)&&(e?.item?.isMelee||e?.item?.traits?.has("unarmed"))){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function knightsRetaliation(e){if(messageType(e,"attack-roll")){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"knights-retaliation");if(t&&e?.actor?.system.traits.value.includes("undead")&&criticalFailureMessageOutcome(e)){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function tangleOfBattle(e){if(messageType(e,"attack-roll")&&criticalSuccessMessageOutcome(e)){if(hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"tangle-of-battle");if(t&&adjacentEnemy(e.target?.token,e?.token)){await postInChatTemplate(_uuid(t),e.token.combatant)}}}}async function cleverGambit(e){if(messageType(e,"attack-roll")&&criticalSuccessMessageOutcome(e)){if(hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"clever-gambit");if(t&&hasEffect(e?.target?.actor,"effect-recall-knowledge-identified")){await postInChatTemplate(_uuid(t),e.token.combatant)}}}}async function opportuneRiposte(e){if(messageType(e,"attack-roll")){if(criticalFailureMessageOutcome(e)&&hasReaction(e?.target?.token?.combatant,"opportune-riposte")){const t=actorFeat(e?.target?.actor,"opportune-riposte")??actorAction(e?.target?.actor,"opportune-riposte");if(canReachEnemy(e.token,e?.target?.token,e?.target?.actor)&&t){await postInChatTemplate(_uuid(t),e.target?.token.combatant,"opportune-riposte")}}}}async function duelingRiposte(e){if(messageType(e,"attack-roll")){if(criticalFailureMessageOutcome(e)&&hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"dueling-riposte");if(t&&hasEffect(e.target?.actor,"effect-dueling-parry")){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function twinRiposte(e){if(messageType(e,"attack-roll")){if(criticalFailureMessageOutcome(e)&&hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"twin-riposte");if(t&&canReachEnemy(e.token,e?.target?.token,e?.target?.actor)&&(hasEffect(e.target?.actor,"effect-twin-parry")||hasEffect(e.target?.actor,"effect-twin-parry-parry-trait"))){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function perfectClarity(e){if(messageType(e,"attack-roll")){if(anyFailureMessageOutcome(e)){if(hasReaction(e?.token?.combatant)){const t=actorFeat(e?.actor,"perfect-clarity");if(t){await postInChatTemplate(_uuid(t),e?.token?.combatant)}}}}}async function furiousVengeance(e){if(messageType(e,"attack-roll")){if(criticalSuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"furious-vengeance");if(canReachEnemy(e.token,e?.target?.token,e?.target?.actor)&&t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}}async function cringe(t){if(messageType(t,"attack-roll")){if(criticalSuccessMessageOutcome(t)){if(hasReaction(t?.target?.token?.combatant)){const e=actorFeat(t?.target?.actor,"cringe");if(e){await postInChatTemplate(_uuid(e),t.target?.token.combatant)}}}}}async function stormRetribution(e){if(messageType(e,"attack-roll")){if(criticalSuccessMessageOutcome(e)){if(adjacentEnemy(e.token,e?.target?.token,e?.target?.actor)){if(e?.item?.isMelee||e?.item?.traits?.has("unarmed")){if(e?.target?.actor?.system?.resources?.focus?.value>0){const t=actorFeat(e?.target?.actor,"storm-retribution");if(t){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}}}}async function courageousOpportunity(t){if(isActorCharacter(t.actor)){return}if(messageWithAnyTrait(t,["manipulate","move","auditory"])||messageType(t,"attack-roll")&&t?.flags?.pf2e?.context?.domains.includes("ranged-attack-roll")){characterWithReaction().filter(e=>canReachEnemy(t.token,e.token,e.actor)).filter(e=>hasEffect(e.actor,"spell-effect-inspire-courage")).forEach(e=>{const t=actorFeat(e.actor,"courageous-opportunity");if(t){postInChatTemplate(_uuid(t),e)}})}}async function attackOfOpportunity(n){if(messageType(n,"attack-roll")&&n?.flags?.pf2e?.context?.domains.includes("ranged-attack-roll")||messageWithAnyTrait(n,["manipulate","move"])){(isActorCharacter(n.actor)?npcWithReaction("attack-of-opportunity"):characterWithReaction("attack-of-opportunity")).forEach(t=>{const a=actorAction(t.actor,"attack-of-opportunity")??actorFeat(t.actor,"attack-of-opportunity");if(a){let e=undefined;if(isNPC(t.actor)){const i=a.name.match("(([A-Za-z]{1,}) Only)");if(i&&i.length===3){e=i[2]}}if(canReachEnemy(n.token,t.token,t.actor,e)){postInChatTemplate(_uuid(a),t,"attack-of-opportunity")}}})}}async function reactiveStrike(n){if(messageType(n,"attack-roll")&&n?.flags?.pf2e?.context?.domains.includes("ranged-attack-roll")||messageWithAnyTrait(n,["manipulate","move"])){(isActorCharacter(n.actor)?npcWithReaction("reactive-strike"):characterWithReaction("reactive-strike")).forEach(t=>{const a=actorAction(t.actor,"reactive-strike")??actorFeat(t.actor,"reactive-strike");if(a){let e=undefined;if(isNPC(t.actor)){const i=a.name.match("(([A-Za-z]{1,}) Only)");if(i&&i.length===3){e=i[2]}}if(canReachEnemy(n.token,t.token,t.actor,e)){postInChatTemplate(_uuid(a),t,"reactive-strike")}}})}}async function emergencyTarge(e){if(messageType(e,"saving-throw")){if(hasReaction(e?.token?.combatant)&&anyFailureMessageOutcome(e)){const t=await fromUuid(e?.flags?.pf2e?.origin?.uuid);const a=actorFeat(e?.actor,"emergency-targe");if(a&&e?.flags?.pf2e?.origin?.type==="spell"){await postInChatTemplate(_uuid(a),e.token.combatant)}}}else if(messageType(e,"attack-roll")&&anySuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const a=actorFeat(e?.target?.actor,"emergency-targe");if(a&&e?.item?.isMelee){await postInChatTemplate(_uuid(a),e.target?.token.combatant)}}}}async function impossibleTechnique(e){if(messageType(e,"attack-roll")&&anySuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"impossible-technique");if(t&&!hasCondition(e?.target?.actor,"fatigued")&&e?.target?.actor?.armorClass?.parent?.item?.type!=="armor"){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function ripplingSpin(e){if(messageType(e,"attack-roll")&&anySuccessMessageOutcome(e)){if(hasReaction(e?.target?.token?.combatant)){const t=actorFeat(e?.target?.actor,"rippling-spin");if(t&&e?.item?.isMelee&&canReachEnemy(e.token,e?.target?.token,e?.target?.actor)&&hasEffect(e?.target?.actor,"stance-reflective-ripple-stance")){await postInChatTemplate(_uuid(t),e.target?.token.combatant)}}}}async function guardiansDeflectionFighter(t){if(messageType(t,"attack-roll")&&anySuccessMessageOutcome(t)){if(isTargetCharacter(t)){const e=t.rolls.at(0);const a=calculateDegreeOfSuccess(t?.flags?.pf2e?.context?.dc?.value,e._total-2,e.dice.at(0).total);if(e.degreeOfSuccess!==a){characterWithReaction().filter(e=>e?.actor?.id!==t?.target?.actor._id).filter(e=>canReachEnemy(t?.target?.token,e.token,e.actor)).forEach(e=>{const t=actorFeat(e.actor,"guardians-deflection-fighter");if(t){postInChatTemplate(_uuid(t),e)}})}}}}async function guardiansDeflectionSwashbuckler(t){if(messageType(t,"attack-roll")&&anySuccessMessageOutcome(t)){if(isTargetCharacter(t)){const e=t.rolls.at(0);const a=calculateDegreeOfSuccess(t?.flags?.pf2e?.context?.dc?.value,e._total-2,e.dice.at(0).total);if(e.degreeOfSuccess!==a){characterWithReaction().filter(e=>e?.actor?.id!==t?.target?.actor._id).filter(e=>canReachEnemy(t?.target?.token,e.token,e.actor)).forEach(e=>{const t=actorFeat(e.actor,"guardians-deflection-swashbuckler");if(t){postInChatTemplate(_uuid(t),e)}})}}}}async function shieldWardenFighter(t){if(!messageType(t,"damage-roll")){return}if(!isTargetCharacter(t)){return}const e=Object.values(t?.item?.system?.damageRolls??{a:t?.item?.system?.damage}).map(e=>e?.damageType);if(e.filter(e=>e==="bludgeoning"||e==="piercing"||e==="slashing").length===0){return}characterWithReaction().filter(e=>e.actorId!==t?.actor?._id).filter(e=>hasEffect(e.actor,"effect-raise-a-shield")).filter(e=>adjacentEnemy(t.target?.token,e.token)).forEach(e=>{const t=actorFeat(e.actor,"shield-warden-fighter");if(t){postTargetInChatTemplate(_uuid(t),e,undefined)}})}async function shieldWardenChampion(t){if(!messageType(t,"damage-roll")){return}if(!isTargetCharacter(t)){return}const e=Object.values(t?.item?.system?.damageRolls??{a:t?.item?.system?.damage}).map(e=>e?.damageType);if(e.filter(e=>e==="bludgeoning"||e==="piercing"||e==="slashing").length===0){return}characterWithReaction().filter(e=>e.actorId!==t?.actor?._id).filter(e=>hasEffect(e.actor,"effect-raise-a-shield")).filter(e=>adjacentEnemy(t.target?.token,e.token)).forEach(e=>{const t=actorFeat(e.actor,"shield-warden-champion");if(t){postTargetInChatTemplate(_uuid(t),e)}})}async function standStill(a){if(!isActorCharacter(a.actor)&&messageWithTrait(a,"move")){characterWithReaction().forEach(e=>{const t=actorFeat(e.actor,"stand-still");if(t&&canReachEnemy(a?.token,e.token,e.actor)){postInChatTemplate(_uuid(t),e)}})}}async function noEscape(a){if(!isActorCharacter(a.actor)&&messageWithTrait(a,"move")){characterWithReaction().forEach(e=>{const t=actorFeat(e.actor,"no-escape");if(t&&canReachEnemy(a?.token,e.token,e.actor)){postInChatTemplate(_uuid(t),e)}})}}async function verdistantDefense(e){if(!isActorCharacter(e.actor)&&messageWithTrait(e,"move")){characterWithReaction().filter(e=>e.actor.auras.size>0).forEach(e=>{const t=actorFeat(e.actor,"everdistant-defense");if(t){const a=Math.max(...Array.from(e.actor.auras.values()).map(e=>e.radius));if(getEnemyDistance(tokenDoc,e.token)<=a){postInChatTemplate(_uuid(t),e)}}})}}async function schadenfreude(e){if(messageType(e,"saving-throw")){if(hasReaction(e?.token?.combatant)&&criticalFailureMessageOutcome(e)){const t=actorSpell(e.actor,"schadenfreude");if(t){await postInChatTemplate(_uuid(t),e.token.combatant)}}}}const allReactionsMap={"opportune-backstab":opportuneBackstab,"disarming-block":disarmingBlock,"convincing-illusion":convincingIllusion,"ring-bell":ringBell,"mental-static":mentalStatic,"premonition-of-clarity":premonitionOfClarity,"grit-and-tenacity":gritAndTenacity,"emergency-targe":emergencyTarge,schadenfreude:schadenfreude,ferocity:ferocity,"orc-ferocity":orcFerocity,"entitys-resurgence":entitysResurgence,"final-spite":finalSpite,"cheat-death":cheatDeath,cleave:cleave,"shield-block":shieldBlock,"banshee-cry":bansheeCry,"electric-counter":electricCounter,"all-in-my-head":allInMyHead,"unexpected-shift":unexpectedShift,"resounding-finale":resoundingFinale,reverberate:reverberate,"verdant-presence":verdantPresence,"align-ki":alignKi,"mage-hunter":mageHunter,accompany:accompany,"spell-relay":spellRelay,"you-failed-to-account-for-this":youFailedToAccountForThis,"suspect-of-opportunity":suspectOfOpportunity,"foresee-danger":foreseeDanger,"mirror-shield":mirrorShield,"spiritual-guides":spiritualGuides,squawk:squawk,"sacrifice-armor":sacrificeArmor,"reactive-transformation":reactiveTransformation,"amulets-abeyance":amuletsAbeyance,"retributive-strike":retributiveStrike,"denier-of-destruction":denierOfDestruction,"glimpse-of-redemption":glimpseOfRedemption,"liberating-step":liberatingStep,"fake-out":fakeOut,"ruby-resurrection":rubyResurrection,"rapid-response":rapidResponse,no:no,"wounded-rage":woundedRage,"negate-damage":negateDamage,"distracting-explosion":distractingExplosion,"embrace-the-pain":embraceThePain,"reactive-gnaw":reactiveGnaw,"retaliatory-cleansing":retaliatoryCleansing,"iron-command":ironCommand,"selfish-shield":selfishShield,"destructive-vengeance":destructiveVengeance,"nimble-dodge":nimbleDodge,"ectoplasmic-shield":ectoplasmicShield,"airy-step":airyStep,"farabellus-flip":farabellusFlip,"reactive-shield":reactiveShield,pirouette:pirouette,"fiery-retort":fieryRetort,"knights-retaliation":knightsRetaliation,"tangle-of-battle":tangleOfBattle,"clever-gambit":cleverGambit,"opportune-riposte":opportuneRiposte,"dueling-riposte":duelingRiposte,"twin-riposte":twinRiposte,"perfect-clarity":perfectClarity,"avenging-bite":avengingBite,"vengeful-spite":vengefulSpite,"furious-vengeance":furiousVengeance,cringe:cringe,"storm-retribution":stormRetribution,"courageous-opportunity":courageousOpportunity,"implements-interruption":implementsInterruption,"attack-of-opportunity":attackOfOpportunity,"reactive-strike":reactiveStrike,"fast-swallow":fastSwallow,"wicked-thorns":wickedThorns,"impossible-technique":impossibleTechnique,"rippling-spin":ripplingSpin,"guardians-deflection-fighter":guardiansDeflectionFighter,"guardians-deflection-swashbuckler":guardiansDeflectionSwashbuckler,"stand-still":standStill,"no-escape":noEscape,"verdistant-defense":verdistantDefense,"shield-warden-fighter":shieldWardenFighter,"shield-warden-champion":shieldWardenChampion};const deflect_arrow="Compendium.pf2e.feats-srd.Item.sgaqlDFTVC7Ryurt";const crane_flutter="Compendium.pf2e.feats-srd.Item.S14S52HjszTgIy4l";const hit_the_dirt="Compendium.pf2e.feats-srd.Item.6LFBPpPPJjDq07fg";const reactionWasUsedEffect="Compendium.pf2e-reaction.reaction-effects.Item.Dvi4ewimR9t5723U";const reactionsEffect="Compendium.pf2e-reaction.reaction-effects.Item.Bq05rfSWsBjNzjwq";const moduleName="pf2e-reaction";function adjustDegreeByDieValue(e,t){if(e===20){return t+1}else if(e===1){return t-1}return t}function calculateDegreeOfSuccess(e,t,a){if(t-e>=10){return adjustDegreeByDieValue(a,3)}else if(e-t>=10){return adjustDegreeByDieValue(a,0)}else if(t>=e){return adjustDegreeByDieValue(a,2)}return adjustDegreeByDieValue(a,1)}async function updateInexhaustibleCountermoves(e){if(!e){return}if(isNPC(e.actor)){await setInexhaustibleCountermoves(game.combat.combatants.filter(e=>isActorCharacter(e.actor)),1)}else{await setInexhaustibleCountermoves(game.combat.combatants.filter(e=>isActorCharacter(e.actor)),0)}}async function setInexhaustibleCountermoves(e,t){e.forEach(e=>{if(actorFeat(e.actor,"inexhaustible-countermoves")){e.setFlag(moduleName,"inexhaustible-countermoves",t)}})}async function updateCombatantReactionState(t,e,a=undefined){if(!t){return}if(!e){if(!hasReaction(t,a)&&game.user.isGM){ui.notifications.warn(`${t?.actor?.name} does not have reaction anymore`);return}if(a==="attack-of-opportunity"){if(t.getFlag(moduleName,"triple-opportunity")){await t.setFlag(moduleName,"triple-opportunity",t.getFlag(moduleName,"triple-opportunity")-1);return}if(t.getFlag(moduleName,"combat-reflexes")){await t.setFlag(moduleName,"combat-reflexes",t.getFlag(moduleName,"combat-reflexes")-1);return}if(t.getFlag(moduleName,"tactical-reflexes")){await t.setFlag(moduleName,"tactical-reflexes",t.getFlag(moduleName,"tactical-reflexes")-1);return}if(t.getFlag(moduleName,"inexhaustible-countermoves")){await t.setFlag(moduleName,"inexhaustible-countermoves",t.getFlag(moduleName,"inexhaustible-countermoves")-1);return}}else if(a==="reactive-strike"){if(t.getFlag(moduleName,"triple-opportunity")){await t.setFlag(moduleName,"triple-opportunity",t.getFlag(moduleName,"triple-opportunity")-1);return}if(t.getFlag(moduleName,"combat-reflexes")){await t.setFlag(moduleName,"combat-reflexes",t.getFlag(moduleName,"combat-reflexes")-1);return}if(t.getFlag(moduleName,"tactical-reflexes")){await t.setFlag(moduleName,"tactical-reflexes",t.getFlag(moduleName,"tactical-reflexes")-1);return}if(t.getFlag(moduleName,"inexhaustible-countermoves")){await t.setFlag(moduleName,"inexhaustible-countermoves",t.getFlag(moduleName,"inexhaustible-countermoves")-1);return}}else if(a==="opportune-riposte"){if(t.getFlag(moduleName,"reflexive-riposte")){await t.setFlag(moduleName,"reflexive-riposte",t.getFlag(moduleName,"reflexive-riposte")-1);return}if(t.getFlag(moduleName,"inexhaustible-countermoves")){await t.setFlag(moduleName,"inexhaustible-countermoves",t.getFlag(moduleName,"inexhaustible-countermoves")-1);return}}else if(a==="shield-block"){if(t.getFlag(moduleName,"quick-shield-block")){await t.setFlag(moduleName,"quick-shield-block",t.getFlag(moduleName,"quick-shield-block")-1);return}}if(t.getFlag(moduleName,"hydra-heads")){await t.setFlag(moduleName,"hydra-heads",t.getFlag(moduleName,"hydra-heads")-1)}else if(t.getFlag(moduleName,"state")){await t.setFlag(moduleName,"state",false)}}else{if(isNPC(t.actor)){if(actorAction(t.actor,"triple-opportunity")){await t.setFlag(moduleName,"triple-opportunity",1)}let e=hasEffect(t.actor,"effect-hydra-heads");if(e){if(e?.system?.badge?.value>1){await t.setFlag(moduleName,"hydra-heads",e?.system?.badge?.value-1)}else{await t.setFlag(moduleName,"hydra-heads",0)}}}else{if(actorFeat(t.actor,"combat-reflexes")){await t.setFlag(moduleName,"combat-reflexes",1)}if(actorFeat(t.actor,"tactical-reflexes")){await t.setFlag(moduleName,"tactical-reflexes",1)}if(actorFeat(t.actor,"reflexive-riposte")){await t.setFlag(moduleName,"reflexive-riposte",1)}if(actorFeat(t.actor,"quick-shield-block")){await t.setFlag(moduleName,"quick-shield-block",1)}}if(!t.getFlag(moduleName,"state")){await t.setFlag(moduleName,"state",true)}}}function countAllReaction(e){let t=0;if(e){if(e.getFlag(moduleName,"state")){t+=1}t+=e.getFlag(moduleName,"triple-opportunity")??0;t+=e.getFlag(moduleName,"combat-reflexes")??0;t+=e.getFlag(moduleName,"tactical-reflexes")??0;t+=e.getFlag(moduleName,"inexhaustible-countermoves")??0;t+=e.getFlag(moduleName,"reflexive-riposte")??0;t+=e.getFlag(moduleName,"quick-shield-block")??0;t+=e.getFlag(moduleName,"hydra-heads")??0}return t}function countReaction(e,t=undefined){let a=0;if(e){if(e.getFlag(moduleName,"state")){a+=1}a+=e.getFlag(moduleName,"hydra-heads")??0;if(t==="attack-of-opportunity"){a+=e.getFlag(moduleName,"triple-opportunity")??0;a+=e.getFlag(moduleName,"combat-reflexes")??0;a+=e.getFlag(moduleName,"tactical-reflexes")??0;a+=e.getFlag(moduleName,"inexhaustible-countermoves")??0}else if(t==="reactive-strike"){a+=e.getFlag(moduleName,"triple-opportunity")??0;a+=e.getFlag(moduleName,"combat-reflexes")??0;a+=e.getFlag(moduleName,"tactical-reflexes")??0;a+=e.getFlag(moduleName,"inexhaustible-countermoves")??0}else if(t==="opportune-riposte"){a+=e.getFlag(moduleName,"reflexive-riposte")??0;a+=e.getFlag(moduleName,"inexhaustible-countermoves")??0}else if(t==="shield-block"){a+=e.getFlag(moduleName,"quick-shield-block")??0}}return a}function hasReaction(e,t=undefined){return countReaction(e,t)>0&&!hasCondition(e.actor,"confused")&&!hasCondition(e.actor,"petrified")&&!hasCondition(e.actor,"unconscious")}function characterWithReaction(t=undefined){return game.combat.turns.filter(e=>isActorCharacter(e.actor)).filter(e=>hasReaction(e,t))}function npcWithReaction(t=undefined){return game.combat.turns.filter(e=>!isActorCharacter(e.actor)).filter(e=>hasReaction(e,t))}function hasCondition(e,t){return e&&e?.itemTypes?.condition?.find(e=>e.type==="condition"&&t===e.slug)}function hasEffectBySource(e,t){return e?.itemTypes?.effect?.find(e=>t===e.sourceId)}function hasEffectStart(e,t){return e?.itemTypes?.effect?.find(e=>e?.slug?.startsWith(t))}function actorAction(e,t){return e?.itemTypes?.action?.find(e=>t===e.slug)}function actorSpell(e,t){return e?.itemTypes?.spell?.find(e=>t===e.slug)}function actorFeat(e,t){return e?.itemTypes?.feat?.find(e=>t===e.slug)}function actorFeats(e,t){return e?.itemTypes?.feat?.filter(e=>t.includes(e.slug))}async function postTargetInChatTemplate(e,t){await postInChatTemplate(e,t,undefined,false,true)}async function postInChatTemplate(e,t,a=undefined,i=false,n=false){if(!i){if(t?.actor?.system?.attributes?.hp?.value<=0&&t?.actor?.system?.attributes?.hp?.temp<=0||hasCondition(t?.actor,"unconscious")||hasCondition(t?.actor,"dying")){return}}let o=game.i18n.format("pf2e-reaction.ask",{uuid:e,name:t.token.name});let r=await renderTemplate("./modules/pf2e-reaction/templates/ask.hbs",{text:o,target:n});const c={cId:t._id,uuid:e,actionName:a};let s=ChatMessage.getWhisperRecipients("GM").map(e=>e.id);if(t.players){s=s.concat(t.players.map(e=>e.id))}if(game.messages.size>0&&r===game.messages.contents[game.messages.size-1].content){c["count"]=2;c["content"]=r;c["reactions"]=countReaction(t,a);c["needTarget"]=n;o=game.i18n.format("pf2e-reaction.askMultiple",{uuid:e,name:t.token.name,count:2});r=await renderTemplate("./modules/pf2e-reaction/templates/ask.hbs",{text:o,target:n});await game.messages.contents[game.messages.size-1].update({content:r,"flags.pf2e-reaction":c},{noHook:true})}else if(game.messages.size>0&&r===game.messages.contents[game.messages.size-1]?.getFlag(moduleName,"content")){const l=game.messages.contents[game.messages.size-1]?.getFlag(moduleName,"count")+1;o=game.i18n.format("pf2e-reaction.askMultiple",{uuid:e,name:t.token.name,count:l});r=await renderTemplate("./modules/pf2e-reaction/templates/ask.hbs",{text:o,target:n});await game.messages.contents[game.messages.size-1].update({content:r,"flags.pf2e-reaction.count":l,"flags.pf2e-reaction.reactions":countReaction(t,a)},{noHook:true})}else{ChatMessage.create({flavor:"",user:null,speaker:{scene:null,actor:null,token:null,alias:"System"},type:CONST.CHAT_MESSAGE_TYPES.OOC,content:r,whisper:s,flags:{"pf2e-reaction":c}}).then(e=>{const t=game.settings.get("pf2e-reaction","timeoutDelete");if(t>0){setTimeout(function(){e.delete()},t*1e3)}})}}async function checkRingmasterIntroduction(t){if(isActorCharacter(t?.actor)){characterWithReaction().filter(e=>e.tokenId!==t.tokenId).filter(e=>hasReaction(e)).forEach(e=>{const t=actorFeat(e.actor,"ringmasters-introduction");if(t){postInChatTemplate(_uuid(t),e)}})}}function hasLoadedFirearmOrCrossbow(e){return e.system?.actions?.filter(e=>e.ready).filter(e=>e?.item?.baseType?.includes("crossbow")||e?.item?.group==="firearm").filter(e=>e.item.ammo)}function spellWithTrait(e,t){return e?.traits?.has(t)||e?.castingTraits?.includes(t)}function messageWithTrait(e,t){return e?.item?.system?.traits?.value?.includes(t)||e?.item?.castingTraits?.includes(t)||e?.flags?.pf2e?.context?.traits?.find(e=>e.name===t)}function messageWithAnyTrait(t,e){return e.some(e=>messageWithTrait(t,e))}function hasExploitVulnerabilityEffect(e,t){if(hasEffect(e,"effect-exploit-vulnerability")){return true}const a=hasEffectStart(e,"mortal-weakness-target");if(a&&a?.flags["pf2e-thaum-vuln"]?.["EffectOrigin"]===t.uuid){if(t.flags["pf2e-thaum-vuln"]?.["primaryEVTarget"]===e.uuid){return true}}const i=hasEffectStart(e,"personal-antithesis-target");if(i&&i?.flags["pf2e-thaum-vuln"]?.["EffectOrigin"]===t.uuid){if(t.flags["pf2e-thaum-vuln"]?.["primaryEVTarget"]===e.uuid){return true}}return false}async function decreaseReaction(t,e=undefined){if(!t){return}await updateCombatantReactionState(t,false,e);if(Settings.addReactionEffect&&countAllReaction(t)<=1){await setReactionEffectToActor(t.actor,t.token,reactionWasUsedEffect)}if(Settings.allReactionEffect){let e=hasEffectBySource(t.actor,reactionsEffect);if(e){e.update({"system.badge.value":countAllReaction(t)})}}}async function setReactionEffectToActor(e,t,a){let i=hasEffectBySource(e,reactionWasUsedEffect);if(i){await i.increase();return}const n=(await fromUuid(a)).toObject();n.flags=mergeObject(n.flags??{},{core:{sourceId:a}});if(game.combat.combatant.initiative<=e.combatant.initiative){n.system.duration.value=1}else{n.system.duration.value=0}await e.createEmbeddedDocuments("Item",[n])}$(document).on("click",".reaction-check",async function(){const e=$(this).parent().parent().parent().data("message-id");if(e){const t=game.messages.get(e);const a=t.getFlag(moduleName,"cId");const i=t.getFlag(moduleName,"reactions");const n=t.getFlag(moduleName,"count");const o=t.getFlag(moduleName,"uuid");const r=t.getFlag(moduleName,"actionName");const c=t.getFlag(moduleName,"needTarget")??false;if(a){const s=game.combat?.turns?.find(e=>e._id===a);if(s){await decreaseReaction(s,r);if(i>1&&n>1){let e=game.i18n.format("pf2e-reaction.ask",{uuid:o,name:s.token.name});if(n-1>1){e=game.i18n.format("pf2e-reaction.askMultiple",{uuid:o,name:s.token.name,count:n-1})}const l=await renderTemplate("./modules/pf2e-reaction/templates/ask.hbs",{text:e,target:c});const m={content:l,"flags.pf2e-reaction.count":n-1,"flags.pf2e-reaction.reactions":i-1};if(t.permission===3||game.user?.isGM){await t.update(m,{noHook:true})}else{socketlibSocket._sendRequest("updateItem",[t.uuid,m],0)}}else{if(t.permission===3||game.user?.isGM){await t.delete()}else{socketlibSocket._sendRequest("deleteItem",[t.uuid],0)}}if(Settings.postMessage&&o){await(await fromUuid(o))?.toMessage()}}}}});$(document).on("click",".reaction-cancel",async function(){const e=$(this).parent().parent().parent().data("message-id");if(e){const t=game.messages.get(e);if(t.permission===3||game.user?.isGM){await t.delete()}else{socketlibSocket._sendRequest("deleteItem",[game.messages.get(e)?.uuid],0)}}});Hooks.on("pf2e.startTurn",async a=>{await updateCombatantReactionState(a,true);await updateInexhaustibleCountermoves(a);if(isActorCharacter(a?.actor)){npcWithReaction().forEach(e=>{const t=actorAction(e.actor,"petrifying-glance");if(t&&getEnemyDistance(a.token,e.token<=30)){postInChatTemplate(_uuid(t),e)}})}const e=actorFeat(a?.actor,"scapegoat-parallel-self");if(e){await postInChatTemplate(_uuid(e),a)}if(combat.round===1){await checkRingmasterIntroduction(a)}if(Settings.allReactionEffect){const t=(await fromUuid(reactionsEffect)).toObject();t.flags=mergeObject(t.flags??{},{core:{sourceId:reactionsEffect}});t.system.badge.value=countAllReaction(a);await a.actor.createEmbeddedDocuments("Item",[t])}});Hooks.on("combatStart",async e=>{const a=[];const i=Object.keys(allReactionsMap);e.turns.forEach(t=>{updateCombatantReactionState(t,true);a.push(...i.filter(e=>actorAction(t.actor,e)||actorFeat(t.actor,e)||actorSpell(t.actor,e)))});await updateInexhaustibleCountermoves(e.turns[0]);await checkRingmasterIntroduction(e.turns[0]);await e.setFlag(moduleName,"availableReactions",a)});Hooks.on("createCombatant",async(t,e)=>{if(game.user?.isGM){updateCombatantReactionState(t,true)}if(game.combat?.started){const a=game.combat.getFlag(moduleName,"availableReactions")??[];a.push(...Object.keys(allReactionsMap).filter(e=>actorAction(t.actor,e)||actorFeat(t.actor,e)||actorSpell(t.actor,e)));await game.combat.setFlag(moduleName,"availableReactions",a)}});Hooks.on("renderChatMessage",(t,e,a)=>{if(a.user.isGM){return}const i=game.combat?.turns?.find(e=>e.id===t.getFlag(moduleName,"cId"));if(Settings.showToPlayers&&i&&i.players.includes(game.user)){return}if(t?.flags?.[moduleName]){e.addClass("hide-reaction-check");e.hide()}});Hooks.on("createItem",async(t,e,i)=>{if(i!=game.userId){return}const n=game.combat?.turns?.find(e=>e.actorId===t.actor.id);if(!n){return}if("effect-raise-a-shield"===t.slug&&isActorCharacter(t.actor)){const o=game.combat?.turns?.filter(e=>isActorCharacter(e.actor)).filter(e=>hasEffect(e.actor,"effect-raise-a-shield"));const r=actorFeat(n.actor,"shield-wall");if(hasReaction(n)&&r){const c=o.filter(e=>adjacentEnemy(e.token,n.token));if(c.length>1){await postInChatTemplate(_uuid(r),n)}}o.filter(e=>hasReaction(e)).filter(e=>e.id!==n.id).filter(e=>adjacentEnemy(e.token,n.token)).forEach(e=>{const t=actorFeat(a.actor,"shield-wall");if(t){postInChatTemplate(_uuid(t),e)}})}else if("frightened"===t.slug){let e=game.combat?.turns.filter(e=>e!=n).filter(e=>getEnemyDistance(e.token,t.actor.getActiveTokens(true,true)[0])<=60).forEach(e=>{const t=actorActionBySource(e.actor,"Compendium.pf2e.actionspf2e.Item.Ul4I0ER6pj3U5eAk");if(t){postInChatTemplate(_uuid(t),e)}})}});Hooks.on("preUpdateToken",async(e,t,a,i)=>{if(game?.combats?.active&&(t.x>0||t.y>0)){const n={actor:e.actor,token:e,item:createTrait("move")};if(game.combat){if(game?.skipMoveTrigger?.[i]){return}const o=game.combat.getFlag(moduleName,"availableReactions")??[];if(o.includes("courageous-opportunity")){await courageousOpportunity(n)}if(o.includes("implements-interruption")){await implementsInterruption(n)}if(o.includes("attack-of-opportunity")){await attackOfOpportunity(n)}if(o.includes("reactive-strike")){await reactiveStrike(n)}if(o.includes("stand-still")){await standStill(n)}if(o.includes("no-escape")){await noEscape(n)}if(o.includes("verdistant-defense")){await verdistantDefense(n)}}}});function createTrait(e){return{system:{traits:{value:[e]}}}}Hooks.on("preCreateChatMessage",async(t,e,a,i)=>{if(!game?.combats?.active){return}if(messageType(t,"damage-roll")&&hasReaction(t?.target?.token?.combatant)){if(Object.values(t?.item?.system?.damageRolls??{a:t?.item?.system?.damage}).map(e=>e?.damageType).find(e=>e==="slashing")){const n=actorActionBySource(t?.target?.actor,"Item.ncKVztM6EL4i98dL");if(n&&adjacentEnemy(t.target?.token,t.token)){await postInChatTemplate(_uuid(n),t.target?.token.combatant)}}}if(game.combat){new Set(Object.values(game.combat.getFlag(moduleName,"availableReactions")??[])).forEach(e=>{if(allReactionsMap[e]){allReactionsMap[e].call(this,t)}})}});function sendNotification(e,t,a){const i=game.i18n.format("pf2e-reaction.notify",{uuid:a.name,name:t.name});ui.notifications.info(`${e.name} targets ${t.name}. ${i}`)}function checkSendNotification(t,a,e){actorFeats(a.actor,e).forEach(e=>{sendNotification(t,a,e)})}Hooks.on("targetToken",(i,n,e,t)=>{if(Settings.notification&&game?.combats?.active&&e&&hasReaction(n?.combatant)){if(game.user.isGM||n.combatant.players.find(e=>e.id===game.user.id)){if(isActorCharacter(n?.actor)){const a=actorFeat(n.actor,"nimble-dodge");if(a&&!hasCondition(n.actor,"encumbered")){sendNotification(i,n,a)}checkSendNotification(i,n,["airy-step","farabellus-flip","hit-the-dirt","you-failed-to-account-for-this","foresee-danger","deflect-arrow"]);const o=actorFeat(n.actor,"pirouette");if(o&&hasEffect(n.actor,"stance-masquerade-of-seasons-stance")){sendNotification(i,n,o)}const r=actorFeat(n.actor,"reactive-shield");if(r&&!hasEffect(n.actor,"effect-raise-a-shield")){sendNotification(i,n,r)}const c=actorFeat(n.actor,"crane-flutter");if(c&&hasEffect(n.actor,"stance-crane-stance")){sendNotification(i,n,c)}characterWithReaction().filter(e=>e.tokenId!==n.id).filter(e=>e.actor.auras.size>0).forEach(e=>{const t=Math.max(...Array.from(e.actor.auras.values()).map(e=>e.radius));if(getEnemyDistance(n.document,e.token)<=t){const a=actorFeat(e.actor,"everdistant-defense");if(a){sendNotification(i,n,a)}}})}else{const a=actorAction(n.actor,"nimble-dodge");if(a&&!hasCondition(n.actor,"encumbered")){sendNotification(i,n,a)}const s=actorAction(n.actor,"airy-step");if(s){sendNotification(i,n,s)}const l=actorAction(n.actor,"ectoplasmic-shield");if(l){sendNotification(i,n,l)}}}}});async function reactionWasUsedChat(e,t){const a=await renderTemplate("./modules/pf2e-reaction/templates/used.hbs",{uuid:e,combatant:t});let i=ChatMessage.getWhisperRecipients("GM").map(e=>e.id);if(t.players){i=i.concat(t.players.map(e=>e.id))}await ChatMessage.create({flavor:"",user:null,speaker:{scene:null,actor:null,token:null,alias:"System"},type:CONST.CHAT_MESSAGE_TYPES.OOC,content:a,whisper:i})}Hooks.on("preCreateChatMessage",async(e,t,a,i)=>{if(!game?.combats?.active){return}if(messageType(e,"attack-roll")){if(hasOption(e,"hit-the-dirt")&&hasOption(e,"item:ranged")){decreaseReaction(e.target?.token.combatant);reactionWasUsedChat(hit_the_dirt,e.target?.token.combatant)}if(e?.item?.isMelee&&e?.target?.actor?.flags?.pf2e?.rollOptions?.all?.["crane-flutter"]){decreaseReaction(e.target?.token.combatant);reactionWasUsedChat(crane_flutter,e.target?.token.combatant)}if(e?.item?.isRanged&&e?.target?.actor?.flags?.pf2e?.rollOptions?.ac?.["deflect-arrow"]){decreaseReaction(e.target?.token.combatant);reactionWasUsedChat(deflect_arrow,e.target?.token.combatant)}}else if(messageType(e,"saving-throw")){const n=actorFeat(e.actor,"charmed-life");if(n){if(e?.flags?.pf2e?.modifiers?.find(e=>e.slug==="charmed-life"&&e.enabled)){decreaseReaction(e.token.combatant);reactionWasUsedChat(_uuid(n),e.token.combatant)}}}else if(e?.isRoll){const o=actorFeat(e.actor,"youre-next");if(o){if(e?.flags?.pf2e?.modifiers?.find(e=>e.slug==="youre-next"&&e.enabled)){decreaseReaction(e.token.combatant);reactionWasUsedChat(_uuid(o),e.token.combatant)}}}});const identifySkills=new Map([["aberration",["occultism"]],["animal",["nature"]],["astral",["occultism"]],["beast",["arcana","nature"]],["celestial",["religion"]],["construct",["arcana","crafting"]],["dragon",["arcana"]],["elemental",["arcana","nature"]],["ethereal",["occultism"]],["fey",["nature"]],["fiend",["religion"]],["fungus",["nature"]],["humanoid",["society"]],["monitor",["religion"]],["ooze",["occultism"]],["plant",["nature"]],["spirit",["occultism"]],["undead",["religion"]]]);const filteredTraits=["evil","chaotic","neutral","lawful","good"];async function addRecallButton(e,t,a,i,n=false){const o=n?a.replaceAll("-"," ").replaceAll(/(^\w{1})|(\s+\w{1})/g,e=>e.toUpperCase()):game.i18n.localize("PF2E.Skill"+a.replace(/^\w/,e=>e.toUpperCase()));const r=game.i18n.localize("PF2E.RecallKnowledge.Label");const c=document.createElement("div");c.className="recall-knowledge tag-legacy tooltipstered gm-recall-knowledge-"+a;const s=document.createElement("a");s.textContent=r+": "+o;s.onclick=function(){let e="To Recall Knowledge, roll:";e+="<br>@Check[type:"+a+"|dc:"+i+"|traits:secret,action:recall-knowledge]";ChatMessage.create({content:TextEditor.enrichHTML(e,{async:false}),flavor:"",user:null,speaker:{scene:null,actor:null,token:null,alias:"System"},type:CONST.CHAT_MESSAGE_TYPES.OOC}).then()};c.append(s);e.find(".recall-knowledge > .section-body").append(c)}function easyLore(t,a,i){if(!Settings.recallKnowledgeEasyLore){return}a.object.traits.forEach(e=>{if(filteredTraits.includes(e)){return}addRecallButton(t,a,`${e}-lore`,i,true)})}function veryEasyLore(e,t,a){if(!Settings.recallKnowledgeVeryEasyLore){return}addRecallButton(e,t,`${t.actor.name.toLowerCase().replaceAll(" ","-")}-lore`,a,true)}Hooks.on("renderActorSheet",(t,a,e)=>{if(game.user?.isGM&&isNPC(t.actor)&&t.token&&Settings.recallKnowledge){const i=a.find(".recall-knowledge .section-body .identification-skills");if(i.length===0){return}if(Settings.recallKnowledgeHideDef){i.addClass("hidden")}const n=Array.from(new Set(t.object.system.traits.value.flatMap(e=>identifySkills.get(e)??[])));if(i.length===1){const o=i.eq(0).text().trim().match(/\d+/g);if(o.length===2){const[r,c]=o;easyLore(a,t,r);veryEasyLore(a,t,c)}else{const s=o[0];n.forEach(e=>{addRecallButton(a,t,e,s)})}}else if(i.length===2){const s=i.eq(0).text().trim().match(/\d+/g)[0];const[r,c]=i.eq(1).text().trim().match(/\d+/g);n.forEach(e=>{addRecallButton(a,t,e,s)});easyLore(a,t,r);veryEasyLore(a,t,c)}else{console.warn(game.i18n.localize("pf2e-reaction.recall-knowledge.need-fix"))}}});Hooks.once("init",()=>{Settings.register()});console.log("Pf2e-reaction | --- Hooks are added");