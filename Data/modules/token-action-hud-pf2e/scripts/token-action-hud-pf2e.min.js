const e={ID:"token-action-hud-pf2e"},t={ID:"token-action-hud-core"},i="1.5",s={axe:"fa-solid fa-axe fa-fw",brain:"fa-solid fa-brain fa-fw",bolt:"fa-solid fa-bolt fa-fw","bow-arrow":"fa-solid fa-bow-arrow fa-fw",droplet:"fa-solid fa-droplet fa-fw",fire:"fa-solid fa-fire fa-fw",ghost:"fa-solid fa-ghost fa-fw",hammer:"fa-solid fa-hammer fa-fw",skull:"fa-solid fa-skull fa-fw",snowflake:"fa-solid fa-snowflake fa-fw",spider:"fa-solid fa-spider fa-fw",sun:"fa-solid fa-sun fa-fw",vial:"fa-solid fa-vial fa-fw","waveform-lines":"fa-solid fa-waveform-lines fa-fw"},a={1:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",2:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",3:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",free:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",reaction:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",passive:"",A:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>A</span>",D:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>D</span>",T:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>T</span>",F:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>F</span>",R:"<span style='font-family: \"Pathfinder2eActions\"; font-size: var(--font-size-20);'>R</span>",...s},n={action:"TYPES.Item.action",attribute:"tokenActionHud.pf2e.attribute",condition:"TYPES.Item.condition",effect:"TYPES.Item.effect",familiarAttack:"PF2E.AttackLabel",feat:"PF2E.Item.Feat.LevelLabel",heroAction:"tokenActionHud.pf2e.heroAction",initiative:"PF2E.InitiativeLabel",item:"PF2E.ItemTitle",save:"tokenActionHud.pf2e.save",skill:"PF2E.SkillLabel",skillAction:"tokenActionHud.pf2e.skillAction",spell:"TYPES.Item.spell",strike:"PF2E.WeaponStrikeLabel",strikeAuxiliaryAction:"PF2E.WeaponStrikeLabel",toggle:"tokenActionHud.pf2e.toggle",utility:"tokenActionHud.utility"},o={held1:{icon:'<span class="fa-stack fa-fw fa-2xs" data-tooltip="placeholder"><i class="fa-solid fa-hand-back-fist fa-stack-2x"></i><i class="fab fa-1 fa-stack-1x" style="filter: invert(1);"></i></span>',tooltip:"PF2E.CarryType.held1"},held2:{icon:'<span class="fa-stack fa-fw fa-2xs" data-tooltip="placeholder"><i class="fa-solid fa-hand-back-fist fa-stack-2x"></i><i class="fab fa-2 fa-stack-1x" style="filter: invert(1);"></i></span>',tooltip:"PF2E.CarryType.held2"},dropped:{icon:'<i class="fas fa-grip-lines fa-fw" data-tooltip="placeholder"></i>',tooltip:"PF2E.CarryType.dropped"},stowed:{icon:'<i class="fas fa-box fa-fw" data-tooltip="placeholder"></i>',tooltip:"PF2E.CarryType.stowed"},worn:{icon:'<i class="fas fa-tshirt fa-fw" data-tooltip="placeholder"></i>',tooltip:"PF2E.CarryType.worn"}},l={armor:{groupId:"armor"},consumable:{groupId:"consumables"},backpack:{groupId:"containers"},equipment:{groupId:"equipment"},shield:{groupId:"shields"},treasure:{groupId:"treasure"},weapon:{groupId:"weapons"}},c={bludgeoning:"PF2E.TraitBludgeoning",piercing:"PF2E.TraitPiercing",slashing:"PF2E.TraitSlashing"},r={acrobatics:"acr",arcana:"arc",athletics:"ath",crafting:"cra",deception:"dec",diplomacy:"dip",intimidation:"itm",medicine:"med",nature:"nat",occultism:"occ",performance:"prf",perception:"per",religion:"rel",society:"soc",stealth:"ste",survival:"sur",thievery:"thi"},d={melee:"systems/pf2e/icons/mdi/sword.svg",thrown:"systems/pf2e/icons/mdi/thrown.svg"},m={melee:{name:"PF2E.WeaponRangeMelee"},ranged:{name:"PF2E.NPCAttackRanged"},thrown:{name:"PF2E.TraitThrown"}},p={attack:{id:"attack",name:"PF2E.AttackLabel",type:"system"},toggles:{id:"toggles",name:"PF2E.TogglesLabel",type:"system"},strikes:{id:"strikes",name:"PF2E.StrikesLabel",type:"system"},actions:{id:"actions",name:"PF2E.ActionsActionsHeader",type:"system"},reactions:{id:"reactions",name:"PF2E.ActionsReactionsHeader",type:"system"},freeActions:{id:"free-actions",name:"PF2E.ActionsFreeActionsHeader",type:"system"},passives:{id:"passives",name:"PF2E.NPC.PassivesLabel",type:"system"},skillActionsGrouped:{id:"skill-actions-grouped",name:"tokenActionHud.pf2e.skillActions",listName:"tokenActionHud.pf2e.skillActionsGrouped",type:"system"},skillActionsUngrouped:{id:"skill-actions-ungrouped",name:"tokenActionHud.pf2e.skillActions",listName:"tokenActionHud.pf2e.skillActionsUngrouped",type:"system",settings:{sort:!0}},weapons:{id:"weapons",name:"tokenActionHud.pf2e.weapons",type:"system"},shields:{id:"shields",name:"tokenActionHud.pf2e.shields",type:"system"},armor:{id:"armor",name:"tokenActionHud.pf2e.armor",type:"system"},equipment:{id:"equipment",name:"tokenActionHud.pf2e.equipment",type:"system"},consumables:{id:"consumables",name:"tokenActionHud.pf2e.consumables",type:"system"},containers:{id:"containers",name:"tokenActionHud.pf2e.containers",type:"system"},treasure:{id:"treasure",name:"tokenActionHud.pf2e.treasure",type:"system"},ancestryFeatures:{id:"ancestry-features",name:"PF2E.FeaturesAncestryHeader",type:"system"},classFeatures:{id:"class-features",name:"PF2E.FeaturesClassHeader",type:"system"},ancestryFeats:{id:"ancestry-feats",name:"PF2E.FeatAncestryHeader",type:"system"},classFeats:{id:"class-feats",name:"PF2E.FeatClassHeader",type:"system"},skillFeats:{id:"skill-feats",name:"PF2E.FeatSkillHeader",type:"system"},generalFeats:{id:"general-feats",name:"PF2E.FeatGeneralHeader",type:"system"},bonusFeats:{id:"bonus-feats",name:"PF2E.FeatBonusHeader",type:"system"},spells:{id:"spells",name:"PF2E.Item.Spell.Plural",type:"system"},heroPoints:{id:"hero-points",name:"PF2E.HeroPointsLabel",type:"system"},initiative:{id:"initiative",name:"PF2E.InitiativeLabel",type:"system"},perceptionCheck:{id:"perception-check",name:"PF2E.PerceptionLabel",type:"system"},coreSkills:{id:"core-skills",name:"PF2E.CoreSkillsHeader",type:"system"},loreSkills:{id:"lore-skills",name:"PF2E.LoreSkillsHeader",type:"system"},conditions:{id:"conditions",name:"PF2E.ConditionsLabel",type:"system"},socialConditions:{id:"social-conditions",name:"tokenActionHud.pf2e.socialConditions",type:"system"},otherConditions:{id:"other-conditions",name:"tokenActionHud.pf2e.otherConditions",type:"system"},effects:{id:"effects",name:"PF2E.EffectsLabel",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},recoveryCheck:{id:"recovery-check",name:"PF2E.Check.Specific.Recovery",type:"system"},rests:{id:"rests",name:"tokenActionHud.pf2e.rests",type:"system"},saves:{id:"saves",name:"PF2E.SavesHeader",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},u={l5pbgrj8SSNtRGs8:{name:"PF2E.Actions.AdministerFirstAid.Stabilize.Title",actionCost:2,skill:"medicine",image:"systems/pf2e/icons/features/feats/treat-wounds.webp"},ZEWD4zcEDQwYhVT8:{name:"PF2E.Actions.AdministerFirstAid.StopBleeding.Title",actionCost:2,skill:"medicine",image:"systems/pf2e/icons/conditions/persistent-damage.webp"},"55mxH0w8UkY1o3Xv":{name:"PF2E.Actions.Balance.Title",skill:"acrobatics",actionCost:1,image:"icons/skills/movement/feet-winged-boots-brown.webp"},LXCy1iJddD95Z91s:{name:"PF2E.Actions.Climb.Title",skill:"athletics",actionCost:1,image:"icons/sundries/misc/ladder.webp"},"9RNumMausgG7adgL":{name:"PF2E.Actions.Coerce.Title",skill:"intimidation",actionCost:"passive",image:"icons/skills/social/intimidation-impressing.webp"},xcrdOOiN0l6O1sIn:{name:"PF2E.Actions.CommandAnAnimal.Title",skill:"nature",actionCost:1,image:"icons/environment/creatures/horse-white.webp"},zn0HadZeoKDALxRu:{name:"PF2E.Actions.ConcealAnObject.Title",skill:"stealth",actionCost:1,image:"systems/pf2e/icons/equipment/adventuring-gear/wax-key-blank.webp"},Tu7LIRelQsiOuo1l:{name:"PF2E.Actions.Craft.Title",skill:"crafting",actionCost:"passive",image:"icons/skills/trades/smithing-anvil-silver-red.webp"},aDsYSdRqiC6qQIOQ:{name:"PF2E.Actions.CreateADiversion.DistractingWords.Title",skill:"deception",actionCost:1,image:"icons/magic/control/mouth-smile-deception-purple.webp"},zUJ0UhuoFt5a7tiN:{name:"PF2E.Actions.CreateADiversion.Gesture.Title",skill:"deception",actionCost:1,image:"icons/skills/social/wave-halt-stop.webp"},"1JpYPlIkjyseE9JU":{name:"PF2E.Actions.CreateADiversion.Trick.Title",skill:"deception",actionCost:1,image:"systems/pf2e/icons/spells/charming-words.webp"},mNphXpAkmGsMadUv:{name:"PF2E.Actions.CreateForgery.Title",skill:"society",actionCost:"passive",image:"systems/pf2e/icons/spells/transcribe-moment.webp"},U6WjxFPn4fUqIrfl:{name:"PF2E.Actions.DecipherWriting.Title",skill:"arcana",actionCost:"passive",image:"icons/skills/trades/academics-book-study-runes.webp"},RZyfkw1DiqVy3JUC:{name:"PF2E.Actions.DecipherWriting.Title",skill:"occultism",actionCost:"passive",image:"icons/skills/trades/academics-book-study-purple.webp"},sDUERv4E88G5BRPr:{name:"PF2E.Actions.DecipherWriting.Title",skill:"religion",actionCost:"passive",image:"systems/pf2e/icons/equipment/other/spellbooks/thresholds-of-truth.webp"},YWAvvDXpdW1fYPFo:{name:"PF2E.Actions.DecipherWriting.Title",skill:"society",actionCost:"passive",image:"icons/skills/trades/academics-study-reading-book.webp"},nEwqNNWX6scLt4sc:{name:"PF2E.Actions.Demoralize.Title",skill:"intimidation",actionCost:1,image:"icons/skills/social/intimidation-impressing.webp"},T2QNEoRojMWEec4a:{name:"PF2E.Actions.DisableDevice.Title",skill:"thievery",actionCost:2,image:"systems/pf2e/icons/equipment/adventuring-gear/thieves-tools.webp"},ooiO59Ch2QaebOmc:{name:"PF2E.Actions.Disarm.Title",skill:"athletics",actionCost:1,image:"icons/skills/melee/sword-damaged-broken-glow-red.webp"},"50Q0DYL33Kalu1BH":{name:"PF2E.Actions.Escape.Title",skill:"acrobatics",actionCost:1,image:"icons/skills/movement/feet-winged-boots-glowing-yellow.webp"},lkEcQQss16SIrVxM:{name:"PF2E.Actions.Escape.Title",skill:"athletics",actionCost:1,image:"icons/skills/movement/feet-winged-boots-glowing-yellow.webp"},RjfPFjqPrNve6eeh:{name:"PF2E.Actions.Feint.Title",skill:"deception",actionCost:1,image:"icons/skills/melee/maneuver-sword-katana-yellow.webp"},yMTKMnaYSGtDz4wk:{name:"PF2E.Actions.ForceOpen.Title",skill:"athletics",actionCost:1,image:"icons/equipment/feet/boots-armored-steel.webp"},rCgGPEyXbzLFcio6:{name:"PF2E.Actions.GatherInformation.Title",skill:"diplomacy",actionCost:"passive",image:"icons/skills/social/diplomacy-handshake.webp"},i95kcGLIQKOTsnv6:{name:"PF2E.Actions.Grapple.Title",skill:"athletics",actionCost:"passive",image:"icons/skills/melee/unarmed-punch-fist.webp"},FlM3HvpnsZpCKawG:{name:"PF2E.Actions.Hide.Title",skill:"stealth",actionCost:1,image:"systems/pf2e/icons/features/classes/wild.webp"},v3dlDjFlOmT5T2gC:{name:"PF2E.Actions.HighJump.Title",skill:"athletics",actionCost:2,image:"icons/skills/movement/arrows-up-trio-red.webp"},k5nW4jGyXD0Oq9LR:{name:"PF2E.Actions.Impersonate.Title",skill:"deception",actionCost:"passive",image:"icons/equipment/head/mask-carved-scream-tan.webp"},VTg4t8kYTvXcHROq:{name:"PF2E.Actions.Lie.Title",skill:"deception",actionCost:"passive",image:"icons/magic/control/mouth-smile-deception-purple.webp"},QPsV0qi2zXm7syt6:{name:"PF2E.Actions.LongJump.Title",skill:"athletics",actionCost:2,image:"icons/skills/movement/figure-running-gray.webp"},"1Sj2Pz3VI2SFWqZw":{name:"PF2E.Actions.MakeAnImpression.Title",skill:"diplomacy",actionCost:"passive",image:"icons/environment/people/commoner.webp"},"9Ul5Op5OceT9P5SS":{name:"PF2E.Actions.ManeuverInFlight.Title",skill:"acrobatics",actionCost:1,image:"icons/commodities/biological/wing-bird-white.webp"},Gj68YCVlDjc75iCP:{name:"PF2E.Actions.PalmAnObject.Title",skill:"thievery",actionCost:1,image:"icons/sundries/gaming/playing-cards.webp"},dWcrojMk0d2WRPBq:{name:"PF2E.Actions.Perform.Title",skill:"performance",actionCost:1,image:"icons/skills/trades/music-singing-voice-blue.webp"},"8YrH37NzKRuiKFbF":{name:"PF2E.Actions.PickALock.Title",skill:"thievery",actionCost:2,image:"icons/sundries/misc/lock-bronze-reinforced.webp"},BQTA7bL264189Xla:{name:"PF2E.Actions.Repair.Title",skill:"crafting",actionCost:"passive",image:"icons/tools/smithing/anvil.webp"},tbveXG4gaIoKnsWX:{name:"PF2E.Actions.Request.Title",skill:"diplomacy",actionCost:1,image:"icons/skills/social/thumbsup-approval-like.webp"},tikhJ2b6AMh7wQU7:{name:"PF2E.Actions.Seek.Title",skill:"perception",actionCost:1,image:"icons/tools/scribal/magnifying-glass.webp"},LN67MgbGE8IHb2X0:{name:"PF2E.Actions.SenseDirection.Title",skill:"survival",actionCost:"passive",image:"icons/tools/navigation/compass-brass-blue-red.webp"},PmHt7Gb5fCrlWWTr:{name:"PF2E.Actions.SenseMotive.Title",skill:"perception",actionCost:1,image:"icons/environment/people/commoner.webp"},yNry1xMZqdWHncbV:{name:"PF2E.Actions.Shove.Title",skill:"athletics",actionCost:1,image:"systems/pf2e/icons/spells/hydraulic-push.webp"},HSTkVuv0SjTNK3Xx:{name:"PF2E.Actions.Sneak.Title",skill:"stealth",actionCost:1,image:"systems/pf2e/icons/conditions/unnoticed.webp"},UKHPveLpG7hUs4D0:{name:"PF2E.Actions.Squeeze.Title",skill:"acrobatics",actionCost:"passive",image:"icons/commodities/tech/claw-mechanical.webp"},zjovbAeuLvyuWFKd:{name:"PF2E.Actions.Steal.Title",skill:"thievery",actionCost:1,image:"icons/containers/bags/coinpouch-gold-red.webp"},mkKko3CEBCyJVQw1:{name:"PF2E.Actions.Subsist.Title",skill:"society",actionCost:"passive",image:"icons/environment/settlement/building-rubble.webp"},zkqh01BoXDVgydzo:{name:"PF2E.Actions.Subsist.Title",skill:"survival",actionCost:"passive",image:"icons/environment/wilderness/camp-improvised.webp"},TIlUkCzviYxdVk4E:{name:"PF2E.Actions.Swim.Title",skill:"athletics",actionCost:1,image:"icons/creatures/fish/fish-shark-swimming.webp"},Al5LYMMdeDcpC9Br:{name:"PF2E.Actions.Track.Title",skill:"survival",actionCost:"passive",image:"systems/pf2e/icons/conditions/observed.webp"},m4iM5r3TfvQs5Y2n:{name:"PF2E.Actions.TreatDisease.Title",skill:"medicine",actionCost:"passive",image:"icons/magic/nature/root-vine-caduceus-healing.webp"},R03LRl2RBbsm6EcF:{name:"PF2E.Actions.TreatPoison.Title",skill:"medicine",actionCost:1,image:"systems/pf2e/icons/effects/treat-poison.webp"},gRj7xUfcpUZQLrOC:{name:"PF2E.Actions.Trip.Title",skill:"athletics",actionCost:1,image:"icons/skills/wounds/bone-broken-marrow-yellow.webp"},"2qhYHkcSsTJoSwrJ":{name:"PF2E.Actions.TumbleThrough.Title",skill:"acrobatics",actionCost:1,image:"icons/skills/movement/feet-winged-sandals-tan.webp"}},h={acrobatics:{name:"PF2E.SkillAcrobatics"},arcana:{name:"PF2E.SkillArcana"},athletics:{name:"PF2E.SkillAthletics"},crafting:{name:"PF2E.SkillCrafting"},deception:{name:"PF2E.SkillDeception"},diplomacy:{name:"PF2E.SkillDiplomacy"},intimidation:{name:"PF2E.SkillIntimidation"},lore:{name:"PF2E.SkillLore"},medicine:{name:"PF2E.SkillMedicine"},nature:{name:"PF2E.SkillNature"},occultism:{name:"PF2E.SkillOccultism"},perception:{name:"PF2E.PerceptionLabel"},performance:{name:"PF2E.SkillPerformance"},religion:{name:"PF2E.SkillReligion"},society:{name:"PF2E.SkillSociety"},stealth:{name:"PF2E.SkillStealth"},survival:{name:"PF2E.SkillSurvival"},thievery:{name:"PF2E.SkillThievery"}};let g=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{g=class Utils{static getSetting(i,s=null){let a=s??null;try{a=game.settings.get(e.ID,i)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}return a}static async setSetting(i,s){try{s=await game.settings.set(e.ID,i,s),t.api.Logger.debug(`Setting '${i}' set to '${s}'`)}catch{t.api.Logger.debug(`Setting '${i}' not found`)}}}}));let f=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{f=class ActionHandler extends e.api.ActionHandler{actors=null;actorId=null;actorType=null;tokenId=null;items=null;groupIds=null;activationGroupIds=null;effectGroupIds=null;inventoryGroupIds=null;spellGroupIds=null;featureActions=null;inventoryActions=null;spellActions=null;mapLabel=e.api.Utils.i18n("PF2E.MAPAbbreviationLabel").replace(" {penalty}","");async buildSystemActions(t){this.actors=this.actor?[this.actor]:this.#e(),this.actorType=this.actor?.type;if(!this.actorType||["character","familiar","hazard","npc"].includes(this.actorType)){if(this.actor){let t=this.actor.items;t=e.api.Utils.sortItemsByName(t),this.items=t}this.abbreviateSkills=g.getSetting("abbreviateSkills"),this.addAuxiliaryActions=g.getSetting("addAuxiliaryActions"),this.addDamageAndCritical=g.getSetting("addDamageAndCritical"),this.addStowedItems=g.getSetting("addStowedItems"),this.addUnequippedItems=g.getSetting("addUnequippedItems"),this.calculateAttackPenalty=g.getSetting("calculateAttackPenalty"),this.colorSkills=g.getSetting("colorSkills"),this.showStrikeImages=g.getSetting("showStrikeImages"),this.showStrikeNames=g.getSetting("showStrikeNames"),this.showStrikeTraits=g.getSetting("showStrikeTraits"),this.splitStrikes=g.getSetting("splitStrikes"),this.groupIds=t,"character"===this.actorType?await this.#t():"familiar"===this.actorType?await this.#i():"hazard"===this.actorType?await this.#s():"npc"===this.actorType?await this.#a():this.actor||this.#n()}}async#t(){await Promise.all([this.#o(),this.#l(),this.#c(),this.#r(),this.#d(),this.#m(),this.#p(),this.#u(),this.#h(),this.#g(),this.#f(),this.#y(),this.#k(),this.#b(),this.#A(),this.#w(),this.#v(),this.#I()]),await this.#C()}async#i(){await Promise.all([this.#o(),this.#P(),this.#l(),this.#c(),this.#r(),this.#h(),this.#g(),this.#k(),this.#A()])}async#s(){await Promise.all([this.#o(),this.#l(),this.#u(),this.#k(),this.#v()])}async#a(){await Promise.all([this.#o(),this.#l(),this.#c(),this.#r(),this.#d(),this.#u(),this.#h(),this.#g(),this.#k(),this.#b(),this.#A(),this.#v(),this.#w(),this.#I()])}async#n(){await Promise.all([this.#u(),this.#g(),this.#k(),this.#b(),this.#A()])}async#o(){const t="action";if(0===this.items.size)return;const i=["action","reaction","free","passive"],s=new Map([...this.items].filter((([e,t])=>"action"===t.type||i.includes(t.system?.actionType?.value)))),a=new Map;for(const[e,t]of s){const i=t.system.actionType?.value;switch(i){case"action":a.set("actions",a.get("actions")||new Map),a.get("actions").set(e,t);break;case"reaction":a.set("reactions",a.get("reactions")||new Map),a.get("reactions").set(e,t);break;case"free":a.set("free-actions",a.get("free-actions")||new Map),a.get("free-actions").set(e,t);break;case"passive":a.set("passives",a.get("passives")||new Map),a.get("passives").set(e,t)}}for(const[i,s]of a){const a=s,n={id:i,type:"system"},o=await Promise.all([...a].map((async([i,s])=>{const a=this.#$(s),n=this.#S(s),o=this.#F(s,t),l=this.#T(s),c=[t,a].join(this.delimiter),r=this.#E(s,t),d=e.api.Utils.getImage(s),m=this.#U(s),p=await this.#H(s,t);return{id:a,name:n,encodedValue:c,cssClass:l,img:d,icon1:r,info:m,listName:o,tooltip:await this.#D(t,p)}})));this.addActions(o,n)}}#P(){const t="familiarAttack",i=this.actor.system.attack;if(i){const s=i.slug,a=e.api.Utils.i18n("PF2E.AttackLabel"),o=`${`${e.api.Utils.i18n(n[t])}: `??""}${a}`,l=[t,s].join(this.delimiter),c=e.api.Utils.getModifier(i?.totalModifier),r=[{id:s,name:a,listName:o,encodedValue:l,info1:this.actor?{text:c}:""}],d={id:"attack",type:"system"};this.addActions(r,d)}}#l(){const t="utility",i={endTurn:{id:"endTurn",name:e.api.Utils.i18n("tokenActionHud.endTurn")}};game.combat?.current?.tokenId!==this.token?.id&&delete i.endTurn;const s=Object.entries(i).map((i=>{const s=i[1].id,a=i[1].name,o=`${`${e.api.Utils.i18n(n[t])}: `??""}${a}`,l=[t,s].join(this.delimiter);return{id:s,name:a,listName:o,encodedValue:l}}));this.addActions(s,{id:"combat",type:"system"})}async#c(){const t="condition",i=["doomed","dying","wounded"],s=new Map([...this.items].filter((e=>e[1].type===t)).map((e=>{const t=e[1];return[t.slug,t]}))),a=[...game.pf2e.ConditionManager.conditions].filter((([e])=>!e.startsWith("Compendium"))).map((([e,t])=>(t.name=t.name.replace(" 1",""),[e,t]))),o=await Promise.all(a.map((async([a,o])=>{const l=o.slug,c=s.get(a),r=c?.id,d=o.name,m=`${`${e.api.Utils.i18n(n[t])}: `??""}${d}`,p=[t,l].join(this.delimiter),u=e.api.Utils.getImage(o),h=`toggle${r?" active":""}`;let g="",f="";if(r)if(i.includes(c.slug)){const e=this.actor.system.attributes[c.slug];f=e.value;const t=e.max;g={text:t>0?`${f??0}/${t}`:""}}else c.system.value.isValued&&(f=c.system.value.value,g={text:f});const y={name:`${d}${f?` ${f}`:""}`,description:o.description};return{id:l,name:d,listName:m,encodedValue:p,cssClass:h,img:u,info1:g,tooltip:await this.#D(t,y)}})));o.sort(((e,t)=>e.name.localeCompare(t.name)));const l=[];await this.addActions(o.reduce((function(e,t){return["Friendly","Helpful","Hostile","Indifferent","Malevolence","Unfriendly"].includes(t.name)?l.push(t):e.push(t),e}),[]),{id:"conditions",type:"system"});const c=[];await this.addActions(l.reduce((function(e,t){return["Friendly","Helpful","Hostile","Indifferent","Unfriendly"].includes(t.name)?e.push(t):c.push(t),e}),[]),{id:"social-conditions",type:"system"});await this.addActions(c,{id:"other-conditions",type:"system"})}async#p(){const t="heroPoints",i=this.actor.system.resources?.heroPoints,s=i.value,a=i.max,n=[{id:"heroPoints",name:e.api.Utils.i18n("PF2E.HeroPointsLabel"),encodedValue:[t,t].join(this.delimiter),info1:{text:a>0?`${s??0}/${a}`:""}}];this.addActions(n,{id:"hero-points",type:"system"})}async#r(){const t="effect",i=new Map([...this.items].filter((e=>"effect"===e[1].type&&(!e[1].system?.unidentified&&!e[1].unidentified||game.user.isGM)))),s=await Promise.all([...i].map((async([i,s])=>{const a=this.#$(s),n=this.#S(s),o=this.#F(s,t),l=this.#T(s),c=[t,a].join(this.delimiter),r=this.#E(s,t),d=e.api.Utils.getImage(s),m=this.#U(s),p={name:n,description:s.description};return{id:a,name:n,listName:o,encodedValue:c,cssClass:l,img:d,icon1:r,info:m,tooltip:await this.#D(t,p)}})));s.sort(((e,t)=>e.name.localeCompare(t.name))),this.addActions(s,{id:"effects",type:"system"})}async#d(){const t="feat",i={ancestryfeature:"ancestry-features",classfeature:"class-features",ancestry:"ancestry-feats",class:"class-feats",skill:"skill-feats",general:"general-feats",bonus:"bonus-feats"},s=new Map;for(const[e,t]of this.items){if("feat"!==t.type)continue;const a=i[t.system?.category??t.featType];s.set(a,s.get(a)||new Map),s.get(a).set(e,t)}for(const[i,a]of s){const s=a,n={id:i,type:"system"},o=await Promise.all([...s].map((async([i,s])=>{const a=this.#$(s),n=this.#S(s),o=this.#F(s,t),l=this.#T(s),c=[t,a].join(this.delimiter),r=this.#E(s,t),d=e.api.Utils.getImage(s),m=this.#U(s),p=await this.#H(s,t);return{id:a,name:n,encodedValue:c,cssClass:l,img:d,icon1:r,info:m,listName:o,tooltip:await this.#D(t,p)}})));this.addActions(o,n)}}async#m(){if(!game.modules.get("pf2e-hero-actions")?.active)return;const t="heroAction",i=e.api.Utils.i18n(n[t]),s=this.actor.getFlag("pf2e-hero-actions","heroActions")??[],a=[],o=this.actor.heroPoints?.value,l=o-(s?.length??0);l>0&&a.push({id:"drawHeroActions",name:game.i18n.format("pf2e-hero-actions.templates.heroActions.draw",{nb:l}),listName:`${i}: ${game.i18n.localize("pf2e-hero-actions.templates.heroActions.draw").replace("({nb}) ","")}`,encodedValue:[t,"drawHeroActions"].join(this.delimiter)});const c=await Promise.all([...s].map((async s=>{const a=s?.uuid,n=s?.name,o=`${i}: ${n}`,l=[t,a].join(this.delimiter),c=e.api.Utils.getImage("systems/pf2e/icons/actions/Passive.webp"),r=s?.uuid?await fromUuid(s?.uuid):null,d={name:n,description:r?.text?.content??null};return{id:a,name:n,encodedValue:l,img:c,listName:o,tooltip:await this.#D(t,d)}})));a.push(...c),this.addActions(a,{id:"hero-actions",type:"system"})}async#u(){const t="initiative",i=this.actor?.system?.initiative?.statistic??null,s=[];if("hazard"!==this.actorType){const a=this.actor?this.actor.system.initiative:e.api.Utils.i18n("PF2E.PerceptionLabel"),o=e.api.Utils.i18n("PF2E.PerceptionLabel"),l=this.abbreviatedSkills?r.perception??o:o,c=`${`${e.api.Utils.i18n(n[t])}: `??""}${l}`,d=[t,"perception"].join(this.delimiter),m=`toggle${"perception"===i?" active":""}`,p=e.api.Utils.getModifier(a?.totalModifier),u=this.actor?{text:p}:"",h={name:`${o}${this.actor&&p?` ${p}`:""}`,modifiers:a?.modifiers},g=this.actor?await this.#D(t,h):null;s.push({id:"initiative-perception",name:l,listName:c,encodedValue:d,cssClass:m,info1:u,tooltip:g})}const a=this.actor?Object.entries(this.actor.skills).filter((([e,t])=>!!t.label&&t.label.length>1)):this.#N();if(!a)return;const o=[],l=[];for(const e of a)e[1].lore?l.push(e):o.push(e);o.sort(((e,t)=>e[1].label.localeCompare(t[1].label))),l.sort(((e,t)=>e[1].label.localeCompare(t[1].label)));const c=await Promise.all([...o,...l].map((async([s,a])=>{const o=`initiative-${s}`,l=a,c=e.api.Utils.i18n(l.label)??e.api.Utils.i18n(CONFIG.PF2E.skillList[s]),d=this.abbreviatedSkills?r[l.slug]??c:c,m=`${`${e.api.Utils.i18n(n[t])}: `??""}${d}`,p=[t,s].join(this.delimiter),u=`toggle${i===s?" active":""}`,h=e.api.Utils.getModifier(a.check?.mod),g=this.actor?{text:h}:"",f={name:`${c}${this.actor&&h?` ${h}`:""}`,modifiers:a?.modifiers};return{id:o,name:d,listName:m,encodedValue:p,cssClass:u,info1:g,tooltip:this.actor?await this.#D(t,f):null}})));s.push(...c);this.addActions(s,{id:"initiative",type:"system"})}async#h(){if(0===this.items.size)return;const t="item",i=new Map;for(const[e,t]of this.items){const s=t.system?.quantity>0,a=this.#R(t),n=this.#M("nonContainer",t),o=t.type;if(s&&n){const s=a?"equipped":"unequipped",n=i.get(s)??new Map;if(n.set(e,t),i.set(s,n),a){const s=i.get(o)??new Map;s.set(e,t),i.set(o,s)}}}for(const[s,a]of i){const i=l[s]?.groupId;if(!i)continue;const n={id:i,type:"system"},o=await Promise.all([...a].map((async([i,s])=>{const a=this.#$(s),n=this.#S(s),o=this.#F(s,t),l=this.#T(s),c=[t,a].join(this.delimiter),r=this.#E(s,t),d=this.#j(s),m=e.api.Utils.getImage(s),p=this.#U(s),u=await this.#H(s,t);return{id:a,name:n,encodedValue:c,cssClass:l,img:m,icon1:r,icon2:d,info:p,listName:o,tooltip:await this.#D(t,u)}})));this.addActions(o,n)}if(i.has("backpack")){const s={id:"containers",type:"system"},a=i.get("backpack");for(const[i,n]of a){const a=n.contents;if(!a.size)continue;const o={id:i,name:n.name,listName:`Group: ${n.name}`,type:"system-derived"};await this.addGroup(o,s);const l=new Map;for(const e of a){this.#M("container",e)&&l.set(e.id,e)}const c=await Promise.all([...l].map((async([i,s])=>{const a=this.#$(s),n=this.#S(s),o=this.#F(s,t),l=this.#T(s),c=[t,a].join(this.delimiter),r=this.#E(s,t),d=this.#j(s),m=e.api.Utils.getImage(s),p=this.#U(s),u=await this.#H(s,t);return{id:a,name:n,encodedValue:c,cssClass:l,img:m,icon1:r,icon2:d,info:p,listName:o,tooltip:await this.#D(t,u)}})));this.addActions(c,o)}}}async#g(){const t="perceptionCheck",i=this.actor?this.actor.system.perception:e.api.Utils.i18n("PF2E.PerceptionLabel"),s=e.api.Utils.i18n("PF2E.PerceptionLabel"),a=e.api.Utils.getModifier(i?.totalModifier),n=this.actor?{text:a}:"",o={name:`${s}${this.actor&&a?` ${a}`:""}`,modifiers:i?.modifiers},l=await this.#D(t,o),c=[{id:"perception",name:s,encodedValue:[t,"perception"].join(this.delimiter),info1:n,tooltip:l}];this.addActions(c,{id:"perception-check",type:"system"})}#f(){const t="recoveryCheck",i=this.actor?.system.attributes?.dying;if(i?.value>0){const i=[{id:t,name:e.api.Utils.i18n("PF2E.Check.Specific.Recovery"),encodedValue:[t,t].join(this.delimiter)}],s={id:"recovery-check",type:"system"};this.addActions(i,s)}}#y(){if(!this.actor&&!this.actors.every((e=>"character"===e.type)))return;const t="utility",i=[{id:"treatWounds",name:e.api.Utils.i18n("PF2E.Actions.TreatWounds.Label"),encodedValue:[t,"treatWounds"].join(this.delimiter)},{id:"rest",name:e.api.Utils.i18n("PF2E.Actor.Character.Rest.Label"),encodedValue:[t,"rest"].join(this.delimiter)}];game.settings.get("pf2e","staminaVariant")&&i.push({id:"takeBreather",name:e.api.Utils.i18n("tokenActionHud.pf2e.takeBreather"),encodedValue:[t,"takeBreather"].join(this.delimiter)});this.addActions(i,{id:"rests",type:"system"})}async#k(){const t="save",i=this.actor?Object.entries(this.actor.saves||[]):Object.entries(CONFIG.PF2E.saves);if(!i||0===i.length)return;const s=await Promise.all(i.map((async([i,s])=>{const a=s.label??("string"==typeof s?e.api.Utils.i18n(s):""),o=`${`${e.api.Utils.i18n(n[t])}: `??""}${a}`,l=[t,i].join(this.delimiter),c=e.api.Utils.getModifier(s.mod),r=this.actor?{text:c}:"",d={name:`${a}${this.actor&&c?` ${c}`:""}`,modifiers:s?.modifiers};return{id:i,name:a,listName:o,encodedValue:l,info1:r,tooltip:this.actor?await this.#D(t,d):null}})));this.addActions(s,{id:"saves",type:"system"})}async#b(){const t="compendiumMacro",i=await game.packs.get("pf2e.action-macros").getIndex();if(!i.size)return;const s=new Map,a=[];for(const o of i){const i=u[o._id];if(!i)continue;const l=o._id,c=e.api.Utils.i18n(i.name),r=`${c} - ${e.api.Utils.i18n(h[i.skill]?.name)}`,d=`${`${e.api.Utils.i18n(n.skillAction)}: `??""}${r}`,m=[t,"pf2e.action-macros",l].join(this.delimiter),p=this.#x(i.actionCost),g=i.image,f=e.api.Utils.getModifier(this.actor?.skills[i.skill]?.check?.mod),y={id:l,name:r,listName:d,encodedValue:m,icon1:p,img:g,info1:this.actor?{text:f}:null};a.push(y),s.set(i.skill,s.get(i.skill)||new Map),s.get(i.skill).set(o._id,{...y,name:c})}await this.addActions(a,{id:"skill-actions-ungrouped",type:"system"});for(const[t,i]of Object.entries(h)){const a=t,n=e.api.Utils.i18n(i.name),o=s.get(a);if(!o)continue;const l={id:a,name:n,type:"system-derived"};await this.addGroup(l,{id:"skill-actions-grouped",type:"system"});const c=[...o].map((([e,t])=>t));await this.addActions(c,l)}}async#A(){const t="skill",i=this.actor?Object.entries(this.actor.skills).filter((e=>!!e[1].label&&e[1].label.length>1)):this.#N();if(!i)return;const s=[],a=[];for(const e of i)e[1].lore?a.push(e):s.push(e);s.sort(((e,t)=>e[1].label.localeCompare(t[1].label))),a.sort(((e,t)=>e[1].label.localeCompare(t[1].label)));const o=new Map;o.set("skills",new Map),s.length>0&&o.set("core-skills",new Map),a.length>0&&o.set("lore-skills",new Map);for(const e of[...s,...a])e[1].lore?o.get("lore-skills").set(e[0],e[1]):o.get("core-skills").set(e[0],e[1]);for(const[i,s]of o){const a=s,o={id:i,type:"system"},l=await Promise.all([...a].map((async([i,s])=>{const a=i,o=e.api.Utils.i18n(s.label)??e.api.Utils.i18n(CONFIG.PF2E.skillList[i]),l=this.abbreviatedSkills?r[s.slug]??o:o,c=o,d=`${`${e.api.Utils.i18n(n[t])}: `??""}${l}`,m=[t,a].join(this.delimiter),p=this.actor&&this.colorSkills&&s.rank>0?`tah-pf2e-skill-rank-${s.rank}`:"",u=e.api.Utils.getModifier(s.check?.mod),h=this.actor?{text:u}:"",g={name:`${c}${this.actor&&u?` ${u}`:""}`,modifiers:s?.modifiers};return{id:a,name:l,fullName:c,listName:d,encodedValue:m,cssClass:p,info1:h,tooltip:this.actor?await this.#D(t,g):null}})));this.addActions(l,o)}}#N(){if(!this.actors)return;const e=this.actors.map((e=>Object.entries(e.skills).filter((e=>!!e[1].label&&e[1].label.length>1)))),t=Math.min(...e.map((e=>e.length)));return e.find((e=>e.length===t)).filter((t=>e.every((e=>e.some((e=>e[0]===t[0]))))))}async#w(){const t="spell",i={id:"spells",type:"system"},s=[...this.items].filter((e=>"spellcastingEntry"===e[1].type));for(const a of s){const s=`spells+${a[1].name.slugify({replacement:"-",strict:!0})}`,n={id:s,name:a[1].name,type:"system-derived",info1:this.#L(a[1])};await this.addGroup(n,i),this.addGroupInfo(n);const o=await(a[1].getSpellData?a[1].getSpellData():a[1].getSheetData()),l=o.groups.filter((e=>e.active.length>0));for(const i of Object.entries(l)){const a=i[1].id,l={id:`${s}+${a}`,name:String(e.api.Utils.i18n(i[1].label)),type:"system-derived"};await this.addGroup(l,n),await this.#z(n,l,i,o);const c=i[1].active.filter((e=>e&&!e.expended)).map((e=>e.spell)),r=new Map(c.map((e=>[e.id,e]))),d=await Promise.all([...r].map((async([i,s])=>{const n=this.#$(s,t,a),o=this.#S(s),l=this.#F(s,t),c=this.#T(s),r=this.#V(s,t,a),d=this.#E(s,t),m=e.api.Utils.getImage(s),p=await this.#H(s,t,a);return{id:n,name:o,listName:l,encodedValue:r,cssClass:c,img:m,icon1:d,tooltip:await this.#D(t,p)}})));this.addActions(d,l)}}}async#z(t,i,s,a){const o="cantrips"===s[1].id,l=a.isFlexible,c=a.isFocusPool,r=a.isInnate,d=a.isPrepared;if(!c&&(o||r))return;if(!c&&d&&!l)return;const m="spellSlot",p=this.actor.system.resources.focus,u=s[1].uses,h=c?"focus":`slot${s[1].id}`,g="focus"===h?p?.max:u?.max,f={text:g>=0?`${("focus"===h?p?.value:u?.value)??0}/${g}`:""};i.info={info1:f},this.addGroupInfo(i);const y=e.api.Utils.i18n(n.spell),k=[{id:`${a.id}>${h}>slotIncrease`,name:"+",listName:`${y}: ${t.name}: ${i.name}: +`,encodedValue:[m,`${a.id}>${h}>slotIncrease`].join(this.delimiter),cssClass:"shrink"},{id:`${a.id}>${h}>slotDecrease`,name:"-",listName:`${y}: ${t.name}: ${i.name}: -`,encodedValue:[m,`${a.id}>${h}>slotDecrease`].join(this.delimiter),cssClass:"shrink"}];this.addActions(k,i)}async#C(){const t="elementalBlast",i=new game.pf2e.ElementalBlast(this.actor)?.configs;if(!i.length)return;const s={id:"strikes",type:"system"};for(const a of i){let i=[],o=null;const l=[],c=`strikes+${`${a.item.id}-${a.element}`}`,r=(()=>{let t=e.api.Utils.i18n(a.label);if(this.showStrikeTraits&&this.showStrikeNames){const e=a.item.system.traits.value;if(e.length>0){t+=" - ";for(const i of e)t+="["+i+"]"}}return t})(),p=`${e.api.Utils.i18n(n.strike)}: ${r} (${a.item.id})`,u=a.img??a.item?.img,h=this.showStrikeNames,g=await this.#H(a,t),f=await this.#D(t,g);o={id:c,name:r,listName:p,type:"system-derived",settings:{showTitle:h},tooltip:f},this.showStrikeImages&&(o.settings.image=u),this.addGroup(o,s),a.damageTypes.length>1&&(i=a.damageTypes.map(((e,t)=>{const i=encodeURIComponent(`${a.item.id}>${a.element}>${e.value}>`),s=e.label;return{id:i,name:"",fullName:s,listName:`${p}: ${s}`,encodedValue:["elementalBlastDamageType",i].join(this.delimiter),cssClass:this.#T(e),icon1:this.#x(e.icon,s)}})));const y=Object.entries(a.maps)??[];for(const[i,s]of y){const n=i,o=`${c}+${i}`,r="melee"!==n&&a.range.max>0&&a.range.label.length>0?a.range.label:e.api.Utils.i18n(m[i].name),u=`${p}: ${r}`,h=y.length>1?"melee"===n?d.melee:d.thrown:"",g=!(h||y.length<=1),f={id:o,name:r,listName:u,type:"system-derived",settings:{showTitle:g,image:h}},k=Object.values(s).map(((i,s)=>{const o=encodeURIComponent(`${a.item.id}>${a.element}>${s}>`+n);let l;l=`${i}`.includes(this.mapLabel)?`${i}`.split(" ")[0]:`${i}`.replace(e.api.Utils.i18n("PF2E.WeaponStrikeLabel"),"").replace(" ","");const c=this.calculateAttackPenalty?l:i;return{id:o,name:c,encodedValue:[t,o].join(this.delimiter),listName:`${u}: ${c}`}})),b=encodeURIComponent(`${a.item.id}>${a.element}>damage>${n}`),A=e.api.Utils.i18n("PF2E.DamageLabel");k.push({id:b,name:A,listName:`${u}: ${A}`,encodedValue:[t,b].join(this.delimiter),systemSelected:this.addDamageAndCritical});const w=encodeURIComponent(`${a.item.id}>${a.element}>critical>${n}`),v=e.api.Utils.i18n("PF2E.CriticalDamageLabel");k.push({id:w,name:v,listName:`${u}: ${v}`,encodedValue:[t,w].join(this.delimiter),systemSelected:this.addDamageAndCritical}),l.push({actions:k,usageGroupData:f})}if(this.splitStrikes){this.addActions(i,o);for(const e of l)this.addGroup(e.usageGroupData,o),this.addActions(e.actions,e.usageGroupData)}else{this.addActions([...l[0]?.actions||[],...i],o),l.shift();for(const e of l)this.addGroup(e.usageGroupData,o),this.addActions(e.actions,e.usageGroupData)}}}async#v(){const t="strike",i={id:"strikes",type:"system"},s=this.actor.system.actions.filter((e=>e.type===t&&(e.item.system.quantity>0||"hazard"===this.actor.type||"npc"===this.actor.type)));if(s)for(const a of s){let s=[],o=[],l=null;const r=[],p=`strikes+${`${a.item.id}-${a.slug}`}`,u=(()=>{let e=a.label;if(this.showStrikeTraits&&this.showStrikeNames){let t;if(t="character"===this.actor.type?a.weaponTraits:a.traits,t.length>0){e+=" - ";for(const i of t)e+="["+i.label+"]"}}return e})(),h=`${e.api.Utils.i18n(n[t])}: ${a.label} (${a.item.id})`,g=a.imageUrl??a.item?.img,f=this.showStrikeNames,y=await this.#H(a,t),k=await this.#D(t,y);if(l={id:p,name:u,listName:h,type:"system-derived",settings:{showTitle:f},tooltip:k},this.showStrikeImages&&(l.settings.image=g),void 0===l.settings.sort&&e.api.Utils.getSetting("sortActions")&&(l.settings.sort=!1),this.addGroup(l,i),a.auxiliaryActions?.length&&this.addAuxiliaryActions&&(s=a.auxiliaryActions.flatMap(((t,i)=>{if("Modular"===t.purpose){const s=a.item.system.traits.toggles.modular.options,n=a.item.system.traits.toggles.modular.selection;return s.map((s=>{const o=encodeURIComponent(`${a.item.id}>${a.slug}>${i}>${s}`),l=e.api.Utils.i18n(c[s]);return{id:o,name:l,listName:`${h}: ${l}`,encodedValue:["strikeAuxiliaryAction",o].join(this.delimiter),icon1:this.#x(t.glyph),cssClass:this.#T({selected:s===n})}}))}{const e=encodeURIComponent(`${a.item.id}>${a.slug}>${i}>`),s=t.label;return{id:e,name:s,listName:`${h}: ${s}`,encodedValue:["strikeAuxiliaryAction",e].join(this.delimiter),icon1:this.#x(t.glyph),info:this.#U(t)}}}))),a.ready){a.versatileOptions?.length&&(o=a.versatileOptions.map((t=>{const i=encodeURIComponent(`${a.item.id}>${a.slug}>${t.value}>`),s=e.api.Utils.i18n(t.label);return{id:i,name:"",fullName:s,listName:`${h}: ${s}`,encodedValue:["versatileOption",i].join(this.delimiter),cssClass:this.#T(t),icon1:this.#x(t.glyph,s)}})));const i=a.altUsages?[a,...a.altUsages]:[a];for(const s of i){const n=a.glyph;let o;switch(`${s.item.isMelee}_${s.item.isThrown}_${s.item.isRanged}`){case"true_false_false":o="melee";break;case"false_true_true":o="thrown";break;case"false_false_true":o="ranged"}const l=`${p}+${o}`,c=s.attackRollType?e.api.Utils.i18n(s.attackRollType):e.api.Utils.i18n(m[o].name),u=`${h}: ${c}`,g="thrown"!==o&&n?`<span style='font-family: "Pathfinder2eActions"; font-size: var(--font-size-20);'>${n}</span>`:d[o],f=i.length>1?d[o]:"",y=!(f||i.length<=1),k={id:l,name:c,listName:u,icon:g,type:"system-derived",settings:{showTitle:y,image:f}};void 0===k.settings.sort&&e.api.Utils.getSetting("sortActions")&&(k.settings.sort=!1);const b=s.variants.map(((i,s)=>{const n=encodeURIComponent(`${a.item.id}>${a.slug}>${s}>`+o);let l;l=i.label.includes(this.mapLabel)?i.label.split(" ")[0]:i.label.replace(e.api.Utils.i18n("PF2E.WeaponStrikeLabel"),"").replace(" ","");const c=this.calculateAttackPenalty?l:i.label;return{id:n,name:c,encodedValue:[t,n].join(this.delimiter),listName:`${u}: ${c}`}})),A=encodeURIComponent(`${a.item.id}>${a.slug}>damage>${o}`),w=e.api.Utils.i18n("PF2E.DamageLabel");b.push({id:A,name:w,listName:`${u}: ${w}`,encodedValue:[t,A].join(this.delimiter),systemSelected:this.addDamageAndCritical});const v=encodeURIComponent(`${a.item.id}>${a.slug}>critical>${o}`),I=e.api.Utils.i18n("PF2E.CriticalDamageLabel");if(b.push({id:v,name:I,listName:`${u}: ${I}`,encodedValue:[t,v].join(this.delimiter),systemSelected:this.addDamageAndCritical}),s.selectedAmmoId&&!s.ammunition){const i=this.actor.items.get(s.selectedAmmoId);if(i){const e=this.#$(i),s=this.#S(i);b.push({id:e,name:s,listName:`${u}: ${s}`,encodedValue:[t,e].join(this.delimiter)})}else{const t="noAmmo",i=e.api.Utils.i18n("tokenActionHud.pf2e.noAmmo");b.push({id:t,name:i,listName:`${u}: ${i}`,encodedValue:t})}}r.push({actions:b,usageGroupData:k})}}if(this.splitStrikes){this.addActions([...o,...s],l);for(const e of r)this.addGroup(e.usageGroupData,l),this.addActions(e.actions,e.usageGroupData)}else{this.addActions([...r[0]?.actions||[],...o,...s],l),r.shift();for(const e of r)this.addGroup(e.usageGroupData,l),this.addActions(e.actions,e.usageGroupData)}}}#I(){const t="toggle",i=Object.values(this.actor.synthetics.toggles).flatMap((e=>Object.values(e)));if(!i.length)return;const s=i.filter((e=>0===e.suboptions.length)),a=i.filter((e=>0!==e.suboptions.length)),o={id:"toggles",type:"system"},l=s.map((i=>{const s=encodeURIComponent(`${i.domain}>${i.option}>${i.itemId}>>`),a=e.api.Utils.i18n(i.label),n=[t,s].join(this.delimiter);return{id:s,encodedValue:n,name:a,cssClass:`toggle${i.checked?" active":""}`}}));this.addActions(l,o);for(const t of a){const i=[t.domain,t.option].join("."),s=e.api.Utils.i18n(t.label),a=`${n.toggle}: ${s}`,l={id:i,name:s,listName:a,type:"system-derived"};this.addGroup(l,o);const c=t.suboptions.map((i=>{const s=encodeURIComponent(`${t.domain}>${t.option}>${t.itemId}>${i.value}`),n=e.api.Utils.i18n(i.label),o=i.selected&&t.enabled&&t.checked;return{id:s,name:n,listName:`${a}: ${n}`,encodedValue:["toggle",s].join(this.delimiter),cssClass:this.#T({selected:o})}}));this.addActions(c,l)}}#$(e,t,i){return"spell"===t?`${e.id??e._id}-${i}`:e.id??e._id}#S(e){return e?.name??e?.label??""}#F(t,i){const s=this.#S(t),a=`${e.api.Utils.i18n(n[i])}: `??"";return t.listName??`${a}${s}`}#T(e){if(Object.hasOwn(e,"disabled")){return`toggle${e.disabled?"":" active"}`}if(Object.hasOwn(e,"selected")){return`toggle${e.selected?" active":""}`}}#V(e,t,i){const s=e?.spellcasting?.id;return[t,"spell"===t?`${s}>${i}>${e.id??e._id}`:this.#$(e,t,i)].join(this.delimiter)}#E(e,t){const i=e.system?.actions,s=e.system?.actionType?.value,a=i?parseInt((i||{}).value,10):null,n=e.system?.time?.value,o=e.actionIcon,l="spell"===t?n:["free","reaction","passive"].includes(s)?s:a??o,c=this.#S(e);return this.#x(l,c)}#L(t){const i=t.statistic,s="function"==typeof i.dc?i.dc().value:i.dc.value,a=i.check.mod;return`${a>=0?`${e.api.Utils.i18n("tokenActionHud.pf2e.atk")} +${a}`:`${e.api.Utils.i18n("tokenActionHud.pf2e.atk")} ${a}`} ${`${e.api.Utils.i18n("tokenActionHud.pf2e.dc")}${s}`}`}#e(){const e=["character","npc"],t=canvas.tokens.controlled.map((e=>e.actor));if(t.every((t=>e.includes(t.type))))return t}#R(e){const t=e.system.equipped?.carryType;return!!this.addUnequippedItems||!(!["held","worn"].includes(t)||e.system.containerId?.value?.length)}#M(e,t){return"stowed"!==t.system.equipped?.carryType||this.#O(e,t)}#O(e,t){return"stowed"!==t.system.equipped?.carryType||("both"===this.addStowedItems||("container"===e&&"containers"===this.addStowedItems||"nonContainer"===e&&"nonContainers"===this.addStowedItems))}#U(e){return{info1:{text:this.#_(e)??""}}}#_(e){const t=e?.system?.quantity?.value;return t>1?t:""}#x(e,t=""){return s[e]?`<i class="${a[e]}" data-tooltip="${t}"></i>`:a[e]}#j(t){let i="";if("held"===t?.carryType)i=2===t?.handsHeld?"held2":"held1";else i=t?.carryType;const s=e.api.Utils.i18n(o[i]?.tooltip)??"";return o[i]?.icon.replace("placeholder",s)??""}async#H(e,t,i=null){if("none"===this.tooltipsSetting||!e)return"";if("nameOnly"===this.tooltipsSetting)return e.name??"";let s;if(s=["elementalBlast","strike"].includes(t)?await e.item.getChatData():await e.getChatData(),!s)return"";switch(t){case"item":return{name:e.name,description:s.description?.value,rarity:s.rarity,traits:s.traits,traits2:s.properties};case"spell":return{name:e.name,description:s.description?.value,properties:s.properties,rarity:s.rarity,traits:s.traits,traitsAlt:s.spellTraits};case"strike":return{name:e.label,descriptionLocalised:this.#G(e),modifiers:e.modifiers,properties:s.properties?.filter((e=>"PF2E.WeaponTypeMartial"!==e)),traits:e.traits,traitsAlt:e.weaponTraits};default:return{name:e.name,description:s.description?.value,properties:s.properties,rarity:s.rarity,traits:s.traits}}}async#D(t,i){if("none"===this.tooltipsSetting)return"";const s=e.api.Utils.i18n(i.name);if("nameOnly"===this.tooltipsSetting)return s;if("string"==typeof i)return i;const a=`<h3>${s}</h3>`,n=e.api.Utils.i18n(i?.description??i?.descriptionLocalised??""),o=i?.rarity?`<span class="tag ${i.rarity.name}">${e.api.Utils.i18n(i.rarity.label)}</span>`:"",l=i?.properties?`<div class="tah-properties">${i.properties.map((t=>`<span class="tah-property">${e.api.Utils.i18n(t)}</span>`)).join("")}</div>`:"",c=i?.traits?i.traits.map((t=>`<span class="tag">${e.api.Utils.i18n(t.label)}</span>`)).join(""):"",r=i?.traits2?i.traits2.map((t=>`<span class="tag tag_secondary">${e.api.Utils.i18n(t.label??t)}</span>`)).join(""):"",d=i?.traitsAlt?i.traitsAlt.map((t=>`<span class="tag tag_alt">${e.api.Utils.i18n(t.label)}</span>`)).join(""):"",m=i?.modifiers?`<div class="tags">${i.modifiers.filter((e=>e.enabled)).map((t=>`<span class="tag tag_transparent">${e.api.Utils.i18n(t.label)} ${`${t.modifier>=0?"+":""}${t.modifier??""}`}</span>`)).join("")}</div>`:"",p=[o,c,r,d].join(""),u=p?`<div class="tags">${p}</div>`:"";if(!n&&!u&&!m)return s;const h=`<div>${a}${u||m?`<div class="tah-tags-wrapper">${u}${m}</div>`:""}${n}${l}</div>`;return await TextEditor.enrichHTML(h,{async:!0})}#G(t){return`${t?.description?`<p>${e.api.Utils.i18n(t?.description)}</p>`:""}${t?.criticalSuccess?`<hr><h4>${e.api.Utils.i18n("PF2E.Check.Result.Degree.Check.criticalSuccess")}</h4><p>${e.api.Utils.i18n(t?.criticalSuccess)}</p>`:""}${t?.success?`<h4>${e.api.Utils.i18n("PF2E.Check.Result.Degree.Check.success")}</h4><p>${e.api.Utils.i18n(t?.success)}</p>`:""}`}}}));let y=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{const t=p;Object.values(t).forEach((t=>{t.name=e.api.Utils.i18n(t.name),t.listName=`Group: ${e.api.Utils.i18n(t.listName??t.name)}`}));const i=Object.values(t);y={layout:[{nestId:"attack",id:"attack",name:e.api.Utils.i18n("PF2E.AttackLabel"),groups:[{...t.attack,nestId:"attack_attack"}]},{nestId:"strikes",id:"strikes",name:e.api.Utils.i18n("PF2E.StrikesLabel"),groups:[{...t.toggles,nestId:"strikes_toggles"},{...t.strikes,nestId:"strikes_strikes"}],settings:{customWidth:500}},{nestId:"actions",id:"actions",name:e.api.Utils.i18n("PF2E.ActionsActionsHeader"),groups:[{...t.actions,nestId:"actions_actions"},{...t.reactions,nestId:"actions_reactions"},{...t.freeActions,nestId:"actions_free-actions"},{...t.passives,nestId:"actions_passives"}]},{nestId:"inventory",id:"inventory",name:e.api.Utils.i18n("PF2E.TabInventoryLabel"),groups:[{...t.weapons,nestId:"inventory_weapons"},{...t.shields,nestId:"inventory_shields"},{...t.armor,nestId:"inventory_armor"},{...t.equipment,nestId:"inventory_equipment"},{...t.consumables,nestId:"inventory_consumables"},{...t.containers,nestId:"inventory_containers"},{...t.treasure,nestId:"inventory_treasure"}]},{nestId:"feats",id:"feats",name:e.api.Utils.i18n("PF2E.Item.Feat.Plural"),groups:[{...t.ancestryFeatures,nestId:"feats_ancestry-features"},{...t.classFeatures,nestId:"feats_class-features"},{...t.ancestryFeats,nestId:"feats_ancestry-feats"},{...t.classFeats,nestId:"feats_class-feats"},{...t.skillFeats,nestId:"feats_skill-feats"},{...t.generalFeats,nestId:"feats_general-feats"},{...t.bonusFeats,nestId:"feats_bonus-feats"}]},{nestId:"spells",id:"spells",name:e.api.Utils.i18n("PF2E.Item.Spell.Plural"),groups:[{...t.spells,nestId:"spells_spells"}]},{nestId:"attributes",id:"attributes",name:e.api.Utils.i18n("tokenActionHud.pf2e.attributes"),groups:[{...t.heroPoints,nestId:"attributes_hero-points"},{...t.initiative,nestId:"attributes_initiative"},{...t.perceptionCheck,nestId:"attributes_perception-check"},{...t.saves,nestId:"attributes_saves"}]},{nestId:"skills",id:"skills",name:e.api.Utils.i18n("PF2E.SkillsLabel"),groups:[{...t.coreSkills,nestId:"skills_core-skills"},{...t.loreSkills,nestId:"skills_lore-skills"}]},{nestId:"effects",id:"effects",name:e.api.Utils.i18n("PF2E.EffectsLabel"),groups:[{...t.conditions,nestId:"effects_conditions"},{...t.socialConditions,nestId:"effects_social-conditions"},{...t.otherConditions,nestId:"effects_other-conditions"},{...t.effects,nestId:"effects_effects"}]},{nestId:"utility",id:"utility",name:e.api.Utils.i18n("tokenActionHud.utility"),groups:[{...t.combat,nestId:"utility_combat"},{...t.token,nestId:"utility_token"},{...t.recoveryCheck,nestId:"utility_recovery-check"},{...t.rests,nestId:"utility_rests"},{...t.utility,nestId:"utility_utility"}]}],groups:i}}));let k=null;function register(t){game.settings.register(e.ID,"calculateAttackPenalty",{name:game.i18n.localize("tokenActionHud.pf2e.setting.calculateAttackPenalty.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.calculateAttackPenalty.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"colorSkills",{name:game.i18n.localize("tokenActionHud.pf2e.setting.colorSkills.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.colorSkills.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showStrikeImages",{name:game.i18n.localize("tokenActionHud.pf2e.setting.showStrikeImages.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.showStrikeImages.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showStrikeNames",{name:game.i18n.localize("tokenActionHud.pf2e.setting.showStrikeNames.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.showStrikeNames.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}}),game.settings.register(e.ID,"showStrikeTraits",{name:game.i18n.localize("tokenActionHud.pf2e.setting.showStrikeTraits.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.showStrikeTraits.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}}),game.settings.register(e.ID,"splitStrikes",{name:game.i18n.localize("tokenActionHud.pf2e.setting.splitStrikes.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.splitStrikes.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"addAuxiliaryActions",{name:game.i18n.localize("tokenActionHud.pf2e.setting.addAuxiliaryActions.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.addAuxiliaryActions.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"addDamageAndCritical",{name:game.i18n.localize("tokenActionHud.pf2e.setting.addDamageAndCritical.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.addDamageAndCritical.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:e=>{t(e)}}),game.settings.register(e.ID,"addStowedItems",{name:game.i18n.localize("tokenActionHud.pf2e.setting.addStowedItems.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.addStowedItems.hint"),scope:"client",config:!0,type:String,default:"containers",choices:{containers:game.i18n.localize("tokenActionHud.pf2e.setting.addStowedItems.choice.containers"),nonContainers:game.i18n.localize("tokenActionHud.pf2e.setting.addStowedItems.choice.nonContainers"),both:game.i18n.localize("tokenActionHud.pf2e.setting.addStowedItems.choice.both"),none:game.i18n.localize("tokenActionHud.pf2e.setting.addStowedItems.choice.none")},onChange:e=>{t(e)}}),game.settings.register(e.ID,"addUnequippedItems",{name:game.i18n.localize("tokenActionHud.pf2e.setting.addUnequippedItems.name"),hint:game.i18n.localize("tokenActionHud.pf2e.setting.addUnequippedItems.hint"),scope:"client",config:!0,type:Boolean,default:!1,onChange:e=>{t(e)}})}Hooks.once("tokenActionHudCoreApiReady",(async e=>{k=class RollHandler extends e.api.RollHandler{async#B(e){game.packs.get("pf2e.pf2e-macros").getDocument(e).then((e=>e.execute()))}#q(e){return this.isRenderItem()&&["action","ammo","feat","item","lore"].includes(e)}#W(){const e=["character","familiar","hazard","npc"];return canvas.tokens.controlled.filter((t=>e.includes(t.actor?.type)))}#Y(){this.rollMode=this.ctrl?game.user.isGM?"gmroll":"blindroll":null,this.showCheckDialogs=this.shift?game.user.settings.showCheckDialogs:!game.user.settings.showCheckDialogs}async handleActionClick(e,t){const i=decodeURIComponent(t).split("|",2);i.length<2&&super.throwInvalidValueErr();const[s,a]=i;if(this.#Y(),this.#q(s))return this.renderItem(this.actor,a);if(this.actor)await this.#Q(e,s,this.actor,this.token,a);else for(const t of this.#W())await this.#Q(e,s,t.actor,t,a)}async handleActionHover(t,i){const s=decodeURIComponent(i).split("|",2);s.length<2&&super.throwInvalidValueErr();const[a,n]=s;if(!this.actor)return;if(!["action","elementalBlast","familiarAttack","feat","item","spell","strike"].includes(a))return;let o;switch(a){case"elementalBlast":{const[t,i]=n.split(">",2),s=e.api.Utils.getItem(this.actor,t);o=s?.rules.find((e=>e.value?.element===i))}break;case"familiarAttack":o=this.actor.system.attack;break;case"spell":{const[,,t]=n.split(">",3);o=e.api.Utils.getItem(this.actor,t)}break;case"strike":{const[t]=n.split(">",1);o="xxPF2ExUNARMEDxx"===t?this.actor.system.actions.find((e=>"xxPF2ExUNARMEDxx"===e.item?.id)).item:e.api.Utils.getItem(this.actor,t)}break;default:{const[t]=n.split(">",1);o=e.api.Utils.getItem(this.actor,t)}}o&&("mouseenter"===t.type?Hooks.call("tokenActionHudSystemActionHoverOn",t,o):Hooks.call("tokenActionHudSystemActionHoverOff",t,o))}async#Q(e,t,i,s,a){switch(t){case"action":case"feat":case"item":this.#X(a);break;case"condition":this.#J(i,a);break;case"effect":this.#K(i,a);break;case"elementalBlast":await this.#Z(e,i,a);break;case"elementalBlastDamageType":this.#ee(i,a);break;case"familiarAttack":this.#te(i);break;case"heroAction":this.#ie(i,a);break;case"heroPoints":await this.#se(i,"heroPoints","value");break;case"initiative":this.#ae(i,a);break;case"perceptionCheck":this.#ne(i);break;case"recoveryCheck":this.#oe(e,i);break;case"save":this.#le(i,a);break;case"spell":await this.#ce(i,a);break;case"spellSlot":await this.#re(i,a);break;case"skill":await this.#de(e,i,a);break;case"strike":this.#me(e,i,a);break;case"strikeAuxiliaryAction":this.#pe(i,a);break;case"toggle":await this.#ue(i,a);break;case"utility":this.#he(s,a);break;case"versatileOption":this.#ge(i,a)}}#X(e){game.pf2e.rollItemMacro(e)}async#J(e,t){this.rightClick?e.decreaseCondition(t):e.increaseCondition(t)}async#K(t,i){const s=e.api.Utils.getItem(t,i);s&&(this.rightClick?s.decrease():s.increase(),Hooks.callAll("forceUpdateTokenActionHud"))}async#Z(e,t,i){const[s,a,n,o]=decodeURIComponent(i).split(">",4),l=new game.pf2e.ElementalBlast(t),c=l.configs.find((e=>e.item.id===s&&e.element===a)),r=c.damageTypes.find((e=>e.selected))?.value??a,d="melee"===o,m="damage"===n?"success":"criticalSuccess";switch(n){case"damage":case"critical":await l.damage({element:a,damageType:r,melee:d,outcome:m,event:e});break;default:await l.attack({mapIncreases:n,element:a,damageType:r,melee:d,event:e})}}#ee(e,t){const[,i,s]=decodeURIComponent(t).split(">",3);new game.pf2e.ElementalBlast(e).setDamageType({element:i,damageType:s})}#te(e){e.attackStatistic.roll({rollMode:this.rollMode,skipDialog:this.skipDialog})}async#ie(e,t){switch(t){case"drawHeroActions"===t:await(game.modules.get("pf2e-hero-actions")?.api?.drawHeroActions(e));break;case"useHeroAction"===t:await(game.modules.get("pf2e-hero-actions")?.api?.useHeroAction(e,t))}Hooks.callAll("forceUpdateTokenActionHud")}async#se(e,t,i){let s=e.system.resources[t][i];this.rightClick?s>0&&s--:s<e.system.resources[t].max&&s++,await Actor.updateDocuments([{_id:e.id,data:{resources:{[t]:{[i]:s}}}}]),Hooks.callAll("forceUpdateTokenActionHud")}async#ae(t,i){t.inCombat&&t.combatant?.initiative?e.api.Logger.info(game.i18n.format("PF2E.Encounter.AlreadyRolled",{actor:t.name}),!0):(await t.update({"system.initiative.statistic":i}),t.initiative.roll({rollMode:this.rollMode,skipDialog:this.skipDialog}))}#ne(e){e.perception.roll({rollMode:this.rollMode,skipDialog:this.skipDialog})}#oe(e,t){t.rollRecovery({event:e})}#le(e,t){e.saves[t].check.roll({rollMode:this.rollMode,skipDialog:this.skipDialog})}async#de(e,t,i){await t.skills[i].check.roll({event:e})}async#ce(e,t){const[i,s,a,n]=decodeURIComponent(t).split(">",4);if(this.isRenderItem())return this.doRenderItem(e,a);const o=e.items.get(i),l=e.items.get(a);o&&l&&(await o.cast(l,{message:!n,consume:!0,rank:Number(s)}),Hooks.callAll("forceUpdateTokenActionHud"))}async#re(e,t){const[i,s,a]=decodeURIComponent(t).split(">",3),n=e.items.get(i);if(!n&&"focus"!==s)return;let o,l;switch("focus"===s?(o=e.system.resources.focus.value,l=e.system.resources.focus.max):(o=n.system.slots[s].value,l=n.system.slots[s].max),a){case"slotIncrease":o<l&&o++;break;case"slotDecrease":o>0&&o--}"focus"===s?e.update({"system.resources.focus.value":o}):await Item.updateDocuments([{_id:n.id,data:{slots:{[s]:{value:o}}}}],{parent:e}),Hooks.callAll("forceUpdateTokenActionHud")}#me(e,t,i){const[s,a,n,o]=decodeURIComponent(i).split(">",4);let l,c=t.system.actions.filter((e=>"strike"===e.type)).find((e=>e.item.id===s&&e.slug===a));if(this.isRenderItem()&&"xxPF2ExUNARMEDxx"!==c.item?.id)return this.doRenderItem(t,c.item.id);if(c.altUsages?.length)switch(!0){case"melee"===o&&!c.item.isMelee:l=o,c=c.altUsages.find((e=>e.item.isMelee));break;case"ranged"===o&&!c.item.isRanged:l=o,c=c.altUsages.find((e=>e.item.isRanged));break;case"thrown"===o&&!c.item.isThrown:l=o,c=c.altUsages.find((e=>e.item.isThrown))}switch(n){case"damage":c.damage({event:e});break;case"critical":c.critical({event:e});break;default:c.variants[n]?.roll({event:e,altUsage:l})}}#pe(e,t){const[i,s,a,n]=decodeURIComponent(t).split(">",4),o=e.system.actions.filter((e=>"strike"===e.type)).find((e=>e.item.id===i&&e.slug===s));o&&(o.origin&&this.isRenderItem()?this.doRenderItem(e,o.origin.id):o.auxiliaryActions[a]?.execute({selection:n}))}async#ue(e,t){const[i,s,a,n]=decodeURIComponent(t).split(">",4);if(!i||!s)return;const o=Object.values(this.actor.synthetics.toggles).flatMap((e=>Object.values(e))),l=o.find((e=>e.domain===i&&e.option===s&&e.itemId===a));if(!l)return;const c=!l.enabled||!l.checked||n&&!l.suboptions.find((e=>e.value===n))?.selected;await e.toggleRollOption(i,s,a,c,n)}async#he(e,t){switch(t){case"treatWounds":this.#B("6duZj0Ygiqv712rq");break;case"rest":this.#B("0GU2sdy3r2MeC56x");break;case"takeBreather":this.#B("aS6F7PSUlS9JM5jr");break;case"endTurn":game.combat?.current?.tokenId===e.id&&await(game.combat?.nextTurn())}}async#ge(e,t){const[i,s,a]=decodeURIComponent(t).split(">",3),n=e.system.actions.filter((e=>"strike"===e.type)).find((e=>e.item.id===i&&e.slug===s)),o=n?.item;o&&await async function toggleWeaponTrait({weapon:t,trait:i,selection:s}){if(!e?.isOfType("character"))return;const a=e.items.get(t.id),n="double-barrel"===i?"doubleBarrel":i;if(a.system.traits.toggles[n].selected===s)return;if(a?.isOfType("weapon")&&a===t){const e="doubleBarrel"===n?!!s:s;await a.update({[`system.traits.toggles.${n}.selected`]:e})}else if(a?.isOfType("weapon")&&"melee"===t.altUsageType)a.update({[`system.meleeUsage.traitToggles.${i}`]:s});else if("versatile"===i&&a?.isOfType("shield"))a.update({"system.traits.integrated.versatile.selected":s});else if("double-barrel"!==i){const e=a?.rules.find((e=>"Strike"===e.key&&!e.ignored&&e.slug===t.slug));await(e?.toggleTrait({trait:i,selection:s}))}}({weapon:o,trait:"versatile",selection:a})}}}));let b=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{b=class SystemManager extends e.api.SystemManager{getActionHandler(){return new f}getAvailableRollHandlers(){return{core:"Core PF2E"}}getRollHandler(e){let t;return t=new k,t}registerSettings(e){register(e)}async registerDefaults(){const t=y;if(game.modules.get("pf2e-hero-actions")?.active){const i=e.api.Utils.i18n("tokenActionHud.group"),s=e.api.Utils.i18n("tokenActionHud.pf2e.heroActions");t.groups.push({id:"hero-actions",name:s,listName:`${i}: ${s}`,type:"system"}),t.groups.sort(((e,t)=>e.id.localeCompare(t.id)))}return t}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const t=game.modules.get(e.ID);t.api={requiredCoreModuleVersion:"1.5",SystemManager:b},Hooks.call("tokenActionHudSystemReady",t)}));export{a as ACTION_ICON,n as ACTION_TYPE,f as ActionHandler,o as CARRY_TYPE_ICON,t as CORE_MODULE,s as DAMAGE_TYPE_ICONS,y as DEFAULTS,p as GROUP,l as ITEM_TYPE,c as MODULAR_OPTION,e as MODULE,i as REQUIRED_CORE_MODULE_VERSION,k as RollHandler,h as SKILL,r as SKILL_ABBREVIATION,u as SKILL_ACTION,d as STRIKE_ICON,m as STRIKE_USAGE,b as SystemManager,g as Utils,register};
